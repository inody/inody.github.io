<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on inosite</title>
    <link>https://inody.github.io/posts/</link>
    <description>Recent content in Posts on inosite</description>
    <image>
      <url>https://inody.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://inody.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 03 May 2022 00:00:00 +0900</lastBuildDate><atom:link href="https://inody.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>重い腰を上げてGithub pagesにポートフォリオサイト作成した</title>
      <link>https://inody.github.io/posts/portfolio-blog-hugo/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/portfolio-blog-hugo/</guid>
      <description> 今まで研究者としてのポートフォリオはGoogle Siteを、ブログはTumblrを用いていた  それぞれのアドレスは下記  https://sites.google.com/view/d-inoue/home https://inody.tumblr.com/     どちらも投稿時はWebの投稿画面にアクセスする必要があり、煩雑に感じていた 前からやろうやろうと思っていた、Github pagesでポートフォリオサイトを公開する作業に取り組んだ ジェネレータにはよく見かけるHugoを、テンプレートにはStar数の多いPaperModを使用することにした  作業には https://zenn.dev/okaponta/articles/c302f58507febc が参考になった   これまでのポートフォリオサイトの内容をコピペし、ブログ記事も移行した  最初自動化しようと思ったが、そんなに記事の本数も多くなかったため、手作業で行った   過去のブログとmarkdownやlatexのレンダリング方法が異なるため、表示がかなり崩れている  修正は面倒なので、後回しにすることにする   git pushすれば記事が公開できるようになったため、執筆のハードルが下がったと思う 今後、Google SiteやTumblrの更新を止め、こちらのサイトで情報を更新しようと思う  いろんなところに貼っているGoogle SiteやTumblrへのリンクもこちらのサイトに張り替えなければならない   こんなことやってる時間があったら研究しましょう  </description>
    </item>
    
    <item>
      <title>WSLのインストールから、外部からのSSH環境構築までの備忘録</title>
      <link>https://inody.github.io/posts/wsl-ssh/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/wsl-ssh/</guid>
      <description>インストール ここを参考にした。 以前WSL1を触った時はMicrosoftストアからイメージをDLする感じだったと記憶しているが、コマンドだけでインストールできた。 Powershellでのコマンド：
wsl --install  これだけでUbuntu20.04が自動でインストールされた。
イメージの移動 デフォルトではCドライブにインストールされる。 しかし後々ディスク容量を逼迫することが目に見えたので、別ドライブにイメージを移動させた。 ここを参考にした。 Fドライブに1TBのSSDを増設したので、基本ここの直下を使うことにした。 Powershellでのコマンド：
wsl --shutdown wsl --export Ubuntu F:Ubuntu.tar wsl --unregister Ubuntu wsl --import Ubuntu F:Ubuntu D:Ubuntu.tar --version 2  これを行うことで、デフォルトユーザーがrootになってしまう問題がある。 基本vscodeのremote sshで接続する予定なのであまり問題はないが、リンクを参考にしてユーザー権限で起動するショートカットを作成した。
また、後々明らかになったのだが、デフォルトのイメージはディスク容量が256GBを最大値として作られるようだった。 容量を拡張するために、ここに従ってコマンドを実行した。
同一LANからWSLにSSHする Ubuntu内でsshサービスを立ち上げておく必要がある。 いろいろ試行錯誤したため記憶が定かでないが、open-sshは初めからインストールされていた。 なので鍵がうまく設定されていさえすれば、同一LANの外部から接続できそうだが、問題が2つある。
 WSLではsystemdが動いておらず、サービスを自動で起動することができない。 WSL2ではホストであるWindowsと異なるIPが使用されており、直接外部から接続することが難しい。  このうち1. はWSLを起動するときにオプションでシェルスクリプトを実行できるので、それで解決した。 具体的にはWSL内でinit-wsl.shとかの名前のスクリプトを作成しておき、WSL起動時に
wsl -d Ubuntu -u root exec /home/user/init-wsl.sh  とすればよい。init-wsl.shの中身として
#!/bin/sh service ssh restart service cron restart  などと、起動したいサービスの名前を書いておく。 これでsshやcronなどのコマンドを実行できる。
つぎに2. は、Windowsポート22に来たパケットをwslのポート22に転送する設定を実施した。
for /F %%i in (&#39;wsl -d Ubuntu exec hostname -I&#39;) do set ip=%%i netsh interface portproxy delete v4tov4 listenport=22 netsh interface portproxy add v4tov4 listenport=22 connectaddress=%ip%  この設定はここを真似した。 これらがWindowsが起動されるたびに自動で実施するために、</description>
    </item>
    
    <item>
      <title>計算機を購入した</title>
      <link>https://inody.github.io/posts/buy-pc/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/buy-pc/</guid>
      <description>購入理由 正月で帰省中、ふと計算機がほしくなった。 会社のネットワークはsshがブロックされているため、家から繋ぐにはRDP接続する必要がある。 通信がラグい時もあり、ストレスで出社したりしていた。 家に計算機があれば、ちょっとした計算を家で回すことができると考えた。 （家族のいない間ゲームをしたい気持ちもあった）
要件 せっかくなので、最近話題のIntel12世代CPUを積んだやつがいい。 GPUはあんまり使わないだろうけど、機械学習に興味がなくはない（本音はゲームがしたい）ので、それなりのやつを積んでた方が良い。 メモリは32GBあれば十分だけど、16GBでも良いかもしれない。 価格は高くても25万円くらいで抑えたい。
調査 初めはフロンティアやドスパラなどのBTOを探したけど、途中から欲が出て自作したくなった。 ただ今はあらゆるパーツが高騰していて、自作するとBTOより高くつくことがわかった。 年末年始で各社がセールを行なっており、パソコン工房の自作キットが魅力的だったので（これ）、新年早々寒空の下店舗に並ぶなどしてみたが、惜しくも購入できなかった。
購入したPC 結局Dellのxps8950を買った。
スペックは以下のような感じ：
 第12世代 インテル® Core™ i7 12700K (12コア, 25MB キャッシュ, 3.6GHz - 5GHz w/Turbo Boost Max 3.0) 水冷CPUクーラー NVIDIA® GeForce RTX™ 3060 Ti 8GB GDDR6 (LHR) 16GB デュアルチャネル DDR5 (2x 8GB) 4400MHz; 最大 128GB 512GB NVMe M.2 PCIe SSD (ブート) + 1TB 7200RPM SATA 6Gb/s (ストレージ) 750W電源（プラチナ）  リンクはここ。 値段は今はちょっと高くなっているが、買った当時は学割+即納セールを利用し、21万円ちょっとだった。 DDR5メモリが枯渇する中、上記スペックのものとしては結構お買い得だったと思う。
調べると、xpsは前のモデルが排熱に問題があるとして悪評があるようだった。 それは主にケースが小さすぎる、クーラーがリテールクーラー並みにしょぼい、という理由によるもので、本モデルはケースが大きくなり、水冷クーラーを選べるので、問題にはならないと考えた。</description>
    </item>
    
    <item>
      <title>仕事と学業と育児のトリレンマ</title>
      <link>https://inody.github.io/posts/trilemma/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/trilemma/</guid>
      <description>社会人博士として大学に入学してそろそろ2か月になります。 現状を俯瞰すると、いろいろとまずい状態にあるように思われるので、問題点を列挙してみようと思います。
まず、平日に仕事と学業が思ったほど両立できていません。 今の研究室とは共同研究のご縁で配属させていただいたため、昨年度までは業務内容と学業の内容にオーバーラップがありました。 これを利用して学位取得のための研究を進められると踏んでいたのですが、現状そうはなっていません。 というのも、今年度から組織編成が変わり、業務内容が変更されたためです。 今のところ、上司は過去の業務を精算する時間として、昨年度の研究に時間を割くことを大目に見てくれています。 しかし、そのうち新しい業務項目に本格的に携わることになるのは不可避でしょう。 また、ここ最近書類の作成業務が重なったことも、研究の進捗を阻んでいるように思います。
また、平日の夜は一瞬で過ぎます。 子どものご飯を上げる、お風呂、寝かしつけなどをしていると気づけば22:00を回ります。 この時間以降に勉強を進めようとしていた時期もあったのですが、子どもが夜中に目覚めることが多く、その結果自分も寝不足になるため、最近は一緒の時間に寝てしまっています。
なにより問題なのが休日の過ごし方です。 平日に学業ができていない焦りがあり、常にiPadを手に持ち論文を読みながら子どもの相手をしています。 子どもは少しでも目を離すと視界から消え、気づくとティッシュなど手の届く場所にあるものをなんでも食べようとするので、常に見ておく必要があります。 そこに中途半端に勉強の要素を導入しようとしても無意味です。 子どもをまともに見守れず、かといって論文も全然読み進められない、当然の結果に陥っています。
妻は現在育休中であり、平日の昼の家事育児はお願いしています（朝ご飯は各自、備品の買い物、ゴミ出し、掃除などは自分が担当しています）。 このため休日まで家事育児に時間を割いてもらうのは申し訳なく、妻には土日の一方をリフレッシュデーとして自由に外出してもらうようにしていました。 しかし僕の入学以降、家事育児がおろそかになり始めてしまったため、見かねた妻が家にいてくれるようになってしまっています。 ホットクック、食洗機、ロボット掃除機などの時短家電はすでにフル稼働しており、生活は多少楽になりましたが、本質的な改善には至っていないというのが実感です。
妻から見れば、平日ただでさえ家事育児を放棄しているのに、休日もタブレット片手に漫然と過ごす夫に辟易する、といったところでしょう。 実際口にはしませんが、ストレスはたまってきているように思います。
優先順位を考えると、一番が家庭、そのつぎに食い扶持を稼ぐための仕事、最後にキャリアのための学業となるのは自然です。 しかしこの順位でこなしていくと、永遠に学業が進捗しません。 学業が進捗しない→家事育児が中途半端になる→妻のストレスがたまる→自分も消耗する→学業が進捗しない、という精神的な負のスパイラルが発生し始めているようにも思われます。
問題点をまとめると、
 平日の昼に内職的に学業を進めているものの、時限である 平日の朝や夜の子どもが起きていない時間に進めたいが、就寝時間が犠牲になる 休日に家事育児と学業が両立できない  という感じです。 タイトルの通り、仕事と学業と育児のトリレンマです。
まとまった時間の確保には、やはり休日の時間の使い方が鍵であるように思われます。 そこで、先日妻に相談し、休日にそれぞれ2時間ほどまとまった時間を確保し、僕は勉強に、妻は休憩に充て、それ以外の時間は平等に家事育児に時間を割く、という取り決めを交わしてもらいました。 この仕組みがうまくワークすることを祈るばかりです。</description>
    </item>
    
    <item>
      <title>子の寝かしつけ</title>
      <link>https://inody.github.io/posts/sleep-baby/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/sleep-baby/</guid>
      <description>娘が大きくなってきた。
以前は寝かしつけに相当苦労した。 縦抱っこをしながら子守唄を歌う。 寝息を立て始めてしばらくして大きな吐息が聞こえたら、そっとベッドに寝かせる。 少しでも乱暴な置き方をするとパチリと目が覚め大泣きされる。 こうした動作を繰り返すうちに1時間は余裕で経過する。
今は違う。 初めからベッドでごろごろさせながら一緒に遊んでいるうちに、そのまま寝息を立て始めることが増えた。 寝かしつけが随分と楽になった。
今日、久しぶりに娘の寝つきが悪かった。 久しぶりに縦抱っこをしながら子守唄を歌う。 ほんの1ヶ月かそこらぶりのことなのに、随分と懐かしく感じた。 同時に、こうして困らせられながら育児をする期間にも終わりがあるということを強く感じてしまい、急に感情が揺さぶられた。 柄にもなく涙が出てきた。
僕はうまくやれているだろうか。 この先うまくやれるんだろうか。 わからないけれど、やれるだけやってみるね。</description>
    </item>
    
    <item>
      <title>博士課程に進学しました</title>
      <link>https://inody.github.io/posts/start-phd/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/start-phd/</guid>
      <description>この4月から、東京大学の数理科学研究科に博士後期課程の学生として入学することになりました。
入社当初から会社の上司には学位を取りたいと伝えていたのですが、足掛け5年でようやくスタートを切ることができた次第です。
入社時は学生時代の指導教員が会社の近くに研究室を構えていたため、そこに通うことを狙っていたのですが、東京転勤によって難しくなってしまいました。
東京で会社に勤めながらチャンスを伺っていたところ、共同研究のご縁から指導を許可いただける運びとなりました。 なお、仕事は続けるので社会人博士です。
修士までは制御工学のどちらかというと理論寄りの研究をしており、会社でもそこで培った知識を用いて研究していたのですが、博士課程ではより数学的な研究をさせていただくことになります。
具体的には、制御にまつわる偏微分方程式を数値的に解く際に、代数解を精度良く近似している保証を与えてくれる計算手法の開発を目指します。
このトピックは会社で研究を進めるうちに遭遇した課題であり、少なくとも自分にとっての需要は大きいです。
一方、解決には偏微分方程式に関する深い知識を必要とするため、素養が皆無の自分には明らかなチャレンジだと感じます。
加えて、プライベートな懸念もあります。
入社当初は独身で失うものもなく、休日に頑張れば両立できると高を括っていました。
しかしながら5年たった今、結婚し子どもを授かったことで、土日も家庭に時間を割く必要が生じています。
このような状況において、博士課程の3年は一瞬であり、時間との戦いになることは明白です。
以上のように不安は尽きませんが、30代最初の挑戦として相応しい舞台に立てたことを前向きに捉えて、しっかり時間管理して研究に励もうと思います。</description>
    </item>
    
    <item>
      <title>2020年の振り返り</title>
      <link>https://inody.github.io/posts/lookback-2020/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/lookback-2020/</guid>
      <description>気づけば年の瀬です。 今年はコロナ禍で在宅勤務が一定期間続いたためか、矢のように時間が過ぎたと感じます。
自分は割と一人が好きなので、はじめのうちはリモートワークを歓迎し、集中して作業を進めることができました。 しかし後半になると、生活リズムがずれるとともに倦怠感を覚え始め、作業効率がガタ落ちしてしまいました。
そのせいか、今年度のアウトプット目標は「年度末までに3本投稿」でしたが、今の所2本しか投稿できていません。 うち1本はリジェクト、もう1本はアクセプトでした。 どちらも自分としてはハードルが高い雑誌だったので、1本アクセプトされたことは十分検討したとも言えそうです。 ただ、あと1本投稿できる見込みはまったく立っていません。 なんとか希望が見えるところまで頑張りたいです。
下記、今年経験したイベントと、来年経験するイベントです。
結婚した 結婚しました。 自分が実家と問題を抱えていてしんどい思いをしていたときから支えてくれた人です。 もう自分ひとりの命じゃないと感じます。 妻の応援に応えられるよう、今後もがんばります。
子どもを授かった 娘が生まれました。 コロナ禍の中大変な出産でしたが、無事に生まれてきてくれました。 もう自分ひとりの命じゃないと感じます（2回目）。
せっかくなので2か月育休を取得し、がっつり子育てに携わりました。 おむつ、ミルク、ギャン泣きの無限ループ世話に精神が削られました。 妻のワンオペでは絶対成り立たなかったと思います。
職場復帰後も、これまで比べ効率を重視した立ち回りが必要になりました。 土日の勉強時間が確保できなくなり、正直もどかしい思いもしています。
ただ、こうした悩みよりも、子どもが育っていくのを見守る喜びが上回ってくれるのが救いです。 これからどんな子に育つか楽しみです。
入学試験に申し込んだ 会社の許可が折りたため、2月に社会人博士過程の入学試験を受験する予定です。 無事受かれば、4月から「会社人」「夫」「父」「学生」の4つの肩書を背負うことになります。 正直、去年もけっこう大変だったので、今からやっていける気がしていません。 ただ、これらすべては自分で望んだことなので、頑張ってやり遂げたいです。
以上、今後ともよろしくお願いします。 皆さま良いお年を！
Amazonウィッシュリスト</description>
    </item>
    
    <item>
      <title>LaTeXで2カラムの原稿の両側にページごとの行番号を振る</title>
      <link>https://inody.github.io/posts/latex-two-cols/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/latex-two-cols/</guid>
      <description>タイトルについてです。
lineno.styを使うのですが、そのまま用いても以下の問題がありました。
 右ページの番号が真ん中に来ちゃう ページごとに番号が改まらない 数式のところでカウントがバグる  ちょっと長いですが、以下のようにすると解決しました。 オプションにpagewiseを指定するのがポイントです。
\usepackage[switch,pagewise]{lineno} \newcommand*\patchAmsMathEnvironmentForLineno[1]{ \expandafter\let\csname old#1\expandafter\endcsname\csname #1\endcsname \expandafter\let\csname oldend#1\expandafter\endcsname\csname end#1\endcsname \renewenvironment{#1} {\linenomath\csname old#1\endcsname} {\csname oldend#1\endcsname\endlinenomath}} \newcommand*\patchBothAmsMathEnvironmentsForLineno[1]{ \patchAmsMathEnvironmentForLineno{#1} \patchAmsMathEnvironmentForLineno{#1*}} \AtBeginDocument{ \patchBothAmsMathEnvironmentsForLineno{equation} \patchBothAmsMathEnvironmentsForLineno{align} \patchBothAmsMathEnvironmentsForLineno{flalign} \patchBothAmsMathEnvironmentsForLineno{alignat} \patchBothAmsMathEnvironmentsForLineno{gather} \patchBothAmsMathEnvironmentsForLineno{multline} } \linenumbers </description>
    </item>
    
    <item>
      <title>latexdiffでコンパイルエラーを回避したい</title>
      <link>https://inody.github.io/posts/latexdiff-tips/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/latexdiff-tips/</guid>
      <description>大体の問題は、数式か引用文献で発生するので、これらをdiffから除外してあげればよい：
latexdiff old.tex new.tex &amp;gt; diff.tex --exclude-safecmd=&amp;#34;cite&amp;#34; --math-markup=0 </description>
    </item>
    
    <item>
      <title>Dropboxの同時接続端末数制限を突破したい</title>
      <link>https://inody.github.io/posts/dropbox-free/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/dropbox-free/</guid>
      <description>概要 Dropbox便利ですよね。 何が便利って、真にマルチプラットフォームのクラウドストレージって、これくらいしかないという点です。
Google-Driveは便利ですが、何故かDebianに公式アプリが提供されておらず、サードパーティ製のアプリでなんとかする必要があります。 griveやgoogle drive ocamlfuseなどがあるなかで、自分は一時期rcloneを使って運用していました。 cronと組み合わせることでほぼリアルタイムな動機ができるのですが、API制限に引っかかると同期されないことがあるのが厄介でした。
また一時期はiCloudDriveにもトライしていました。 Apple製品で閉じているときは便利ですが、ubuntuとの連携はほとんど不可能といってよさそうです。
結局Dropboxに戻ってくるのですが、無料プランだと同時接続数に制限があるのが問題です。 今回それを無料のまま解除する指針を得たのでメモしておきます。
突破の手がかり まともに全部書くと、どこかから怒られそうなので、指針だけメモしておきます。 下記の事実をよく読みましょう：
 有料のDropbox Professionalプランには同時接続端末数制限はない 有料プランには試用期間が設定されている すでに接続が認証されている端末が3台以上の場合、3台の制限が発生したタイミングで端末の認証が解除されるわけではない  この2つの事実を紐付けて考えれば、答えは自ずと出てくると思います。
まとめ 怒られたらすぐ消します。</description>
    </item>
    
    <item>
      <title>macからubuntu mateにxrdpでリモートログイン</title>
      <link>https://inody.github.io/posts/ubuntu-mate-xrdp/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/ubuntu-mate-xrdp/</guid>
      <description>概要 最近のコロナの騒ぎを受けて、弊社でもリモートワークが始まりました。 今まで社内では、macbookからデスクトップubuntuにsshでログインして作業していたんですが、異なるネットワークを介して接続したことはありませんでした。 弊社のネットワークはセキュリティを意識してか、vpn環境に入るとsshできず、rdpならできるという謎仕様なので、それならということでubuntuにxrdpサーバーを立ち上げてみました。 同様の記事は他にもたくさんあるのですが（例えばこことか）、あちこち情報が散らばってて設定に苦労したので、備忘録として残しておきます。
環境  繋ぐ方：macOS 繋がれる方：ubuntu mate 18.04  ubuntu側の設定 まずRDPをするのに必要なパッケージをインストールします。
sudo apt install xrdp xorg xorgxrdp xorgxrdpを入れるのを忘れていると、リモートログイン出来ても、その後ブラックスクリーンになるので注意します（ここでハマった）。
つぎに、ログイン後のカーソル周りの不具合を治すために、/etc/xrdp/xrdp.iniでつぎの行を書き換えます。
書き換え前：
new_cursors=true 書き換え後：
new_cursors=false さらに、~/.xsessionにつぎのコマンドを書き加えます：
unset DBUS_SESSION_BUS_ADDRESS export GTK_IM_MODULE=ibus export QT_IM_MODULE=ibus export XMODIFIERS=&amp;#34;@im=ibus&amp;#34; ibus-daemon -rdx exec mate-session ほかの方の記事では、/etc/xrdp/startwm.shに書き込んでいたのですが、こっちに落ち着きました。 また~/.xsessionrcは空のままにしておきます。
最後に~/.zshrcの下の方につぎを加えます。
export &amp;#34;LIBGL_ALWAYS_INDIRECT=1&amp;#34; unset SESSION_MANAGER 正直何がなんだかわからないまま試行錯誤した結果、上記の設定でつなげるようになりました。
mac側の設定 まずmicrosoft remote desktop clientをインストールします。 App Storeからダウンロードしてください。
起動したら、新規のPCを追加し、
 PC name: ubuntuのipアドレス user account: ubuntuのユーザ名とパスワード  とします。 これで保存し、接続したらつなげるはずです。</description>
    </item>
    
    <item>
      <title>15万円で揃える在宅環境</title>
      <link>https://inody.github.io/posts/wfh/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/wfh/</guid>
      <description>最近引っ越しました。 WFHも続きそうだし、これまでちょっとずつ揃えてきたデスク周りの環境をまとめておきます。 全体像はこんな感じ。
  机（17k）
 IKEAで買ったテーブルトップに脚をくっつけたもの。脚を細いやつにしたためちょっとぐらつくけど、許容範囲内。 https://www.ikea.com/jp/ja/p/gerton-table-top-beech-30162246/ https://www.ikea.com/jp/ja/p/olov-leg-adjustable-black-90264303/    椅子（20k）
  メルカリで買ったミラチェア。 座面が死んでたのでAmazonで買った低反発マットを敷いて使っている。 腰痛もちだったが、毎日プランクしてこれに座っているとけっこう改善された。    PC（160k）
 macbook pro 13 inch 2017 家では重い作業はしないのでこれで十分だったが、在宅勤務が始まったのでもう少しいいマシンがほしい。 まだ購入して2年ほどだが早くもバッテリーが膨張してきた（替え時かもしれない）。    キーボード（33k）
  HHKB Professional Type-S 職場で使っているキーボードに合わせて自宅でも購入。    ポインタ（4k）
  Logicool M575 将来macOS以外のOSを導入したときのために導入。 MxErgoと迷ったが、HHKBと合わせて電池式にした。    モニタ（33k）
 PhilipsのPH15875856というモニタ。4Kは自分にはオーバースペックだと感じたため、31.5型、WQHD、usb-cで接続できるモニタで探した。 最初発色が狂っていたが、ドライバを更新して設定をいろいろ変えるうちに改善した。 https://www.philips.co.jp/c-p/328P6AUBREB_11/brilliance-lcd-monitor-with-usb-c-dock    モニタアーム（5k）
 HPのモニタアーム。メルカリで購入。 モニタが重いため、少しぐらつく。 HP(ヒューレット・パッカード) HP(ヒューレット・パッカード) シングルモニターアーム BT861AA    PCスタンド（2k）</description>
    </item>
    
    <item>
      <title>新年を迎えて</title>
      <link>https://inody.github.io/posts/new-year-2020/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/new-year-2020/</guid>
      <description>約一年ぶりのブログ更新です。 昨年は、公私ともに転換点を迎えた年でした。
仕事では愛知から東京への転勤を経験しました。 基本的に業務内容は地続きで、愛知での研究テーマに引き続き取り組んでいました。 対外的なアウトプットとして、査読付き国際学会採択2本、査読付き論文誌採択2本、特許出願1件を経験することができました。
またプライベートでは、実家にいた父が亡くなりました。 父は10年の長きに渡り心の病気に苦しみつづけていました。 病気の苦しみは家族に向かい、僕は逃げることしかできなかった。 訃報を聞いたときは、正直悲しみより安堵を感じてしまいました。 それまで生活を共にしていた祖母も叔父の家に越すことになり、実家には母だけが残る形になりました。 父の死に対して自分がベストを尽くしたとは到底言えないし、罪悪感で今も父の悪夢を見る。 罪滅ぼしかもしれませんが、せめてこれからはずっと味方でいてくれた母の力になれたらと思います。
今年は東京ならではの業務が本格的に始まり、仕事がますます充実しそうです。 ただ、それ以上に私生活が忙しくなりそうで、すべてを満足にこなすのは無理だと予想しています。 自分にとって大事なものを見極め、身近な人たちに心を尽くすことを大事にして、日々を過ごそうと思います。
本年もよろしくお願いします。</description>
    </item>
    
    <item>
      <title>2018年に読んでよかった本 &amp; 2019年の目標</title>
      <link>https://inody.github.io/posts/goal-2019/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/goal-2019/</guid>
      <description>久しぶりの投稿、しかも旬がすぎたタイトルでの投稿です。
2018年は大企業特有の闇の1年研修を終え、ようやく研究業務を始められた年でした。 企業研究所の研究環境といえば、先日kumagi氏の例の記事がバズりましたね。 記事を読んで、企業研究所の研究環境はどこも似たり寄ったりで、弊社の研究環境も他と同程度には恵まれているのかなという感じがしました。 いろいろ言いたいことはありますが、自分は配属がアタリで、大学のように自由に研究させてもらえる部署だったこともあり、文句を言う前に成果を出さねばと言う気持ちです。
業務内容は物理に近い分野で、自分に馴染みが薄かったため、足りない知識を補うための勉強からはじめました。 業務時間に学べる環境は大変ありがたく、色々な本を発注しては読みふける日々を送っています。 初めのうちは熱統計や流体力学の本を読んでいたのですが、気がつけば仕事に直結しない数学の本まで仕入れ始めていました。
本記事ではその中で読んで良かったと思うものを紹介します。
まず田崎先生の「統計力学」です。 以前統計力学に触れたときは、何が仮定で何が結論かがわかりづらく感じたのですが、本書は納得できる仮定を列挙した上で、力学的な仕事をすべての出発点として議論を展開しているので、数学的にもWell-definedな本だと感じました。 また数理物理の本は行間を推測させるような最小限の記述に留められることが多いと思いますが、本書はそれとは真逆の読み物のような文体で書かれているので、初学者にもとっつきやすく感じられました。 とはいえ内容はしっかりしているため自分もすべて網羅できたわけではなく、今後も手に取り続ける本になりそうです。
次に山田先生の「工学のための関数解析」です。 さまざまな分野に登場する関数解析ですが、自分はとある論文の中で偏微分方程式の解の存在証明に半群の理論が出てきたため、勉強し始めました。 Twitterでおすすめされていた本書を試し読みなしにポチったのですが、これがかなり良くて、数学の厳密さを犠牲にすることなく、概念の「心」をしっかり伝えている本でした。 関数の連続性や収束性と聞くと身構えてしまいますが、「解析の対象が関数になっても、関数を距離で実数に写してあげて、そこで連続性や収束性を考えればよい」と宣言してあるのは目から鱗でした。
こちらもまだ読了したわけではなく、会社の同期と読み会を進めているところです（いつ終わるのやら）。 本書はスペクトル理論や半群の理論はカバーしていないため、読み終わったら次は黒田先生の「関数解析」を読もうと思います。
最後に兼清先生の「確率微分方程式とその応用」です。 確率過程は今まで何度も挑戦しようとした分野なのですが、前提知識が多すぎて挫折を繰り返してきました。 確率を数学の土台に乗せるには測度論の知識が必要ですし、確率過程のサンプルパスは関数になるので、収束性の議論などに関数解析の知識が必要になります。 そのため一から勉強を初めて確率過程の定義に辿り着くころには、土台の部分の知識を忘れてしまうという悲しい現実に直面します。
こんなときにありがたいのは、最小限の用語を定義しながら、時には証明を犠牲にして、ストーリーを重視して伝えてくれるような本であり、本書もまたそのような形式をとっています。 フィルトレーションやマルチンゲールといったつまづきやすい概念の裏にある気持ちをしっかり伝えた上で定理を述べ、その使い方まで提示してくれているのはありがたい限りです（それでも理解できないのは僕の頭がポンコツなのでしょう）。 似たテイストの本として、B.エクセンダールの黄色い本がありますが、自分には兼清本の方がまだリーダーフレンドリーに感じられました。 本書は手にとって間も無く、まだ全然読み進められていないので、引き続き気合い入れて読んでいこうと思います。
余談ですが、確率自体を公理的に定義してしまえば、測度論なしに確率論を進められるっぽいです。 また確率過程論も測度論なしに展開している本があるようで、小倉先生の「物理・工学のための確率過程論」がそれに当たります。 自分は最初この本から勉強し始めたのですが、どうも本質から逃げているように感じてしまい、本棚に戻してしまいました。
以上、おすすめでした。
2018年はインプットは順調でしたが、満足にアウトプット出来なかったことが悔やまれます。 2019年は、引き続き勉強を続けるとともに、アウトプットにも繋げられたらと思います。 目標はつぎの3つです。
 論文3本投稿： 昨年は一本しか書けませんでした。 初年度にしては上々だと思っていたのですが、尊敬する若手の人たちのホームページを眺めると、いくつものpublicationや講演が並んでおり、悔しい気持ちになります。 彼らに少しでも追いつくためにも、今年は最低3本は書きたいです。 Webサービス公開： 毎年アウトプット欲が高まる時期に、フレームワークの勉強だけして、満足して何も作らず終わるという現象が続いています。 去年はFlaskでRestAPIの実装をし、Herokuにアップロードするところまで体験できたので、今年は何かしらのサービスを作って実際に公開するところまで進めたいと思います。 どれだけしょぼくてもいいので、見栄をはらずにアウトプットしたいです。目指せいつでも転職できる人材。 博士課程の行先の決定： 過去に何度も進学を考えたことがあったのですが、資金面が主な理由で断念してきました。 弊社の社会人博士制度は比較的整っており、社内のロビー活動さえうまくいけば、会社に勤めながら学位を目指すことができます。 幸い上司は理解を示してくれており、あとは行き先だけという感じです。 4月から少し職場環境が変わりそうなので、それを活かしていろんな先生に会ってみようと思います。  みなさま今年もよろしくお願いします。</description>
    </item>
    
    <item>
      <title>Langevin方程式とFokker-Planck方程式の対応</title>
      <link>https://inody.github.io/posts/langevin-fokkerplanck/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/langevin-fokkerplanck/</guid>
      <description>$x(t)\in\mathbb R$の時間発展が、つぎの非線形ランジュバン方程式 $$ \dot x(t) = f(x(t)) + R(t) $$ で表されるとする。 ここで、$f:\mathbb R\to\mathbb R$は関数、$R:\mathbb R\to\mathbb R$はランダム力である。 $R(t)$はつぎの仮定を満たすとする。
 $R(t)$はガウス過程。 すなわち、$t_1,\ldots,t_k$を選んだとき、$R(t_1,\ldots,t_k):=(R(t_1),\ldots,R(t_k))$が多次元正規分布に従う。 $\mathbb E[R(t)] = 0. $ $\mathbb E[R(t)R(t&amp;rsquo;)] = D\delta(t-t&amp;rsquo;)$, ただし$D$は正の定数。 $x(t)$と$R(t&amp;rsquo;)$が$t&amp;lt;t&amp;rsquo;$で独立。  時刻$t$に$x(t)$が$[x,x+dx]$にある確率を$p(x,t)dx$と定義する。 $p(x,t)$を分布関数という。 $p(x,t)$はつぎの仮定を満たすとする。
 $x\to\pm\infty$で$p(x,t)\to 0. $ $x\to\pm\infty$で$\frac{\partial p(x,t)}{\partial x}\to 0. $  このとき、$p(x,t)$はつぎのフォッカープランク方程式に従う。 $$ \frac{\partial p(x,t)}{\partial t} = \left( -\frac{\partial }{\partial x}f(x) + \frac{\partial^2}{\partial x^2}\frac{D}{2} \right) p(x,t) $$
証明はいろんなところに載ってる。 あとで追記するかも。
まず\eqref{eq:langevin}を$t$から$t+\Delta t$まで積分する。 $$ \int_t^{t+\Delta t} \dot x(\tau) d\tau = \int_t^{t+\Delta t} f( x(\tau) )d\tau + \int_t^{t+\Delta t} R(\tau) d\tau $$ 左辺は $$ \int_t^{t+\Delta t} \dot x(\tau) d\tau=x(t+\Delta t)-x(t) =: \Delta x(t) $$ 右辺第1項は、$\Delta t$が十分小さいと仮定し $$ \int_t^{t+\Delta t} f( x(\tau) )d\tau \approx f(x(t))\Delta t $$ と近似できる。第2項を$\Delta W$とおくと $$ \Delta x(t) \approx f(x(t))\Delta t + \Delta W $$ と書ける。</description>
    </item>
    
    <item>
      <title>OpenCV/ArUcoライブラリで物体位置計測</title>
      <link>https://inody.github.io/posts/opencv/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/opencv/</guid>
      <description>OpenCVは画像処理に触れたことのある人ならば知らない人はいないと言われるほど有名なライブラリですが、本日はそのモジュールの一つである、AR用ライブラリArUcoを用いて、物体の位置計測をしてみます。
ネットにはC++の記事がたくさん転がっているのですが、Pythonを用いた記事が少ないように感じたため、備忘録としてブログに残そうと思った次第です。
やりたいこと 机の上に座標系を設定し（横の辺が$x$軸、縦の辺が$y$軸とか）、机の上を動き回る物体（小型ロボットとか）の位置座標を、机を撮影するカメラの映像から推定したいです。
準備  PCにPythonはインストールされているとし、OpenCVのインストールから行います。
pip install opencv-contrib-python  動作確認を行いましょう。
import cv2 aruco = cv2.aruco help(aruco)  それっぽい文章がわちゃわちゃ出てきたら、インストール成功です。
マーカー生成 ArUcoでは、QRコードのような2次元マーカーを生成し、画像中から生成されたマーカーを認識することができます。 画像の生成は以下のように行います。
dictionary = aruco.getPredefinedDictionary(aruco.DICT_4X4_50) for i in range(5): marker = aruco.drawMarker(dictionary, i+1, 100) cv2.imwrite(&#39;ar_marker&#39;+str(i+1)+&#39;.png&#39;, marker)  ここで、getPredefinedDictionaryはマーカーが格納されている辞書を呼び出す関数であり、DICT_4X4_50は辞書の種類を表します。 また、forループの中では、drawMarkerでidが$i+1$のマーカーを呼び出し、imwriteで呼び出したマーカーを保存しています。
生成された画像はつぎのようになります。
今回マーカーは5つ呼び出しました。 1つは物体に設置し、認識するためのもので、残りの4つは座標変換のためのものです。
マーカー検出 画像中のマーカーを検出するためのコードが以下です。
img = cv2.imread(&#39;img.jpg&#39;) corners, ids, rejectedImgPoints = aruco.detectMarkers(img, dictionary) img_marked = aruco.drawDetectedMarkers(img, corners, ids) cv2.imwrite(&#39;img_marked.png&#39;, img_marked)  detectMarkersで、画像からマーカーを認識します（たった一行！）。 戻り値であるcornersとidsは、それぞれ検出されたマーカーの座標とidが格納されたリストです。
先ほど生成された画像をモニタに表示させ、手元のカメラで撮影したものを認識させてみました。 結果がつぎのようになります。
座標変換 ArUcoでは、画像中のマーカーの位置を検出することができますが、その位置座標は机の上の座標と必ずしも一致しません。 このため、机の上に座標変換用のマーカーを設置し、それらを用いて座標変換を行うことにします。 この作業は、ArUcoではなく、OpenCVライブラリによって実現できます。</description>
    </item>
    
    <item>
      <title>デルタ関数とは、超関数とは</title>
      <link>https://inody.github.io/posts/generalized-function/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/generalized-function/</guid>
      <description>デルタ関数って結局何なの？ 工学の至る所で現れるデルタ関数。これはよく $$ \delta(t):= \begin{cases} \infty, &amp;amp; t=0\\newline 0, &amp;amp; t\ne 0 \end{cases}, $$ $$ \int_\infty^\infty \delta(x-y)f(y)dy = f(x), $$ $$ \int_\infty^\infty \delta(t)dt = 1 $$ を満たす関数 $\delta$ という風に定義されていますが、「 $t=0$ は測度0なので、その積分は0になるのでは」と考えたことがある人は多いのではないでしょうか。 実はこの定義は不正確なものであり、「超関数」という概念によって、正確に定義することができます。
超関数の定義 ある数値を入力するとある数値を出力する装置のことを、関数といいます。 これに対して、ある関数を入力するとある複素数を出力するような装置のことを、汎関数といいます。 汎関数 $F$ に関数 $\phi$ を入力した時の出力値を $F[\phi]$ 、または $\langle F, \phi \rangle$ と書きます。以下では後者の書き方を用います。
全区間で無限回微分可能で、関数値が0でないところが有界区間に限られるような関数の全体からなる集合を $\mathcal D$ とします。 $\mathcal D$ 上に属する関数 $\phi$ をテスト関数と呼びます。 また、 $\mathcal D$ を定義域とする汎関数を $\mathcal D$ 上の汎関数と呼びます。
ここで、シュワルツの超関数は、つぎのように定義されます。
汎関数 $F$ が、
 $\langle F, \phi_1 + \phi_2\rangle = \langle F, \phi_1\rangle + \langle F, \phi_2\rangle,$ $\langle F, c\phi\rangle = c\langle F, \phi\rangle\ (c\in\mathbb K),$ テスト関数の列 ${\phi_n}$ が $n\to\infty$ で $\phi$ に収束する時、 $\langle F, \phi_n\rangle$ もまた $\langle F, \phi\rangle$ に収束する  を満たすとき、 $F$を超関数という。</description>
    </item>
    
    <item>
      <title>カーネル型機械学習入門</title>
      <link>https://inody.github.io/posts/kernel-machine-learning/</link>
      <pubDate>Sun, 23 Jul 2017 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/kernel-machine-learning/</guid>
      <description>$d$個の数値を並べた変数$\mathbf{x}=(x_1,x_2,\ldots,x_d)^{\mathrm T}$から、 $y$という変数を推定する多変量の回帰問題を考えます。 サンプルデータは$n$組あるとし、$i$番目のサンプルを$\mathbf{x}^{(i)}, y^{(i)}$と書くことにします。
線形モデル まず、カーネルを使わない線形モデル
$$y = \mathbf w^\mathrm T \mathbf x$$
を考えましょう。これは、データを原点を通る直線で当てはめることを意味します。 直線からのズレに対して、損失を
$$r(y,\mathbf{x};\mathbf{w}) = (y-\mathbf w^\mathrm T \mathbf x)^2$$
として定義し、全てのサンプルの総和
$$R(\mathbf{w}) = \sum_{j=1}^n r(y,\mathbf{x};\mathbf{w})$$
を考えます。$R(\mathbf{w})$は
$$\mathbf y := \left( \begin{array}{ccc} y^{(1)}\newline y^{(2)}\newline \vdots\newline y^{(n)} \end{array} \right) $$ $$X := \left( \begin{array}{ccc} x_1^{(1)} &amp;amp; \cdots &amp;amp; x_d^{(1)}\newline x_1^{(2)} &amp;amp; \cdots &amp;amp; x_d^{(2)}\newline \vdots&amp;amp; &amp;amp; \vdots\newline x_1^{(n)} &amp;amp; \cdots &amp;amp; x_d^{(n)} \end{array} \right) $$
を用いて、
$$R(\mathbf{w})=(\mathbf y-X\mathbf w)^\mathrm T(\mathbf y-X\mathbf w)$$</description>
    </item>
    
    <item>
      <title>日経平均株価をLSTMを用いて予測してみた</title>
      <link>https://inody.github.io/posts/lstm-market/</link>
      <pubDate>Sun, 16 Jul 2017 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/lstm-market/</guid>
      <description>概要 今流行りの深層学習で日経平均株価を予想してみました。 結論から言えば、全く予想できず、惨敗でした。
LSTMとは LSTMとはリカレントニューラルネットワーク（RNN）と呼ばれる機械学習手法の一つです。 RNNを用いることで、現在と過去一定時間の時系列データから、未来のデータを予測することができます。 また、RNNを改良したLSTMでは、長期のトレンドが反映されやすいとされています。
詳しくはこちらのサイトをご覧ください。
学習データとかモデルとか こちらのサイトから、過去4ヶ月の1時間足のデータをダウンロードし、学習データとして用いました。 モデルの隠れ層のユニット数は100、過去20時間の株価から1時間先の株価を予測するモデルを用いました。学習方法はAdamを用いました。
実装 Keras(TensorFlow)を用いて実装しました。初めて使ったんですが、短く書けて便利ですね。以下、ソースコードを載せておきます。
# coding: utf-8 import numpy as np from keras.models import Sequential from keras.layers import Dense, Activation from keras.layers.recurrent import LSTM from keras.optimizers import Adam from keras.initializers import TruncatedNormal from keras.callbacks import EarlyStopping from sklearn.model_selection import train_test_split import matplotlib.pyplot as plt import seaborn import pandas as pd df = pd.read_csv(&#39;~/deep_learning/csv/nikkei4_7.csv&#39;) x = df[&#39;始値&#39;] / df[&#39;始値&#39;].max() f = list(x) length_of_sequences = len(f) maxlen = 20 data = [] target = [] for i in range(0, length_of_sequences - maxlen): data.</description>
    </item>
    
    <item>
      <title>一色正彦ら著『理系のための交渉学入門』を読みました</title>
      <link>https://inody.github.io/posts/read-isshiki/</link>
      <pubDate>Sun, 29 Jan 2017 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/read-isshiki/</guid>
      <description>交渉というと、心理的駆け引きがものをいう、才能が支配する活動であり、自分のような口下手には縁遠いものだという印象がありました。 しかしながら、本書は「交渉には理論があり、後天的に交渉力は獲得できる」という立場のもと、その基礎的な理論を紹介しています。
もっとも基礎的なこととして、交渉は準備が8割であり、始める前につぎの3つを決めるべきだとあります。
 ミッション（Mission）：交渉の軸となるもの。 ゾーパ（ZOPA, Zone Of Possible Agreement）最高と最低の2段構えの幅のある目標 バトナ（Best Alternative To Negotiated Agreement）：ミッションを達成できなかったときの代替選択肢。  また、これらを定める前後で、違いを取り巻く状況を把握するために、マップやツリーを書いてみることは、状況を俯瞰したり、問題点を分解したりする際に役立ちます。
交渉中、お互いの考えを把握するために、ブレイン・ストーミング、いわゆるブレストを行うことも非常に有効だとあります。 ただし、ブレストをする上で絶対に守らなければいけないこととして、
 はじめに最後に行うことを決めておく アイデアの批判と評価を混在しない 取りうる選択肢を決める際は、軸を決めて比較し、決定する  などがあります。
相手との長期的な関係を求めている場合、下手な交渉テクニックを使うことはあまり得策ではないそうです。 このような交渉テクニックとして
 フットインザドア：最初に取るに足らないような要求を提示し、小さなイエスを引き出す、その上で徐々に要求をエスカレートさせていく。 ドアインザフェイス：最初に課題な要求を出して相手にノーと言わせ、条件を下げて本来の要求を出す。 ニブリング：一旦合意に達した後、相手の気が緩んだところに追加条件を提示し、受諾させる。 タイムプレッシャー：アイスブレイクの時に相手の交通手段などを聞き出し、デットラインを把握。その上で交渉の最終条件の提示をそのデットライン近くまで遅らせ、プレッシャーを与える。  などがあります。
最後に、交渉を成功させる秘訣は、決して感情的にならず、なるべく第三者の視点から交渉に臨むことです。 これから社会人になる身として、学ぶべきことが多く書かれていた本書は、ぜひ手元に置いておきたい本だと感じました。</description>
    </item>
    
    <item>
      <title>GPIFのデータをもとに最適ポートフォリオ問題を解いてみた（3）</title>
      <link>https://inody.github.io/posts/portfolio3/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/portfolio3/</guid>
      <description>GPIFによるデータ GPIF（年金積立金管理運用独立行政法人）は、厚生年金と国民年金の積立金の管理・運用を行っている団体です。 この団体は、定期的に各金融商品のリスクとリターン、相関係数について評価しており、それらをもとに積立金の運用のためのポートフォリオを決定しています。 ただし、ここでの金融商品とは、会社ごとの株式などではなく、TOPIXや日経225などに代表される、株式市場の株価指数を指すこMとに注意してください。
GPIFは、金融商品を
 国内債券 国内株式 海外債権 海外株式  の4つに分けて評価をおこなっており、それぞれのリターン、リスク、相関係数の値は2016年公開のこちらの資料によると、つぎのようになっています。
リターン（リスクプレミアムなし）
   国内債券 国内株式 海外債権 海外株式     2.3 5.9 3.6 6.3    リスク
   国内債券 国内株式 海外債権 海外株式     4.2 25.23 11.82 26.76    相関係数
    国内債券 国内株式 海外債権 海外株式     国内債券 1.000 -0.230 -0.040 -0.090   国内株式 -0.</description>
    </item>
    
    <item>
      <title>GPIFのデータをもとに最適ポートフォリオ問題を解いてみた（2）</title>
      <link>https://inody.github.io/posts/portfolio2/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/portfolio2/</guid>
      <description>ポートフォリオ最適化 複数の金融商品の組み合わせのことを「ポートフォリオ」といいます。 あなたはAとBを購入する際、そのポートフォリオを調節することで、リスクをできるだけ小さくしながら、リターンをできるだけ大きくしようと思っています。 けれども、「ハイリスクハイリターンの原則」により、それらを限りなく小さくすることはできません。 しかしながら、あなたがもし「望ましいリターン」を決めたときに、「そのリターンを達成し、かつ最もリスクを小さくするポートフォリオ」を求めることは可能です。 このことを「ポートフォリオ最適化」といいます。
この問題を数学的に記述しましょう。 $n$個の金融商品を考えます。 それぞれの商品には$1,\ldots,n$とラベルが振られているとします。 それぞれの商品のリターンを$\mu_1,\ldots,\mu_n$とします。 それぞれの商品のリスクを$\sigma_1,\ldots,\sigma_n$とし、それらを対角に並べたものを$\Sigma$とします。 つまり $$ \Sigma = \begin{bmatrix} \sigma_1 &amp;amp; \cdots &amp;amp; 0\ \vdots &amp;amp; \ddots &amp;amp; \vdots\ 0 &amp;amp; \cdots &amp;amp; \sigma_n \end{bmatrix} $$ です。 商品$i$と$j$の間の相関係数を$r_{ij}$とし、それらを縱橫にならべたものを$R$としましょう。 つまり $$ R = \begin{bmatrix} r_{11} &amp;amp; \cdots &amp;amp; r_{1n}\ \vdots &amp;amp; \ddots &amp;amp; \vdots\ r_{n1} &amp;amp; \cdots &amp;amp; r_{nn} \end{bmatrix} $$ です。
それぞれの商品の購入割合（つまりポートフォリオ）を$w_1,\ldots,w_n$とし、これらを縦に並べたものを$w$とします。 あなたはポートフォリオ$w$を決めることで期待リターン$\nu$を達成したいとしましょう。 このとき、ポートフォリオ最適化問題はつぎのように定式化できます。
最小化すべき目的関数は $$ w^\mathrm{T}\Sigma R \Sigma w\ $$ です。これは全体のリスクを表します。
また、制約条件は $$ w_i \ge 0 \ \forall i = 1, \ldots, n,\ \sum_{i} w_i = 1,\ \sum_{i} w_i\mu_i \ge \nu $$ です。 一つめの不等式は、かく商品の購入割合が正の値であることを表し、2つめの等式は、購入割合の合計が1であることを表します。 また最後の不等式は、全体のリターンが期待リターン$\nu$を上回ることを意味します。</description>
    </item>
    
    <item>
      <title>GPIFのデータをもとに最適ポートフォリオ問題を解いてみた（1）</title>
      <link>https://inody.github.io/posts/portfolio1/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/portfolio1/</guid>
      <description>なぜ分散投資が有効なのか ここに2つの金融商品があったとしましょう。 それぞれの金融商品は「リスク」と「リターン」という特徴量を持っているとします。 リスクは将来予想される値動きの幅を表し、リターンは将来予想される価値の上昇率を表します。 確率の言葉を使うと、リスクは標準偏差、リターンは平均に対応しています。
経済学の言葉に、「ハイリスクハイリターンの原則」というものがあります。 これは、ローリスクかつハイリターンな商品はあり得ないということを表すものです。 例えば、銀行の定期預金などはローリスクである代わりに、リターンも小さくなります。 一方で、株式などはハイリターンが期待できますが、値動きが読めない分ハイリスクであると言えます。
また、2つの金融商品のペアは、「相関係数」という特徴量を持っているとします。 これは、2つの金融商品がどの程度連動して値動きするかを表します。 例えば相関係数が正の値なら、片方の商品が値上がりしたとき、もう片方の商品も値上がりすることが多いことを意味し、相関係数が負の値なら、片方の商品が値上がりしたとき、もう片方の商品は値下がりすることが多いことを意味します。
投資の世界には「卵は１つのカゴに盛るな」という言葉があります。 これは、金融商品を分散して買うことで、リターンを維持しつつ、トータルのリスクを減らすことを推奨する言葉です。
例えば今、2つの金融商品の片方をA、もう片方をBとしましょう。 Aのリターンは5、リスクは10であるとします。 またBのリターンは10、リスクは20であるとします。 さらに、AとBの相関係数は-0.5であるとします。
ここで、片方の金融商品を買ったときと、両方を分散して買ったときの、「リターン/リスク」を求めてみましょう。 この値は、リスクに対してリターンがどれだけ大きいかを示すもので、大きいほどお買い得ということを意味します。
まず、片方の金融商品を買ったとき、両金融商品とも、リターン/リスクは0.5です。
つぎに、AとBを半分ずつ購入したときのリターンとリスクを求めてみましょう。 ここでAとBそれぞれのリターンとリスクが$\mu_A, \mu_B, \sigma_A, \sigma_B$、相関係数が$r_{AB}$であるとし、また二つの商品を$w_A:w_B$の割合で購入したとき、合計のリターン$\mu$とリスク$\sigma$は $$ \mu = w_A \mu_A + w_B \mu_B, $$ $$ \sigma = \sqrt{ (w_A \sigma_A)^2 + 2(w_A w_B r_{AB}\sigma_A\sigma_B) + (w_B \sigma_B)^2 } $$ として求められます。 このことを用いると、分散投資したときのリターンは $$ 0.5\times 5 + 0.5\times 10 = 7.5 $$ となり、リスクは $$ \sqrt{ (0.5\times 10)^2 + 2(0.5\times 0.5\times (-0.5)\times 10\times 20) + (0.</description>
    </item>
    
    <item>
      <title>資格取得と人生設計</title>
      <link>https://inody.github.io/posts/license-life/</link>
      <pubDate>Mon, 26 Dec 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/license-life/</guid>
      <description>簿記3級に合格してから、ファイナンシャルプランニング技能検定3級の勉強を進めています。
はじめは「社会に出るにあたって資格の一つや二つ取ったほうがいいだろう」と気軽な気持ちで始めた資格勉強ですが、簿記の合格を契機にその楽しさに目覚めてしまいました。 なんというか、やればやるだけ強くなれるところがRPGと似ていて癖になります。 また、TOEICなどのスコア式の資格と違い、受かるか落ちるかのどちらかである点も、ゲーム性を上げているように思います。
また一度ハマってしまったからには、より上位の資格にも手を出したくなります。 これらの資格は2級以上でないと転職などに役立たないと聞きますし、FP3級の受験が終わったら受けてみようかと検討中です。
一方で、資格の取得自体を目的化してしまうのは危ないとも感じています。 有限の時間の中で、いかに自分のキャリアの可能性を広げ、深化させるかが最も大切であり、資格取得はそのための手段にすぎません。
自分の場合、研究職としてのメインキャリアを歩みつつ、できれば研究された技術の知財化や商品化などにも携わりたいと思っています。 特に知財には興味があるので、知的財産管理技能士や弁理士の資格をとることは大いに検討すべきです。
さらに欲を言えば、資格に限らず、プログラミングや数学の勉強も今まで以上に進めていきたいです。 特にWebサービスをスクラッチから実装したことがないので、ぜひ挑戦してみたいです。
資格にせよ勉強にせよ、あまり手広くやると時間の無駄に終わることは明らかです。 これを機に一度ロードマップを作ってみるのもよいかもしれません。</description>
    </item>
    
    <item>
      <title>簿記3級に受かりました</title>
      <link>https://inody.github.io/posts/bookkeeping/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/bookkeeping/</guid>
      <description>就職を春に控え、一般常識で欠けている知識を補うために受験した簿記検定3級。 本番で解答用紙の下書きを消し忘れるという手痛いミスをしてしまいましたが、本日結果を確認すると、しっかり点が加算されていました。 参考書として使ったのは、TAC出版のスッキリわかる 日商簿記3級 第7版 [テキスト&amp;amp;問題集]です。 全体的にコンパクトにまとまっており、無駄なく勉強することができました。
つぎはファイナンシャルプランナー検定を受験したいと思います。</description>
    </item>
    
    <item>
      <title>LaTeXで図を作成するときにおすすめの方法</title>
      <link>https://inody.github.io/posts/latex-figure/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/latex-figure/</guid>
      <description>研究者の皆さんは，論文を作成するときにIllustratorなどのベクターイメージ編集ソフトを使っていることと存じます． しかしながら，こうしたソフトは一般に有償であり，学生には手が届かないもの． 中にはInkscapeなどのフリーソフトもあるため，そちらを使っている方もいるかもしれません（僕も少し前までこの方法でした）． 今回僕が紹介する手法は，皆さんおなじみのPowerPointやKeynoteなどのプレゼンテーションソフトを使う方法です．
本手法には，
 ほとんどどのPCにもビルドインされているプレゼンソフトを使って作図できる（もちろんベクター画像として） 作成した図をそのままプレゼンの素材として流用できる プレゼンソフトの拡張機能を用いて，LaTeXコードで書かれた数式を自由に挿入・変更できる  などのメリットがあります．
さて，本題の方法ですが，至ってシンプルです． 今回はPowerPointで説明します．
  PowerPointを起動し，最もシンプルな白背景のテンプレートから新規ファイルを作成します
  「デザイン」タブの「スライドのサイズ」から，スライドの縦横比を描きたい図に合わせて望ましいものに変更します
  白紙のスライドに，図形ツールなどを使って図を作成します
  新しい図は，スライドを改めて作成します
  図を全て描き終わったら，「ファイル」からPDFとしてエクスポートします
  LaTeXのソースコードで図を読み込むとき
\begin{figure}[t] \centering \includegraphics[page=1,width=60mm]{figure.pdf} \caption{An example. } \end{figure}
というように，page=のオプションを用いることで，表示したい図に対応するページ番号を指定します
  LaTeXコードをコンパイルします
  …という感じです．
この方法ですと，作成した図を一つのPDFファイルにまとめることができ，ディレクトリがすっきりするのも嬉しいポイントです． ただ，論文に挿入する図ごとに縦横比が大きく異なる際は，別の.pptxファイルを用意しなければいけませんので，注意が必要です．
また，PowerPointの場合，IquanaTeXというマクロを使えば，任意のLaTeXコードをベクター画像として生成・編集できますし，Keynoteの場合，MacTeXに最初から付属しているLaTeXitを用いれば自由に数式を挿入できます．
また，もしMatlabの図を使いたい場合，Matlabのプロットが表示されているウィンドウから「編集」→「Figureのコピー」を選んで，そのまま貼り付ければちゃんとベクター画像として処理してくれます．
この方法を編み出してから，めんどくさい作図にかかる時間を短縮することができるようになりました． 読者の皆さんにも自信をもっておすすめします．</description>
    </item>
    
    <item>
      <title>モーパッサン『女の一生』を読みました</title>
      <link>https://inody.github.io/posts/read-maupassant/</link>
      <pubDate>Fri, 26 Aug 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/read-maupassant/</guid>
      <description>二人の人間が、本当に魂の底まで、思いの奥底までひとつになることはできないのだと、ジャンヌは初めて思った。肩を並べて歩き、ときに抱き合うことはあっても、ひとつに溶け合うことはなく、心の底では誰もが生涯一人ぼっちなのだと。
  モーパッサン『女の一生』光文社古典新訳文庫
 光文社古典新訳文庫のシリーズが軒並みKindle Unlimitedの対象になっていたので、読書欲が際限なく刺激される今日この頃。 最近は新書を読むことが多かったので、久しぶりに読む小説は新鮮に感じられました。
以下あらすじ：
主人公のジャンヌは、貴族の一人娘として生まれ、幼い頃から修道院で何の汚れも知らぬまま大人になる。 ある日出会った美男の子爵ジュリアンからの求婚を受けるジャンヌ。 幸福の絶頂にいる彼女だが、その後の人生は要約すると転落の一言。
ある日、以前から様子がおかしい召使のロザリが突然倒れ、子供を出産する。 誰の子か問いただしても、口を閉ざすロザリ。 神父の前で懺悔させると、ようやく重い口を開き、父親がジュリアンであることを告げる。 ジャンヌの父親はこれに激怒するが、神父に誰にでもある間違いにすぎないと説得され、若いころの自分にも心当たりのあった父親はこれを許す。
ジャンヌにはその頃既に妊娠していた。 夫への愛は完全に消え失せた彼女だが、生まれる子供には出来る限りの愛情を尽くすことを誓う。
ジャンヌは父親とともに生まれてきた息子ポールを溺愛する。 ジュリアンはその頃、近所に住む貴族のジルベルト夫人と不倫を始めるが、既に夫に失望しているジャンヌは、苦悩の末見てみぬ振りをすることを選ぶ。 しかしながら夫人の夫に事がバレた二人は、密会中に夫に殺される。
一時期は愛した夫を失ったジャンヌは、母親にも先立たれたたジャンヌの父親とともに、ますます過剰なまでの愛をポールに注ぐ。 結果落ちこぼれとして育ったポールは、学校に入学後も落第しつづけ、女と駆け落ちしてロンドンに行方を眩ます。 彼は事業を起こして失敗し、多額の借金を背負い、手紙でジャンヌに無心する。 ジャンヌは財産を全て失い、家を手放すことになり、ジャンヌの父もその心労から脳溢血で亡くなる。
ポールは恋人に子供を産ませるが、産褥で亡くなる。 そのことを知ったジャンヌは、召使に引き取らせた孫娘を胸に抱き、終劇。
：以上あらすじ
あらすじを書くだけで、鬱々としてきます。 あまりにも善良で無知、人々の悪意を知らずに育ったジャンヌは、数々の試練を自ら切り拓くことなく、ただ周囲の流れに身を任せます。 結果悲劇的とも言える人生が待ち構えているわけなのですが、果たしてそれは彼女の怠惰に起因するものなのでしょうか。 筆者はそのよう因果関係を匂わせる文章を一切記述せず、起こった事実をありのまま精密に描写します。 つまり物語に教訓はなく、解釈は読者の方に委ねられていると捉えるべきでしょう。 冷徹なまでの写実的描写は、読んでいて映画を観ている錯覚を引き起こしました。
 ぐんぐん進む馬車に乗っていること、窓の外の物悲しい風景を眺めること、そして降りしきる雨にもかかわらず、自分は濡れない場所にいること。ジャンヌはそれだけで嬉しかった。
  モーパッサン『女の一生』光文社古典新訳文庫
 原題は“Une vie”。 どこにも「女の」とは書いておらず、「ある人生」と訳すのが適当そうです。 筆者がやりたかったことは、人生とはこういうものだということを普遍的に描くことだったのかもしれません。</description>
    </item>
    
    <item>
      <title>カメラを新調しました</title>
      <link>https://inody.github.io/posts/purchase-camera/</link>
      <pubDate>Mon, 08 Aug 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/purchase-camera/</guid>
      <description>昨年度留学していた時にカメラを盗まれて以来，ずっと再購入しようと思っていたのですが，就活や研究などで忙しく，買う機会を逃し続けていました． 先日友人と祇園祭を見て回った時に，ファインダーを覗く友人の姿が羨ましく思ったことが，再購入を決断したきっかけです．
購入に際しては，第一に値段，第二に軽さを重視することにしました． 値段については，学生ゆえに金銭的余裕がなく，どうせお金をかけるならレンズに投資したいからであり， 軽さについては言わずもがな，少しでもコンパクトなほうが持ち出す機会も自ずと増えるからです．
手元にはまだDA 35mmF2.8 Macro Limitedが残っていたので，引き続きK-マウントのボディだけ買うか，他のマウントに手をだすか迷ったのですが，数年間使い続けた愛着もあることから，前者を選ぶことにしました． 暗所でのAFの遅さとか，動体へのAFの遅さとか，あとライブビュー時のAFの遅さとか，他社と比べて何かと残念なPentaxの製品ですが，不器用なところがなんだか憎めないんですよね．
前述の基準に照らしあわせ，比較検討したところ，K-S1が自分にはあってそうだったので，早速マップカメラで購入． 色は盗まれたK-30と同じ白にしました． このカメラ，発売当初は謎のLEDライト機能が不評であんまり売れなかったようなのですが，使っている時は全然気になりませんし，設定で常時OFFにすることもできます． ダイヤルの数は1つですが，K-30のころも，そんなに頻繁に2ダイヤルを同時に操作することがなかったので，これも問題ありませんでした． 重量も約500gと，同社製品の中では最軽量で，鞄に忍ばせるのに躊躇を感じさせません（ただし，軽いといえど某C社やN社は400g台の製品をいくつも揃えており，P社にももう少し頑張ってほしいと感じてしまいます…）． あと，地味にGUI周りのフォントやアニメーションが改善されているところが新鮮で好印象でした．
先週末は早速DA 35mmF2.8 Macro Limitedをつけて京都の街にスナップ撮影に出掛けました． 以前便利ズームを持っていた頃は，単焦点レンズの出番は少なかったのですが，盗まれたことで使わざるを得ない状況になり，自分で足を動かして撮る楽しさを再認識しました． 手持ちのレンズを単焦点のみで構成するのも楽しそうです． またいい写真が取れたら，このブログにもupしたいと思います．</description>
    </item>
    
    <item>
      <title>就活が終わりました</title>
      <link>https://inody.github.io/posts/finish-job-hunting/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/finish-job-hunting/</guid>
      <description>先日、日本での就職活動を終えました。 今年は例年と異なるスケジュールで、僕の帰国が遅れたこともあり、うまくいくか不安もあったのですが、売り手市場の後押しもあってか、最終的に幾つかの企業から内定を頂くことができました。 その中で一社を選択する際、勤務地や待遇などで一時期迷ったのですが、結局最後は「研究職としてのキャリアが積めそうか」に的を絞ることで、納得のいく選択ができたと思います。 進路先は、メーカーから独立した研究機関なので、とにかく何かしらの研究活動ができるであろうことや、企業の研究部門とは違い、目先の営利から少し離れた萌芽的な研究もできそうなことなどが魅力でした。
こちらの記事に書いた通り、ベルギーの企業からも魅力的なオファーを頂いているので、もしかすると春までに心変わりする可能性もゼロではありません。 しかしながら、帰国後2か月経って思うことは、自分が日本を以前にも増して好きだということです。 確かに日本の労働環境は、お世辞にも優れているとは言えないでしょう。 ただそれを補って余りある、日本語と、日本人と、日本の文化への愛着を感じる自分がいます。 極論、自分がどこで死にたいかを考えたとき、日本がいいと思えるのです。
終身雇用制が崩れた現代においても、ファーストキャリアの選択は重要だと思われます。 有難いことに、ベルギーの企業からは返事までにまだ時間を頂いているので、それまで進路のことは頭の片隅で意識しながら、卒業研究に力を入れたいと思います。</description>
    </item>
    
    <item>
      <title>WindowsにHaskellをインストール時にcabalが動作しない時の対処法</title>
      <link>https://inody.github.io/posts/windows-cabal/</link>
      <pubDate>Tue, 24 May 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/windows-cabal/</guid>
      <description>新しいWindowsマシンにHaskell環境を整えていたとき、
cabal update  時に、
cabal.exe: Codec.Compression.Zlib: premature end of compressed stream  と表示され、アップデートが進まない現象に遭遇しました。 しばらく四苦八苦していたのですが、ググったらこちらのページに遭遇。
どうやらパスの通ったディレクトリにcabal.exeをおけばよいらしく、
C:\Program Files\Haskell Platform\7.10.3\lib\extralibs\bin  にあったcabal.exeを
C:\Program Files\Haskell Platform\7.10.3\bin  にコピーしたらあっさり解決しました。</description>
    </item>
    
    <item>
      <title>帰国報告</title>
      <link>https://inody.github.io/posts/return-japan/</link>
      <pubDate>Thu, 07 Apr 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/return-japan/</guid>
      <description>先日無事日本に帰国しました。 帰国の前日にベルギーの空港でテロがあり、帰国便がキャンセルになってしまいましたが、不幸中の幸いというべきか、パリからの便に空きがあったため、フライトを変更してもらい、無事に帰国することができました。 一昨日に復学の手続きを終え、さっそく残る一年の修士課程に取り組み始めています。 研究活動に加え、就職活動も並行しておこなっているため、しばらくはまた忙しくなりそうです。 元同期がつぎつぎと社会に羽ばたいていく中、アラサーとなった自分が未だ大学に残っている事実に少し焦りを感じなくもありませんが、あまり深刻に捉えず、今年も自分らしい道を歩んでいきたいと思います。</description>
    </item>
    
    <item>
      <title>（続）ベルギーでの企業研修を終えました</title>
      <link>https://inody.github.io/posts/finish-belgium2/</link>
      <pubDate>Mon, 21 Mar 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/finish-belgium2/</guid>
      <description>前回の記事では、ベルギーでの企業研修を終えたこと、今後は日本企業に就職していずれは社会人博士を目指したいことをお話ししました。 しかしながら、企業研修を終える間際、上司に以下のことを言われたのです。
「もし君が望むなら、卒業後うちに来てPhDやらないか」
青天の霹靂とはこのことです。 前回お話しした通り、僕の部署では、大学と会社の両方に籍をおき、それぞれから奨学金と給料をもらいながら、PhDの取得を目指している方が何人もおられます。 提携先の大学は、地元のKU Leuvenであったり、イギリスのBristol Universityであったりと様々です。 うちの部署の上司は、そうした産学連携研究のパートナーを見つけるのが得意だそうで、僕が望めばどこかしらの大学の研究室に在籍させてもらい、さらに生活に必要な奨学金も整えてくれるとおっしゃってくれました。
この提案は、僕にとってこれ以上ないくらい魅力的なものです。 なぜならば、前回書いた、博士課程へ進学することのデメリット
 最低3年をかけて学ぶ時間的リスクに対して、将来得られるリターンが少ない。 学費を支払う金銭的余裕がない。 研究自体を目的化したくない。  のうち、少なくとも2と3が解決しそうに思われるからです。
2は、会社からの給料と大学の奨学金によって解決しそうです。 それだけなく、日本には民間機関で海外博士に挑戦する人に奨学金を支給する団体が幾つかあり、それらを組み合わせれば、自活どころか、両親への資金援助も可能かもしれません。 さらに、こちらのサイトに記載されている通り、ヨーロッパの大学の授業料は日本と比べて安値な傾向にあるようです。
3は、単純にこの8か月の研修内容を考えると、大学での研究より応用的な研究ができそうだという予感に起因します。 「航空機を制御する」という明確な問題ありきの研究においては、方針も自ずと明確になり、研究のための研究という事態は避けられそうです。
となると、残るは1です。 ここでは「リスク」と「リターン」をどう捉えるかが問題であり、その点でとても悩んでいます。 まず、リターンですが
 将来博士の学位を持つことは研究者として自分のキャリアアップになる 海外での正規の労働経験は、グローバルな人材としてのキャリアにつながる 単純に日本での博士取得に比べ金銭的費用が少なくて済む  などがあると思います。 次に、リスクについてですが
 ヨーロッパでの博士取得は4年。自分の場合30歳で博士を取得することになる 30歳になって日本に帰国して、年功序列の社会が自分のキャリアを評価してくれるか不明 4年を海外で過ごすことで感じる孤独感、漠然とした不安 婚期を逃しそう  などでしょうか。 特に4つめは瑣末に思われるかもしれませんが、僕には重要です。 なぜならば海外生活で得た一つの帰結として、自分は日本人と結婚したいというものがあるからです。 ここベルギーに住む日本人女性の数は多くなく、その中から結婚相手を探すことは難しそうです。 となると30歳になって帰国し婚活するしかないのでしょうが、おっさんになった自分と相思相愛の関係になる女性に出会える保証はどこにもありません。 またこれは3つめにも繋がるのですが、大切な人に支えてもらわないと、海外生活を乗り切れる自信がありません（甘いことを言っている自覚はあります）。
2つめについてですが、そもそも日本に帰国するのか、という問題があります。 一般に、日本の労働環境はお世辞にも良いとはいえず、文化の壁を克服し、現地に順応さえできれば、将来的にも欧州で生活していくことも、一つのプランとして考えられそうです（これも結婚相手を見つけられた場合）。 また、こちらでは年功序列の文化がほとんどないので、博士習得にかかる時間的リスクも自ずと減ります。
さて、長々と書き綴りましたが、結局どうするかはまだ決まっていません。 幸い上司には、修士を終える数ヶ月前に連絡をするよう言われており、悩むにはまだ時間がありそうです（ただし、日本の民間奨学金の締め切りが8月に来るので、こちらがボトルネックになりそう）。 それまで、日本での就活を通じて、研究職としてのキャリアを探りながら、いずれ決断したいと思います。</description>
    </item>
    
    <item>
      <title>ベルギーでの企業研修を終えました</title>
      <link>https://inody.github.io/posts/finish-belgium/</link>
      <pubDate>Sun, 20 Mar 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/finish-belgium/</guid>
      <description>昨年の8月から、ベルギーのSiemens Industry Software NVという会社でインターン生として働いていたのですが、今日が研修最終日でした。 最終プレゼンも無事に終わり、いよいよ一年間の海外生活も幕を閉じつつあります。
一年間を通じて、英語を用いた交流経験、エンジニアとしての労働経験、異文化の体験など、日本では決して得られなかった経験ができて、本当によかったと思います。 以下では、得られたこと、これからのことを簡単にまとめたいと思います。
はじめ4か月のアイルランドでの語学研修は、文字通り初めての海外生活でした。 それまで英語で人と会話することがほとんどなかったこともあり、はじめは戸惑い、まともに挨拶もできない状態でした。 しかしながら、時が経つにつれ、これまで学校で学んできた文法や単語の知識が、会話においても十分役立つことがわかり、少なくとも英語での交流を恐れる気持ちは払拭出来ました。
語学学校での授業は、語学力を底上げする大きな助けになりました。 特に、会話における表現とその使いどころについての知識は、その後の企業研修でも大いに役立ちました。
ある程度滞り無く会話ができるようになってからは、各国から来た留学生と、授業後にカフェやレストランに行き、それぞれの国の文化や産業、宗教などについて話すようになりました。 会話の中で驚いたのが、日本という国が、とりわけ産業面において世界に大きな影響を与えており、そのことが広く認知されていたことです。 たとえば、滞在中出会ったほとんどの人が、日本の車や電機メーカーのことを知っていましたし、私が日本で工学を勉強していると話すと、皆口を揃えて、将来はお金持ちになるんだねと言いました。
また、日本が他国と比べてどのような特徴をもっているか、客観視することができたのも、有意義な経験でした。 我が国の外国人比率はおよそ2%であり、世界の中でもとても低い順位です。 互いに文化や宗教の異なる人々がともに摩擦なく過ごしていくには、互いを理解し尊重しようとする努力が欠かせないことを知りました。
つぎに、8月からの企業研修では、航空機の制御シミュレーションに関わるR&amp;amp;Dをおこないました。 私の専門は制御工学であるため、制御に関することはある程度知っていたのですが、航空機そのものについてはほとんど何も知らなかったため、企業研修は、航空力学を一から勉強することから始まりました。 参考文献を読むにあたっては、同じオフィスで働く航空力学を専攻するPh.Dの学生の方達に大いに助けていただきました。 休憩時間などには、研究者として少し先のキャリアを歩む彼らに、進路の相談にも乗ってもらうこともありました。
分厚い教科書や参考文献を一ヶ月近くかけて読み終えた私は、つぎに制御シミュレーションに取り掛かりました。 そこで「航空機のモデルの作成」「制御目標の設定」「制御器の設計」「シミュレーション」というモデルベースドデザインの基本となる一連の過程を経験することができました。 この段階においても、私がすでに持っていた制御についての知識以上のものを習得する機会が多々あり、技術を企業ではどのように展開していくのかということも間近で拝見することができました。
研修期間は、ベルギーと日本の働き方の違いを実感し続けた8か月間でもありました。 ベルギーにおけるライフワークバランスはとりわけ優れていると感じます。 私のオフィスでは、残業することは本人に時間内に業務を完遂するする能力がないことと同等とみなされており、社員は滅多に残業することはありません。 また、日曜にどのお店も空いてないのは、はじめ不便に感じましたが、国民が各々の生活を大事にする上では合理的な習慣であると理解しました。
私は将来研究者として働きたいと考えているため、会社を挙げてPh.Dの取得が奨励されていることも、魅力に映りました。 私のオフィスでは、会社と大学の両方から給料を受給しながら博士課程に取り組む社員が少なからずいました。 このような仕組みは、今後あらゆる産業に高度な付加価値や生産の効率化が求められる中、産学連携での研究を活発にする上で、有効な仕組みであると感じます。 日本の博士の称号は「足の裏の米粒」と言われ、技術者として働く上では通常重要視されないこと、取得においては安くない学費を払う必要があることと、対照的に思えました。
さて、帰国後の進路についてですが、正直とても悩んでいます。 本来は、「日本での就活を通じて研究職としての働ける企業を模索し、修了後は働きながらお金を貯め、いずれは社会人博士」といった道を考えていました（過去形である理由は後述）。 まず、ストレートに博士進学を目指さない理由は以下によるものです。
 最低3年をかけて学ぶ時間的コストに対して、将来得られるリターンが少ないと感じる。 学費を支払う金銭的余裕がない。 研究自体を目的化したくない。  1について。 上でも触れた、欧州での博士重視の風潮は、裏返せば修士では研究職に就くのが難しいことを意味します。一方日本では、研究職として働く上で、修士卒であることのディスアドバンテージはそこまで大きくないのかな、と感じます。 また、就職すれば、働く中で研究職に対する自分の適性がよりはっきりし、キャリアを再考することもできそうなのに対し、博士に進学してしまったら、退路が立たれてしまいそうなことも、懸念事項です。
2について。 今でも学費と生活費の全てを貯金と奨学金で賄う自転車操業状態であり、これを後3年続けるのは、金銭的にのみならず、精神的に相当不健康です。 両親からは、大学入学以降早々に仕送りを打ち切られ、逆に早く働いて家に金を入れるよう日々プレッシャーをかけられており、援助なんてとても期待できません。 学振などの諸制度にパスできれば、この問題は解決できるかもしれませんが、やはり働いたほうが手っ取り早くお金を稼げます。
3について。 研究室では、研究のための研究がおこなわれていることがあります。 特に僕が取り組んでいた研究テーマは、学術的に面白くはあるのですが、実際社会で使えるかと聞かれれば、首を傾げざるをえません。 企業でおこなわれる、問題解決を目的とした実践的な研究のほうが、自分には合っているというのが、ベルギーでの企業研修で得られた教訓の一つです。
さて、このような理由で、先に述べた「就職後社会人博士」の像が徐々に形作られていたわけなのですが、この度の企業研修を終えた際に、上司からあるお話をいただきました。
それは、「うちでPh.Dをやらないか」というものです。
長くなってきたので、続きは次回。</description>
    </item>
    
    <item>
      <title>ジャレド・ダイアモンド著の『銃・病原菌・鉄』を読みました</title>
      <link>https://inody.github.io/posts/read-jaredo/</link>
      <pubDate>Mon, 07 Mar 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/read-jaredo/</guid>
      <description>大作と呼ばれる本作品、昨年末から積ん読していたのですが、この度の旅行のお供にした結果、ようやく読了に至る運びとなりました。
著者の主張は一貫して明らかで、「地球上の文明の進歩に差がついたのは、地理的・生態的な要因によるものだ」というものです。 例えば、「ユーラシア大陸がアメリカ大陸を侵略して、逆ではなかったのはなぜか」という問いに対する究極の答えは、「ユーラシア大陸の方が多様な動植物が住んでおり、かつ東西に長い形をしていたから」と述べられています。
順番としてはこうです。 ある土地に多様な動植物が分布しているとします。 すると、これら動植物を狩猟して、ヒトは増えることができます。 つぎに、ヒトはそれらの動植物を栽培・家畜化しようと考えます。 たくさんの動植物がいると、その中で栽培・家畜化可能な動植物が存在する確率は上がります。 栽培・家畜化が成功すると、人々の分業が進みます。 分業により人々の暇な時間が増えることで、さらなる栽培・家畜化のみならず、武器や移動手段などの発明が進みます。 ここで、文化や発明などは、南北方向より、東西方向に広がりやすいことが知られています。 東西方向の方が、気候や植生などの環境が似通っているからです。 大陸が東西に長いと、文化や発明の交流が活発に進みます。 逆に、南北方向に長いと、砂漠などの異なる気候がヒトの移動を阻み、交流が起きづらくなります。
ユーラシア大陸には多様な動植物が住んでおり、かつ東西に長い形をしていました。 南北アメリカ大陸はユーラシアほどの動植物が住んでおらず、大陸の形も南北に延びていました。 結果、ユーラシア大陸がアメリカ大陸を侵略する歴史になったわけです。
本書の主張はこのように単純明快で、概要は序章と終章を読むだけで事足ります。 では、間の全19章には何が書かれているのでしょうか。 著者は、上で述べたような問いをその都度立てて、それに対する答えを膨大なデータとともに考察しているのです。 例えば「同じユーラシア大陸の中で、ヨーロッパの国々と中国を比べたとき、ヨーロッパが先進国となり、逆にならなかったのはなぜか」などです。 回答は是非本書を読んでお確かめください。
全体を通して、歴史という一回性の出来事に対して、定量的な評価を行うことで、科学として扱おうとする、作者の歴史科学者としての信念が見て取れました。 個人的には、フォンノイマンが経済現象を数式を用いて定式化することで、ゲーム理論という新たな枠組みを提唱したことと似たものを感じました。
さて、これで積ん読は全て消化したため、つぎは何を読もうか、とても悩ましいです。</description>
    </item>
    
    <item>
      <title>複数の専門をもつことの重要性</title>
      <link>https://inody.github.io/posts/multi-major/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/multi-major/</guid>
      <description>技術者として生きていく上で、複数の専門をもつというのは、重要な戦略になることを最近実感している。
例えば、僕の専門は制御工学であり、学部・大学院とともに、紙とペンを用いて理論寄りのテーマを研究してきた。 研究を通じて統計学や最適化、授業を通じて機械工学や電気・電子工学などを幅広く学んではきたが、それでも「専門」として答えられる分野は制御くらいしかない。
翻って今の上司を見てみると、航空工学と統計学のダブルディグリーで修士号を取得後、博士では航空機に対する状態推定と制御に関する研究をしている。 さらにソフトウェアの開発にも精通していて、趣味としてモバイルアプリの開発もおこなうという多才ぶりだ。
「ある分野で10人に1人の人材である人が、別の分野でも10人に1人の人材であるならば、両分野に関連する領域では100人に1人の逸材であることを意味する」という推論は、キャリアを考える上で重要な考え方のように思われる。
ここで大事なのは、やたら何にでも手を出すのではなく、相性のよい分野を選択しリソースを割くことだろう。 さもなくば、分野同士の共通領域がなくなってしまい、活躍できるフィールドも限られてしまうからだ。
また、あまりにありがちな組み合わせを選択するのも、よい戦略とは言えない。 なぜならば、上記の推論は、両分野に属する人材が独立に分布しているという仮定にもとづいているからだ。 例えば機械と電気は切っても切れない関係にあり、その両方を学ぶ人は多いだろう。 そのため、両分野それぞれで10人に1人の人材になれたとしても、それらをまたがる領域で100人に1人の人材になれるとは限らない。
互いに重複する分野のなかでも、少し意外性があるが実は相性がよい、そういった領域を選択するのがいい。
現代のものづくりの傾向を考えてみると、大規模で高度なシステムほど、コストやリスク削減のために、ソフトウェアによるモデルベースでの開発が重要になってきている。 このため、技術者志望の僕にとって、プログラミングやデータベース管理などに精通しておくことは、アドバンテージになるだろう。 しかしこれは意外でも何でもない。
中央大学の竹内先生が仰るとおり、これからの理系の研究者に必要なのは文系力であるということを鑑みれば、経営やマネジメントを学ぶのも意義深いだろう。
「専門」というテーマからは少し離れるが、語学は絶対に身につけたほうがいい。 世界的に技術者は不足しており、使える言語が増えるほど、働く領域が増えるのは言うまでもないからだ。 実際僕自身、ヨーロッパに来てからというもの、どうしてもっと早く英語を勉強して来なかったのかと毎日のように後悔している。 しかしながら、ポジティブに考えれば「日本語ができる技術者」というのは世界的にも稀だという見方ができ、これが現在僕が日本で働くことを希望する理由の一つになっている。
さて、ここ数日考えたことを適当に書き散らした。 いずれにせよ、終身雇用制度が崩れ、スキル無くして生き残るのは難しい今、リストラに怯えるような毎日を送らないためにも、自主的に勉強する習慣は常に身につけておきたい。</description>
    </item>
    
    <item>
      <title>Markdownを使って論文っぽい文章を書く</title>
      <link>https://inody.github.io/posts/markdown-paper-writing/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/markdown-paper-writing/</guid>
      <description>概要 インターン先で進捗をレポートにまとめるよう言われたので、この機会を利用して、Markdownで全部書いてみようと思い至りました。 Markdownはとても便利な記法ですが、引用や相互参照については少し手が届かないところがあります。 そこで今回、pandocとその拡張ツールであるpandoc-citeproc及びpandoc-cross-refを用いて、論文（っぽく見える文章）をMarkdownで書く環境を整えてみました。 あわよくば修論をこれで書きたい。
僕の環境  OS X El Capitan MacTeX 2015  cabalのインストール 今回使うツールであるpandocをインストールするために、cabalを導入します。 cabalとはHaskellのライブラリ管理ツールです（Pythonでいうpipみたいなもの）。 cabalはbrewからインストール可能です。
brew install cabal  ついで
cabal update  で最新の状態にアップデートします。 またこのままでは、cabalで管理するパッケージをターミナルが認識できないので、パスを追加します。 .bash_profileに
export PATH=&amp;quot;/Users/user_name/.cabal/bin:$PATH&amp;quot;  を追加します。
ちなみにホームディレクトリに.bash_profileがあるかは
ls -la  コマンドで確認できます。なかった場合は
touch .bash_profile  で作成してください。
pandocのインストール つぎに、今回の主役であるpandocをインストールします。
cabal install pandoc  その後 which pandoc でパスが表示されれば成功です。 これでひとまず
pandoc main.md -o main.pdf  とすることでpdf出力できます。
pandoc-citeprocのインストール このままでもそれっぽいレポートが書けるのですが、参考文献に.bibファイルを使えるとさらに便利になるので、そのための環境を整えます。
cabal install pandoc-citeproc  とタイプし、pandoc-citeprocという環境を用意します。 念のためここでもwhich pandoc-citeproc でパスを確認しときましょう。
pandoc-citeprocの使い方を説明します。 いつも使っている.</description>
    </item>
    
    <item>
      <title>LQG/LTR制御を学んだ</title>
      <link>https://inody.github.io/posts/lqg-ltr/</link>
      <pubDate>Fri, 04 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/lqg-ltr/</guid>
      <description>LQG/LTR (Linear Quadratic Gaussian / Loop Transfer Recovery) とは LQGとは、カルマンフィルタを用いて推定した状態に対して、最適レギュレータを用いて状態フィードバックをおこなう、よく知られた制御法です。 LQGが時間領域での制御器設計であるのに対して、周波数領域での設計も考慮するのが、LQG/LTRです。 今回はStein G and Micheal A. The LQG/LTR procedure for multivariable feedback control designを参考にしました。
問題設定 今、制御対象が伝達関数行列$G(s)$としてモデリングされているとします。 ここで、制御対象は非最小位相系であり、同数の入出力をもつとします。
我々の目標は制御対象の出力$y$と参照入力$r$との偏差$e:=r-y$を受け取り、制御入力$u$を生成する制御器$K(s)$を実装することです。 ここで、制御器$K(s)$は以下の要求を満たすことを求められます。
 安定化：$G(s)$を安定化する（有界な外乱$d$、参照入力$r$に対して、$y$が有界となる） 良い制御性能：$e$をできるだけ小さくする ロバスト安定化：$G_A(s)$を安定化する（後述）  1だけを達成するための方法はたくさんあるので、本記事では触れません。
2を達成するためには、外乱$d$や参照入力$r$が大きな値を持つ周波数領域で、感度関数 $$ S(s) = (I+G(s)K(s))^{-1} $$ を小さくすることが求められます。 ここでいう&amp;quot;小さい&amp;quot;とは、伝達関数の最大特異値$\sigma_{max}(S(j\omega))$が小さいという意味です。
3について説明します。 一般に、制御対象を完全にモデリングするのは不可能であり、何らかの不確かさを含むと考えるのが自然です。 これは例えば、真のモデルを$G_A(s)$とすると $$ G_A(s) = (I+L(s))G(s) $$ と表すことができます。 ここで、$L(s)$は乗法的不確かさを表す伝達関数行列であり、既知の$m(\omega)$と任意の$\omega$に対して $$ \sigma_{max}(L(j\omega)) &amp;lt; m(\omega) $$ なる関係が成り立つとします。 ここで、簡単な計算から、相補感度関数 $$ T(s) = G(s)K(s)(I+G(s)K(s))^{-1} $$ が任意の$\omega$に対して $$ \sigma_{max}(T(j\omega)) \le \frac{1}{m(\omega)} $$ を満たすことが、$G_A(s)$の安定性の必要十分条件として導出できます。</description>
    </item>
    
    <item>
      <title>ボストンキャリアフォーラムに参加してきました</title>
      <link>https://inody.github.io/posts/boston/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/boston/</guid>
      <description>得られたもの ボストンキャリアフォーラム（以下BCF）に参加してきました。 自分は17年度卒なので、就活には少し早いのですが、今年は経団連の指示で採用活動が早まるのと、帰ってから就活に時間を奪われるのが嫌で、あらかじめ選考を進められたらという思いもあっての参加です。
結論から言うと、やはり経団連のパワーのせいか「内定」とはっきりと言ってくれる会社はありませんでした。 しかしながら、ESを提出したのはおよそ10社のうち、4社から「合格」とメールで通知後、内定者の方々が参加するディナーへのお誘いをいただくことができました。 中には「いつまでなら返事をしてくれるか」とオワハラっぽいことをしてきた企業もありました。 今振り返ると、調子のいい言葉や美味しいご飯を使って、学生を確保しておきたい企業の意図を感じないでもないのですが、そのあたりは性善説で解釈したいと思います。
また、およそ1か月前から少しずつ準備をする中で、基本的な自己分析や業界研究を大分進めることができました。 おかげで帰国後の就活がスムーズに進みそうなのは、嬉しい副作用です。
雑感 実は今回が初のアメリカ訪問でした。 初めてヨーロッパに来た時は、町並みなど日本と全く違うことに衝撃を受けたものですが、今回あまり驚きがなかったのは、旅に慣れてきてしまったせいかもしれません。 ボストンは古い都市だと聞きますが、欧州の都市と比べると、むしろ日本の近代的な町並みに近いものを感じました。
また、BCF中に主にアメリカの大学で勉強している人たちと出会う機会があり、印象に残りました。 高校までインターナショナルスクールに通った後、正規留学してきた方や、僕と同じ制御系の研究をしている方で、修士課程を飛び級して博士課程に在籍している方など、日本にいたらまず出会えないような人たちとお話しすることができました。 すぐに人の影響を受ける僕は、どうして海外の大学に進学しなかったんだろうと少し後悔してしまいました。
さらに、空いた日には、MITやハーバード大学、ボストン美術館などを訪れることができ、全体として満足できる休暇になりました。
来年参加する方にアドバイス 奨学金の申請について 競争率は高そうです。 早い者勝ちなところがあるそうなので、申請開始日にちゃっちゃとしちゃいましょう。 また、以前別のキャリアフォーラムで受給している人には、支給されないようになっているそうなので、アカウントを作り直すなどの対策を打つといいかもしれません。 僕は申請が遅れたうえ、前回のロンドンキャリアフォーラムで受給していたのもあり、当然今回は受給できませんでした。
ホテルについて ネットで検索すると、ホテルは高いので早めに予約と書いてあるのですが、Airbnbなどを用いれば直前でも一泊4000円弱で予約できました。 予算を抑えたい方にはオススメです。</description>
    </item>
    
    <item>
      <title>最適制御3</title>
      <link>https://inody.github.io/posts/optimal-control3/</link>
      <pubDate>Sun, 08 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/optimal-control3/</guid>
      <description>概要 前回はいわゆるフィードフォワードの最適制御について考えた。 すなわち、ある初期時刻$t_0$と初期状態$x(t_0)$が一つ与えられたときに、終端時刻$t_f$までに加える最適入力$u(t)$を求めようとした。 そして、最適な$u(t)$を求めるためには、オイラー・ラグランジュ方程式という微分方程式を解かなくてはならないことが示された。 このアプローチでは、初期状態$x(t_0)$が少しでも変化すると、オイラー・ラグランジュ方程式を新たに解き直す必要があり、とても時間が掛かる。
そこでここからは、フィードバックの最適制御について考える。 すなわち、任意の時刻$t$と状態$x(t)$が与えられたときに、終端時刻までに加える最適制御$u(x,t)$を求めたいのである。
問題 連続時間の非線形ダイナミクス $$\dot x = f(x,u,t)$$ にしたがうシステムに対して、状態フィードバック$u=u(x,t)$を設計することで、評価関数 $$J = \phi(x(t_f),t_f) + \int_{t}^{t_f}L(x(\tau),u(\tau),t)d\tau$$ を最小化したい。 ここで初期値$x,t$は任意であるとする。
必要条件 $J$を最小化する$u$が満たすべき方程式としてハミルトン・ヤコビ・ベルマン方程式 (HJB equation : Hamilton-Jacobi-Belman equation)が知られている。 これはハミルトニアン $$ H(x,\lambda,u,t):=L(x,u,t)+\lambda^t_f f(x,u,t) $$ 及び値関数 $$ J^o(x,t) = \min_u J $$ に対して $$ \frac{\partial J^o}{\partial t} + \min_u H\left(x,\frac{\partial J^o}{\partial x},u,t \right) = 0 $$ として記述される。 この偏微分方程式の境界条件は $$ J^o(x(t_f),t_f) = \phi(x(t_f),t_f) $$ である。
導出 値関数$J^o$は、「時刻$t$と、その時点で与えられたシステムの状態$x$に対して、その時刻以降$t_f$までに最適な入力を加えることにより最小化されたときのコスト」を表す。 ベルマンの最適性の原理により微小時刻$\Delta t$に対して $$ J^o(x(t),t) = \min_u\left{ J^o(x(t+\Delta t), t+\Delta t) + \int_t^{t+\Delta t} L(x(\tau),u(\tau),\tau)d\tau \right} $$ が成り立つ。 この式が意味するところは、「時刻$t$から$t_f$までに最適な入力を求める」のと、「時刻$t+\Delta t$から$t_f$までに最適な入力がすでに求まっているときに、時刻$t$から$t+\Delta t$までの最適な入力を求める」のは一緒、ということ。 $J^o(x(t+\Delta t),t+\Delta t)$をテーラー展開すると $$ J^o(x(t+\Delta t),t+\Delta t) = J^o(x(t),t) + \left{ \frac{\partial J^o}{\partial x}f(x,u,t) + \frac{\partial J^o}{\partial t} \right}\Delta t + O(\Delta t^2) $$ これを代入すると $$ J^o(x(t),t) = \min_u\left{ J^o(x(t),t) + \left{ \frac{\partial J^o}{\partial x}f(x,u,t) + \frac{\partial J^o}{\partial t} \right}\Delta t + \int_t^{t+\Delta t} L(x(\tau),u(\tau),\tau)d\tau + O(\Delta t^2) \right} $$ $J^o$及び$\frac{\partial J^o}{\partial t}$は$u$に陽に依存しないため、括り出して$\Delta t\rightarrow 0$とすると $$ \frac{\partial J^o}{\partial t} + \min_u\left{ L(x,u,t) + \frac{\partial J^o}{\partial x}f(x,u,t) \right} $$ が得られる。 残りはハミルトニアン及びラグランジュ乗数の定義を用いて終了。</description>
    </item>
    
    <item>
      <title>最適制御2</title>
      <link>https://inody.github.io/posts/optimal-control2/</link>
      <pubDate>Fri, 06 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/optimal-control2/</guid>
      <description>概要 今回からダイナミクスを持つシステムへの最適制御を考える。 考え方は前回の場合とそれほど変わらず、ダイナミクスを制約条件として考えると、必要条件として、二点の境界条件をもつ微分方程式が導出される。 今回はその導出と、問題を解くための数値計算法を紹介する。 教科書は引き続きE. Brysdn, Jr. Yu-Chi Ho, &amp;ldquo;Applied Optimal Control&amp;rdquo;, CRC Press, 1975を用いる。
離散時間システムの場合 問題 非線形の差分方程式で表されるつぎのシステムを考える。 $$ x(i+1) = f(x(i),u(i)), \quad x(0):\text{given}, \quad i = 0,\cdots,N-1. \tag{2.2.1} $$ ただし、$x(i)\in R^n$は状態ベクトル、$u(i)\in R^m$は入力ベクトルである。
以下の評価関数 $$J = \phi(x(N)) + \sum_{i=0}^{N-1}L(x(i),u(i))$$ を最小化する$u$を求めたい。
必要条件の導出 $(2.2.1)$は等式制約条件として捉えられる。 そのため、ラグランジュ乗数$\lambda(i)$を用いて $$\bar J := \phi(x(N)) + \sum_{i=0}^{N-1}\left[ L(x(i),u(i)) + \lambda^T(i+1){f(x(i),u(i)) - x(i+1)} \right] \tag{2.2.3}$$ を考える。 ハミルトニアン $$H^i := L(x(i),u(i)) + \lambda^T(i+1)f(x(i),u(i))$$ を定義すると、$(2.2.3)$は $$\bar J = \phi(x(N)) -\lambda^T(N)x(N) + \sum_{i=1}^{N-1}\left[ H^i - \lambda^T(i)x(i) \right] +H^0$$ と書き換えられる。</description>
    </item>
    
    <item>
      <title>kivyを用いたマルチプラットフォームアプリの開発環境を整える</title>
      <link>https://inody.github.io/posts/kivy/</link>
      <pubDate>Wed, 04 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/kivy/</guid>
      <description>kivyとは PythonのNUI(Natural User Interface)でのマルチタッチアプリケーション開発のためのオープンソースライブラリ。 一つのソースコードからAndroid、iOS、Linux、MacOSX、Windowsへと出力できるうえ、ライセンスフリーで使用できる。
今回はそんなkivyの本体と、OSX及びiOSへのパッケージング環境の導入に挑戦したが、情報が少なく結構苦労したので、メモしておく。
自分の環境  MacOSX 10.11 Yosemite Xcode 7.1 homebrew, pip導入済み  kivyのインストール この辺を参考にしてインストールした。
まず、kivyの導入に必要なcythonとpygameをインストールする。
*11月3日23:25追記：下記のkivy-iosと最新のcythonの相性が悪いため、バージョン0.21をインストールする必要があることがわかった。
pip install cython==0.21 pip install pygame  その後本体をインストールするのだが、最も好ましいと思われるpipを用いた方法はうまくいかず。 仕方ないので、brew caskを用いてインストール。
brew cask install kivy  もしくはgitから直接
git clone http://github.com/kivy/kivy make  でも良い。 上手くインストールされたか確かめるため、Hello Worldしてみよう。 適当なエディタでmain.pyを作成し
import kivy kivy.require(&#39;1.8.0&#39;) ## replace with your current kivy version ! from kivy.app import App from kivy.uix.label import Label class MyApp(App): def build(self): return Label(text=&#39;Hello world&#39;) if __name__ == &#39;__main__&#39;: MyApp().</description>
    </item>
    
    <item>
      <title>最適制御1</title>
      <link>https://inody.github.io/posts/optimal-control/</link>
      <pubDate>Sun, 25 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/optimal-control/</guid>
      <description>概要 非線形最適制御の勉強を始めた。 実は去年授業で単位は取得したのだけれど、ほとんど覚えていないも同然なので、はじめからやり直すことにする。 教科書はE. Brysdn, Jr. Yu-Chi Ho, &amp;ldquo;Applied Optimal Control&amp;rdquo;, CRC Press, 1975を用いた。 式番号は教科書に倣った。 今回はとりあえず、ダイナミクスなしの最適化問題について、ざっと復習する。
制約なし最小化問題 問題 決定変数$u=[u_1 \ \cdots \ u_m]^T\in R^m$を決めることで、評価関数 $$L(u):R^m\rightarrow R$$ を最小化したい。
必要条件 $L$が$C^2$級の関数であるとき、$u$が最小値であるのための必要条件は $$\frac{\partial L}{\partial u} = 0 \tag{1.1.3}$$ 及び $$\frac{\partial^2 L}{\partial u^2} \succeq 0$$ が成り立つことである。 $(1.1.3)$を満たす$u$を停留点という。
十分条件 $u$が局所最小であるための十分条件は$(1.1.3)$及び $$\frac{\partial^2 L}{\partial u^2} \succ 0$$ が成り立つことである。
数値計算法 勾配法 (gradient decent) 、ニュートン法 (newton method) を始め、様々な数値計算法が用いられる。
等式制約付き最小化問題 問題 決定変数$u\in R^m$を決めることで等式制約 $$ f(x,u)=0 \tag{1.2.2} $$ のもと、評価関数 $$L(x,u): R^n\times R^m\rightarrow R$$ を最小化したい。ここで$x=[x_1 \ \cdots \ x_n]^T\in R^n, \ f=[f_1 \ \cdots \ f_n]^T:R^n\times R^m\rightarrow R^n$とおいた。</description>
    </item>
    
    <item>
      <title>10月の雑記</title>
      <link>https://inody.github.io/posts/idea-october/</link>
      <pubDate>Sat, 24 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/idea-october/</guid>
      <description>自分には昔から何事においても、与えられた目標に対して最小限の努力でアプローチしようとする悪い癖がある。
この癖は多分、中高の陸上部時代に、きつい練習の中で少しずつ形成されはじめ、いつの間にか凝固してしまったものなんだと思う。
今まではそれでも誤魔化しながらなんとかやってきたのだけれど、今後大きなしっぺ返しを食らう予感もしていて、どうにか直したいと思っている。 そしてそのために「血反吐を吐くような努力をもってして、なお目標を達成できない」という経験は、失敗できる学生時代のうちに必要な経験だと感じていた（自分で書いていてマゾいと思う）。
けれども、そういう努力を要求される環境を積極的に自分で整えるほど、自分はマゾにはなれない。 そこで今回の海外生活に、そういう環境を期待していたのである。
さて、実際に飛び込んでみて、気づいたこと。
まず、これまでの自分の人生の側には、その都度適切な高さのハードルを置いてくれる先生のような役割の人がいて、その人たちのおかげで、今少し高いハードルを前にしても「これまでのように跳べば大丈夫」と思える自信がついてきている。
というのも、こっちに来てから毎日が、言語や文化の違いで戸惑うことばかりだけれど、それら一つ一つは今まで跳んできたハードルに比べれば、多分そんなに高くない。 悲観主義だと思っていた自分の性格が、経験のおかげで楽観主義に寄ってきていることに気づいた。
また、僕が海外生活に期待していたのは、今まで見たこともない巨大なハードルを次々に置かれるような過酷な環境だった。 けれども、現実は期待とは裏腹に、むしろそんなもの誰も置いてくれなかった。
インターンを始めた頃、簡単に感じられる課題と、何をしても褒めてくれる上司を前に、誇らしい気持ちになった。 けれどもすぐに、目標が誰かに与えられるだけの期間が終わり、自分で置いたハードルを自分で跳ぶことが要求されはじめていることに気づいた。
自分でハードルを置くというのは、自分が今できないことと向かい合うことと同義であり、実際やってみると結構きつい。 向かう方向や速度は正しいのか判断する、舵取りとしての技量も必要になり、そこに正解はない。
しかしやはり気持ちはポジティブだ。 きっとこの先、この舵取りとしての技量がもっと求められるようになってくるだろうし、そうなってほしいという期待がある。
まとめると、自分はこれまでまあまあ上手くやってきたし、これからもまだまだ未熟だという、ありきたりな結論に至る。
海外生活も残り5ヶ月。 学んで、考えて、身につけて帰ろう。</description>
    </item>
    
    <item>
      <title>線形適応制御入門</title>
      <link>https://inody.github.io/posts/adaptive-control/</link>
      <pubDate>Sat, 17 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/adaptive-control/</guid>
      <description>概要 制御対象のパラメータを同定しながら制御する制御法。 通常の制御法と違い、制御則の他に、適応則というのを設計する。 今回は、モデル規範型適応制御 (MRAC : Model Refference Adaptive Control) と呼ばれる手法を紹介する。 詳しくはJ. E. Slotine, W. Li, &amp;ldquo;Applied Nonlinear Control&amp;rdquo;, 1991を参照。
問題 次のシステムを制御したいとする。
$$a_ny^{(n)} + a_{n-1}y^{(n-1)} + \cdots +a_0y = u$$
ここで、状態$y,\dot y\cdots,y^{(n-1)}$は可測であるが、係数${\bf a} = [a_n \ \cdots \ a_1 \ a_0]^T$は未知であるとする。つまり、このシステムは、一次系、二次系などの構造はわかっているけれど、パラメータに不確かさを含むシステムである。ここで、$a_n$の符号のみは既知とする。
我々の制御目的は、$y$を望ましい参照モデルの応答
$$\alpha_ny_m^{(n)} + \alpha_{n-1}y_m^{(n-1)} + \cdots +\alpha_0y_m = r$$
に追従させることである。
制御則の選択 $z$を以下で定義する。
$$z := y_m^{(n)} - \beta_{n-1}e^{(n-1)} - \cdots - \beta_0e$$
ここで、$\beta_1, \cdots, \beta_n$は、多項式$s^n+\beta_{n-1}s^{n-1} + \cdots + \beta_0$がフルビッツになるよう選ばれた、設計パラメータである。 また、$e:=y-y_m$は追従誤差である。</description>
    </item>
    
    <item>
      <title>スライディングモード制御入門</title>
      <link>https://inody.github.io/posts/sliding-mode-control/</link>
      <pubDate>Thu, 08 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/sliding-mode-control/</guid>
      <description>対象システムが構造的不確かさをもつ場合に有効なロバスト制御法。 今回はSISOシステムのみ取り上げるが、MIMOにも拡張可能。 詳しくはJ. E. Slotine, W. Li, &amp;ldquo;Applied Nonlinear Control&amp;rdquo;, 1991を参照。
仮定 次のシステムを制御したいとする。 $$x^{(n)} = f({\bf x}) + b({\bf x})u$$ ここで、${\bf x}=[x \ \dot x \cdots x^{(n-1)}]^T$は状態ベクトル, $u$はスカラーの入力である。 また、$f$は不確かさを含む関数であるとする。 具体的には、我々は推定値$\hat f$のみを知ることができるものとし、これらの関数はある既知の関数$F({\bf x})$に対して $$\left|\hat f-f\right|\le F$$ を満たすとする。$b$もまた $$0 &amp;lt; b_{min} \le b \le b_{max}$$ の不確かさを持つとし、我々が知ることのできる値は推定値 $$\hat b = (b_{min} b_{max})^{1/2}$$ のみであるとする。
問題 ${\bf x}$を望ましい状態${\bf x}_d=[x_d \ \dot x_d \cdots x^{(n-1)}_d]$に追従させる$u$を設計せよ。 ただし、望ましい状態${\bf x}_d$は${\bf x}_d(0) = {\bf x}(0)$を満たすとする (テクニカルな仮定。ここでは説明しない) 。
導出 まずは簡単なシステムで 簡単のため$b$についての不確かさを一旦無視して$b({\bf x}) = 1$とし、対象システムは簡単な二次系 $$\ddot x = f({\bf x}) + u$$ であるとする。 また、これ以後、$\tilde{\bf x} := {\bf x}-{\bf x}_d$と定義する。 もしある正数$\lambda$を設計したうえで、状態フィードバック $$u = -\hat f({\bf x}) + \ddot x_d - \lambda \dot{\tilde{x}}$$ を生成すると、閉ループ系は $$\ddot{\tilde{x}} = - \lambda \dot{\tilde{x}}$$ と計算でき、$\dot{\tilde{x}}\rightarrow 0$すなわち${\bf x}\rightarrow{\bf x}_d$を満たす。 ただし、この結果が成り立つのは、$f$が不確かさを含まない (すなわち$\hat f=f$が成り立つ) ときであり、推定値が真値と一致しない場合はこの限りでない。</description>
    </item>
    
    <item>
      <title>ベルギーで働いて感じたこと</title>
      <link>https://inody.github.io/posts/idea-belgium/</link>
      <pubDate>Fri, 25 Sep 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/idea-belgium/</guid>
      <description>ヨーロッパに来て半年になるので、つらつらと思うことを書き残しておく。
#研修内容について
今年度は、ヴルカヌス・プログラムという奨学金付きのインターンシッププログラムに参加しており、ベルギーにあるシーメンスのソフトウェア部門で航空機の制御に関わる仕事をしている。
航空機への制御を学ぶためには、航空機自体がどのような動特性を持っているかを知らなければならないが、僕にはその知識が全くなかったため、研修は航空力学を勉強することから始まった。
物理の知識がラグランジュ方程式くらいで止まっている僕にとって、航空力学の理論は難しく感じられ、これまでのところとてもじゃないが全てを理解したとは言いがたい。 先日edXでMITxから提供されている、Introduction to Aerodynamicsという講義を見つけたので、是非受講しようと思っている。
話がそれるが、最近こういったオンラインの講義を受講するのにハマっており、先日は機械学習の講義を受け終えた。 各講義のクオリティはとても高く、この先大学のもつ教育機関としての側面は、こうしたサービスの登場により変わっていくんじゃないかと思う。
それはさておき、まだ航空機についての知識は足りていないものの、最近はようやく制御シミュレーションに取り掛かり始めている。 当然だが制御工学は自分の専門であるので、以前にもまして興味をもって取り組むことができている。 僕がこれまで学び、実装したことのある制御法は、その殆どが基礎的な線形制御法に過ぎなかったため (僕の研究内容は解析がメインだったと言い訳をしておく) 、モデル追従制御や入出力線形化など、今まで詳しく知らなかった制御理論を学べたのは嬉しい誤算だった。
制御理論を航空機にどう実装するかについても、上司からいろいろと面白い話を聞けた。 例えば、高度や速度などの飛行状態によって動特性が変わる航空機では、平衡点も変わるため、制御のための線形化はその都度おこなう必要がある。 しかしながら、線形化のためには平衡点を求めなくてはならず、計算には時間がかかる。 このため、いくつかの航空機では、予め数百もの状態の組み合わせに対する線形化モデル、またはモデルに対する制御器のパラメータを計算して、メモリに格納しておき、それを呼び出し、補完しながら制御するのだそうだ。
実はゲインスケジュール制御は航空分野から生まれた制御法であるらしく、こうした背景があったことを考えれば納得できる。
#ベルギーについて
ここルーヴェンは、ベルギーで一番大きな大学街として知られる町だ。 にもかかわらず、深夜に開いているコンビニなどはなく、日曜はどこのお店も開いてない。 そのため、日本で暮らす感覚でいると、休みの日に食べるものがなくて詰む。 アイルランドでも同様の傾向は見られたが、向こうでは首都ダブリンに滞在していたためか、中心部は日曜も賑わっており、あまり不便しなかった。
はじめは暮らしにくい町だと感じたものだが、順応してきた今では、むしろ働く側に優しい仕組みなのかもしれないと思うに至っている。 実際、僕が働く会社では、仕事はどんなに遅くとも19:00で切り上げられるし、人々は日曜にピクニックやスポーツを思う存分楽しんでいるように見える。
不便さを受け入れることで享受できる暮らしのゆとりと、際限なく働くことで経済を循環させる資本主義の宿命。 世の中にはこうしたトレードオフが無数にあることに気づく。
ところで、シーメンスでは様々な国から来た人が働いており、僕のようなアジア人も少なからず見かける。 観測範囲ではイタリア人が最も多く、オランダ人、フランス人、中国人、インド人、日本人や韓国人、と続く。 ドイツ人を見かけないのは、おそらくだが、ドイツ人の労働環境はこちらより優れているのでわざわざ他国に出向く必要はないという理由によるのだろう。
彼らは皆、自国の人と話すときは自国語で、他国の人と話すときは英語でコミュニケーションをする。 語学学校の時と違い、彼らが全く言葉に詰まることなく、母国語のように英語を話す様には、はじめ驚いた。
また、町を歩いてみても、アジア人を多く見かけるし、僕のアパートには大学に通うためにスロベニアからやってきた学生が住んでいる。
周囲を他国に囲まれている地理的要因、EUの本部を首都に抱える政治的要因などが、こうした国際的な環境の形成を助けたのだろうか。
#今後について
正直、4月からここまであっという間だった。 良くも悪くも研究室とは違い、具体的な目標が課せられない毎日であり、自分で明確な目標をもつ必要性を日々感じている。 残り半年、無為に過ごして後悔の残らないよう、自戒しつつ過ごしていきたい。</description>
    </item>
    
    <item>
      <title>Xcodeアップデート時に起きるMatlabのMexのエラーを修正</title>
      <link>https://inody.github.io/posts/xcode-matlab/</link>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/xcode-matlab/</guid>
      <description>###概要 XCodeのバージョンを7にアップデートした際にMexがコンパイルエラーを吐くようになった。 こちらに解決法が載っていたので、そのまま紹介。
###自分の環境
 OSX Yosemite (10.10.5) Matlab R2014b  ###解決法 Matlabのコンソールで
edit ([matlabroot &amp;#39;/bin/maci64/mexopts/clang_maci64.xml&amp;#39;]) とタイプ。出力されたファイルの後半
&amp;lt;dirExists name=&amp;quot;$$/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk&amp;quot; /&amp;gt;  の次の行に
&amp;lt;dirExists name=&amp;quot;$$/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk&amp;quot; /&amp;gt; &amp;lt;dirExists name=&amp;quot;$$/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk&amp;quot; /&amp;gt;  を追加、また
&amp;lt;cmdReturns name=&amp;quot;find $$ -name MacOSX10.9.sdk&amp;quot; /&amp;gt;  の次の行に
&amp;lt;cmdReturns name=&amp;quot;find $$ -name MacOSX10.10.sdk&amp;quot; /&amp;gt; &amp;lt;cmdReturns name=&amp;quot;find $$ -name MacOSX10.11.sdk&amp;quot; /&amp;gt;  を追加 (それぞれ2箇所ある)。
これでMexでのコンパイルが復活する。 ただしこの方法は非公式なので、一応バックアップをとっておくのが吉。 自分はC++ (clang++_maci64.xml) 、gfortran (gfortran.xml) についても同様の変更を行った。</description>
    </item>
    
    <item>
      <title>京大情報学研究科システム科学専攻入試攻略</title>
      <link>https://inody.github.io/posts/kyoto-univ-exam/</link>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/kyoto-univ-exam/</guid>
      <description>概要 もう2年前のことになるが、当時大学院入試を控えていた僕は、いろいろ考えた末に京都大学の情報学研究科システム科学専攻を受験することに決めた。
そこで今日は自分がどのように入試に臨んだかを書き記しておく。
過去問 まずはなんといっても過去問。 システム科学専攻の公式HPに置いてある。 試験内容は
 基礎科目 (微積分・線形代数) 専門科目 (論理回路・機械力学・工業数学・基本ソフトウエア・電気電子回路・確率統計・制御工学・オペレーションズリサーチから2問選択)  からなる。 本番までに5年分は解いておきたいが、まずは雰囲気を掴むためにも1年分解いておくといい。
参考書 頭のいい人なら過去問だけでもなんとかなるのだろうけど、僕のような凡人は問題集を使って足りない頭を補強することにした。
基礎科目である数学は、専門科目に比べ難易度が高めなため、極めれば得点源になる。 自分は微積分と線形代数の勉強としてそれぞれ、演習大学院入試問題 &amp;lt;数学&amp;gt; Iの1章と2章を取り組んだ。
専門科目は制御工学と工業数学を選んだ (周りを見てもこの組み合わせが多かったように思う) 。
制御については フィードバック制御入門 (システム制御工学シリーズ)の各章の章末問題を解き、工業数学は 演習大学院入試問題〈数学〉IIの2章をやった。また、万が一の予備科目として論理回路を 論理回路の基礎で勉強した。
僕の場合、春休みまでに英語の試験を受け終え、4月から基礎にじっくり取り組み、専門は残り1ヶ月程度取り組んだ。
要領のいい人なら合計2ヶ月弱で終えられると思う。
また自分で言うのも何だが、ここでセレクトした参考書には少し自信がある。 基礎数学と制御工学に関しては、参考書そのままの問題が過去問に出て、「あ！これ進研ゼ (ry」となったこともある。 参考書選びで迷っている人には、強くお薦めします。
その他 下賤な話だが、本専攻の入試は他大学院に比べ設問自体少なく、各年の傾向も似通っているため、穴場だと思う。
とはいえ最も大事なのは、大学院で何をやりたいのか明確な目標をもつことだろう。 目標をもつことは試験勉強のモチベーションに繋がるし、進学後にやるべきことも明確になる。
具体的な目標をイメージしづらい人は、前もって研究室見学には行くといいだろう。 現在主にどのような研究をしているのか、どんな実験器具があるのか、研究室の雰囲気はどうなのか、といった、ネットでは中々わからない情報が手に入る。 研究室のメンバーも外部からの刺激に飢えている (?) ので、歓迎してくれるはず (もちろんアポは忘れないこと) 。
また余裕がある人は、研究室のメンバーが書いた論文を読んでみることをお薦めする。 漠然とした研究内容を具体的に把握でき、やる気が高まるし、研究内容のミスマッチを防ぐこともできる。
本専攻ヒューマンシステム論分野にご在任の加納学教授のブログには、大学院進学に関してたくさんのアドバイスが書かれている。 例えばこのエントリなどは大学院進学を決意するにあたってはじめに読んでおきたい。</description>
    </item>
    
    <item>
      <title>入出力線形化</title>
      <link>https://inody.github.io/posts/io-stabilization/</link>
      <pubDate>Sat, 19 Sep 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/io-stabilization/</guid>
      <description>入出力線形化 (フィードバック線形化) とは 非線形システムに、非線形性を打ち消すような入力を加える事で、閉ループ系を線形化する制御法。 安定化が目的ではないので、得られた線形システムに対して線形制御法を適用する必要がある。
利点として
 通常の(ヤコビアンを用いる)線形化と違って、近似を用いない  欠点として
 システムの動特性を全て知っていなければならない その動特性は正方、入力アフィンという形をしていなければならない (拡張可能) 線形化のために大きな入力を加えるため、入力飽和などのあるシステムに適用しづらい  などが挙げられる。
入出力線形化 #仮定 今、制御対象が以下の動特性に従うとする。 $$\dot x = f(x) + g(x)u\ y=h(x)$$ $x(t) \in R^n, u(t) \in R^m, y(t) \in R^m$はそれぞれ状態、入力、出力を表す。 $f:R^n\rightarrow R^n$および$g: R^n\rightarrow R^{n\times m} $については特になにも仮定しないが、$h: R^n\rightarrow R^m$は必要回数分だけ微分可能だとする。
このシステムは入力に対してアフィンな形をしているため、そのまま入力アフィン (input-affine, control-affine) と呼ばれる。 入力アフィンシステムは、機械システムなどによくみられる、非常に重要なクラスらしい。
また、今回入力と出力の次元は同じと仮定している。 このことをシステムは正方 (square) であるという。
#線形化制御器 今、 $$u = C(x,v)$$ を設計することで、与えられた非線形システムを$v$から$y$に対して線形にすることを考える。
この問題に対して、いきなりだが制御器$u$を、下記で与えてみよう。 $$u = L_gh^{-1}(x)(-L_fh(x) + v)$$ ここで、Lie微分と呼ばれる記法 $$L_fh(x) = \frac{\partial h}{\partial x} f(x)\ L_gh(x) = \frac{\partial h}{\partial x} g(x)$$ を用いた。</description>
    </item>
    
    <item>
      <title>金井壽宏『働くひとのためのキャリアデザイン(PHP新書)』感想</title>
      <link>https://inody.github.io/posts/read-kanei/</link>
      <pubDate>Thu, 04 Jun 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/read-kanei/</guid>
      <description>筆者は終始「節目の期間はしっかりキャリアについて考える。それ以外の期間では目の前のことに打ち込み、時には偶然に流される(ドリフトする)ことも必要」という主張に徹する。 なので、この主張を真に理解している人は本書を手にする必要はないと思う。
本書のメインターゲットは就活生とミドル世代の2種類である。 また本書では、これらの層を想定したいくつかのエピソードやエクササイズが紹介されていて、キャリアデザインを「自分の問題」として考えさせる工夫が凝らされている。
個人的に、以下の自己イメージに関するエクササイズに考えさせられた。
  自分はなにが得意か。 自分はいったいなにをやりたいのか。 どのようなことをやっている自分なら、意味を感じ、社会の役に立っていると実感できるのか。   それぞれの問いは
  能力・才能についての自己イメージ 動機・欲求についての自己イメージ 意味・価値についての自己イメージ   を照射しているという。キャリアを意識する上で、避けては通れない質問だと感じた。
また、筆者は本書のはじめに「研究に基づく見解」を披露すると述べており、個人的に「キャリアデザイン」という科学らしからぬ問題に対して、どのような研究が存在するかが興味をもった。 実際には、多数の論者の言葉や考え方を引用するものの、定量的な考察はあまり見受けられず、「研究」という言葉の意味の齟齬を感じた(多分これは僕の考える「研究」があまりに狭義であるため)。
しかしながら、それらの考え方の中には、確かにそうだな、と実感させられるものもあり、キャリアに対する態度を改める必要すら感じた。
例えば、筆者が参加したエンジニアリング産業の社長会に参加した際、ある社長から耳にした言葉と、それに対する筆者の考えなどは、覚えておきたいと思った。
 「エンジニアリング産業の海外エンジのプロジェクトなんて、(中略)勘のいいバイタリティあふれる人なら、三十歳を超えるころには、だいたいプロジェクト・マネジメントができるようになる。そのあとは何箇所経験してもいっしょだ」
 この発言は、キャリア・トランジション・サイクルというモデルの重要さを説くための例として用いられている。 このモデルは、ロンドンビジネススクールのナイジェル・ニコルソンにより提唱されたもので、
 新しい世界に入る準備段階 実際にその世界にはじめて入っていって、いろいろ新たなことに遭遇する段階 新しい世界に徐々に溶け込み順応していく段階 もうこの世界は新しいとはいえないほど慣れて、落ち着いていく安定化段階  の4段階からなる。筆者によれば、このサイクルを螺旋状に上昇させていくことが、キャリアを発達させるために必要なことであり、上述の社長のようなサイクルは、望ましくないのだという(もちろん筆者は、エンジニアリング産業を批判したいわけではない)。
全体を通して、共感できないというか、納得できないというか、そういう記述もあり、それらはひとえに僕に社会人としての経験が不足していることによるものだと思う。 もしかすると、10年後くらいにもう一度読み直すことになるかもしれない。</description>
    </item>
    
    <item>
      <title>橘玲『臆病者のための株入門(PHP新書)』感想</title>
      <link>https://inody.github.io/posts/read-tachibana/</link>
      <pubDate>Sat, 16 May 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/read-tachibana/</guid>
      <description>某有名投資家のおすすめ書籍として紹介されていたことをきっかけに読み始めた。
株そのものに興味があるというよりも、日々ブログや経済ニュースで目にする用語を理解したかった。
全体として初学者にもわかりやすく、経済学の知見とそれに基づく著者の意見が記述されている。
ただ、数学が苦手な人への配慮から、数式による説明をすべてスキップしており、意見の根拠となる知見の導出過程が具体的にわかりづらい。
そのため、捻くれた読み方をすると「根拠の無い理論に踊らされることを警告しつつ、根拠の無い手法を提案する本」としてみなされかねない。 まあこの辺を言い出すと、経済学の教科書や学術論文以外の(またはこれらを含む)すべてを疑わなければならなくなり、きりがないのかもしれないけれど……
数式による記述がないメリットとして、読み物としてとても読みやすく、(内容を無根拠に信じるという前提にたてば)投資に対する明快なアドバイスが書かれており、思わず実践してみたくなるほど興味深い。 また、確定拠出型年金に対するある種の最適戦略を与えており、就職後役立つ知識が得られたと思う。
以前、新保の『金融商品とどうつき合うか―仕組みとリスク (岩波新書)』を読んだが、重複する箇所も多少あった。 比較的原理から説明してくれる本が『金融商品と〜』であり、より実践的なアドバイスが書かれているのが本書ということになると思う。</description>
    </item>
    
    <item>
      <title>カルマンフィルタの更新式まとめ</title>
      <link>https://inody.github.io/posts/kalman-filter/</link>
      <pubDate>Sun, 12 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/kalman-filter/</guid>
      <description>##カルマンフィルタとは
「離散時間システムの出力から、システムの状態を最小二乗の意味で推定する」
##問題設定
今回はもっとも簡単な線形時不変の方程式
$ x(k+1)= A x(k) + Bu(k) + Gw(k)$
$ y(k) = Cx(k) + v(k)$
を考える。 ここで、$w(k),v(k)$はそれぞれ白色ガウスノイズであることを仮定し、その平均と共分散は
$E[w(k)] = E[(v_k)] = 0$
$E[w(k)w(k)^T] = Q, E[v(k)v(k)^T] = R$
であるとする。$w(k)$と$v(k)$の間に相関はないものとする。
初期値もガウスであるとし、その平均と分散は
$E[x(0)] = \bar x(0)$
$E[(x(0)-\bar x(0))(x(0)-\bar x(0))^T] = \Sigma_0$
であるとする。
今、時刻$k-1$までの入力${u(0),\ldots,u(k-1)}$(以後$U_0^{k-1}$と表示)と時刻$k$までの出力${y(1),\ldots,y(k)}$(以後$Y_1^{k}$と表示)がわかっているとする。
###問題
$\hat x(k) = \text{argmin} E[(x(k)-\hat x(k))^T(x(k)-\hat x(k))]$
を満たす$\hat x(k)$を求めよ。
##アイデア
上記の問題は、右辺を計算することで
$\hat x(k) = \text{argmin} E[(x(k)-\hat x(k))^T(x(k)-\hat x(k)) | Y_1^k, U_0^{k-1}]$
と書き換えられる。 これを更に変形していくと、
$\hat x(k) = E[x(k)|Y_1^k, U_0^{k-1}]$</description>
    </item>
    
    <item>
      <title>アイルランドのSIM事情</title>
      <link>https://inody.github.io/posts/sim-ireland/</link>
      <pubDate>Tue, 07 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/sim-ireland/</guid>
      <description>アイルランドに来て3日経ちました。 入国後まずはじめにしたことが、通信環境を整えること。 アイルランドには主にVodafone, Meteor, 3(Three)などのキャリア会社がありますが、今回はMeteorのSIMカードを購入しました。
購入したのは月に15GBのデータ通信が使えるプランで、価格はなんと14.99€(日本円でおよそ2000円)。 ただしこちらは3Gの通信帯域のみでのプランです。 購入の際には、パスポートを提示したうえで、契約書にサインを求められます。 渡されたSIMを挿入し、付属のカードに書かれているPINコードを入力すれば、すぐに使うことが出来ました。 こちらはプリペイドタイプのSIMではなく、月ごとにカードを通して引き落としされる契約なので、解約の際にはショップに出向く必要があるそうです。
また、僕の場合は日本で購入してきたモバイルルータを使う都合、電話環境を整えられなかったのですが、必要な方には、3(Three)が提供している、月15GBのデータ通信に電話もかけ放題のプランをおすすめします。 こちらも価格は月に20€でとてもお買い得な上に、4G/LTEの帯域が使用可能です。 契約もプリペイドタイプなのでとても安心で、非の打ち所がありません。
アイルランドのSIM事情についてはこちらのページが詳しいようです(ただし、今回僕が契約したプランはこちらのサイトには掲載されていませんでした)。 キャリアが提供するプランは結構日々変動するみたいなので、アイルランドに来られる際には、ぜひ最寄りのショップに立ち寄ってみることをおすすめします。</description>
    </item>
    
    <item>
      <title>ヴルカヌス・プログラム出発にあたって</title>
      <link>https://inody.github.io/posts/vine2/</link>
      <pubDate>Tue, 31 Mar 2015 00:00:01 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/vine2/</guid>
      <description>ヴルカヌス・イン・ヨーロッパに参加しますに記載したとおり、1年間の語学研修とインターンシップに参加してきます。 僕の場合は、4ヶ月間アイルランドのダブリンで英語の語学研修を、残る8ヶ月間ベルギーのルーヴェンで企業研修を行います。
そもそもなぜこのようなプログラムに参加することになったのか。 海外への興味はもともとあったのですが、どちらかと言えば迫り来る就活時期を前に、自分がどんな分野で働きたいかが未だ見えず、焦っていたことが大きいように思います。
もともと重工系の企業に関心があり、なんとなく参加した夏のインターンシップ。 そこで得た結論は、「仕事にやりがいを感じられないと働くことはかなりつらい」ということでした。 このことはほとんど自明な事実だとは思うのですが、自分はもともと「やりがいなんてなくていいからまったり働きたい」という人間だったため、この発見はとても大きかったです。
一言添えておくと、参加したインターンの内容にやりがいが全くなかったわけではありません。 むしろ、自分の興味のど真ん中である大規模プラントを近くに感じられたのは本当によかった。
違和感を覚えたのは、巨大なプラントの設計や保守に携わるためには、巨大な会社が巨大なプロジェクトを運営し、その中で文字通り組み込まれるように働かなければならなかったことです。 自分のフォーカスがあまりにも狭く、「もの」が見えづらい研修内容だったと感じます。
他にも、大企業ならではの社風というか「しがらみ」というか、そういったものを意識せざるを得ませんでした。
では自分はどのように働きたいのか。 まず、プラントなどよりサイズの小さい「もの」を相手にする仕事が考えられます。そこで働けば相対的に自分のフォーカスが大きくなるんじゃないかという安直な発想です。 また、「超」のつく大企業は肌に合わないということも考えられます。ベンチャーで身を粉にして働くという感じではないので、その辺りはバランスだとは思います。
何れにせよ、今はまだ評価関数も作れていないし、探索区間からスパースな情報しか得られていない状態です。 そうした状態で最適解を求めようとしても、解が存在しなかったり、ローカルミニマルに陥ってしまったりしまうでしょう。 目下の課題は、なるべくたくさんの情報を集めて、それらをもとに最適化問題を正しく立式するといった感覚でいます。問題さえ立ててしまえば、解も見えてくるはず(多分…)
この1年間はそのための準備期間として最大限活用したいと考えています。
もちろんせっかく海外に行かせてもらえるのだし、苦手意識のある英語を得意分野に変えるのは、1年を気持ちよく終えるための必要条件だと考えます。
また、研修を通して、今まで身につけた制御工学の理論的な知識を、業務に応用できるよう成長できたらと思います。 もし少しでも手応えを感じたら、海外で働くことも一度は視野に入れてみたいです。
正直いつまで学生でいるんだという周囲(特に家族)からの眼差しが気にならなくもないのですが、行くからには絶対成長して帰ってこようと思います。</description>
    </item>
    
    <item>
      <title>内藤正典著『ヨーロッパとイスラーム 共生は可能か(岩波新書)』を読みました</title>
      <link>https://inody.github.io/posts/read-naito/</link>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/read-naito/</guid>
      <description>感想 4月からヨーロッパで過ごすこともあり、ホットなタイトルだったのでジャケ買いして読み始めました。
日々世間を騒がす報道について、理解のない自分でも前提知識なしで読むことが出来ました。
2004年に書かれた本なので、今世間を騒がすイスラーム国の事件については触れられませんが、現在のイスラーム圏とヨーロッパ圏の衝突が、どのような背景のもと起こったものなのかを理解するのにいい本だと思います。
著者が社会学畑出身なので、あまり(というかほぼ全く)定量的な議論は出てきません。 本人が「現実と人間とに焦点を当てて同時代の証言を集め、一歩引いて、それを俯瞰し再構築するのが私の方法である」とあとがきで述べている通り、取材したムスリム移民のエピソードがふんだんに載せられています。
すらすらと読める一方で、読者としては、一例と一般的な事実との境はどこなのかを多少注意して読む必要があるかもしれません(そもそもこの手の話題を定量的に扱うこと自体が難しいのかもしれないけれど&amp;hellip;)
あらすじとして以下にまとめましてみましたが、本書にはまだまだ有益なことが多く書かれており、是非人におすすめしたい本です。 title: &amp;ldquo;つぎは池内恵の『イスラーム国の衝撃(文春文庫)』を読みはじめています。&amp;rdquo; date: 2015-08-30T00:00:00+09:00 draft: false あらすじとメモ 著者は現代のヨーロッパ世界とイスラーム世界の衝突を、単なる「キリスト教対イスラーム教」という構図で説明できるものではないと否定する。 イスラームが意義を申し立てている相手は、宗教的規範から離れたあとに成立した西洋近代文明である。 西洋近代文明は、世俗主義、啓蒙主義の立場を取るため、宗教が政治や教育に関与することはないし、「人間が理性をもとに創り上げた法体系によって、現実の人間社会に規範を与える」。 しかしながらムスリムにとって規範とは、神が定めた法のことをいうので、これと根本的に対立する。
筆者はヨーロッパの中でも、ドイツ、オランダ、フランスの三国を取り上げ、各国におけるイスラーム世界との交わりを考察する。 そもそも、日本は島国であるため、「日本人とは何か」を我々国民が日頃意識することは少ないが、ヨーロッパは地続きであるため、これを定義する姿勢は国により異なる。
まずドイツであるが、「ドイツ人とはドイツ人の親から生まれた人間を指す」という血統主義的な民族観をもつ。これは2000年以降の外国人法で、ドイツで生まれた外国人も23歳満了までにドイツ国民として扱う方針に改められたが、依然として根底にはかつての価値観が横たわる。 特に、信仰実践に熱心なムスリムが、先進的なヨーロッパ社会や文化になかなか同化しないことは、国民の不安を煽った。
筆者はムスリム女性がスカーフやヴェールを公的な場所で、特に公立学校で教師が、身につけることを禁じる決定に関する騒動を取り上げる。 この決定に賛同する主張者は「国家と宗教の分離」という原則論の裏に、複数の宗教、文化が混在することを承認したくないという拒絶を掲げている。
そもそも彼女たちがスカーフやヴェールで自分を隠す理由は、イスラーム世界では「女性の髪は性的なもの」として人前で隠すよう求められているからだ(実際コーランには「汝の隠しどころを覆え」としか書かれていないが)。 よって彼女たちがスカーフを取れと命じられることは、セクシャル・ハラスメントにほかならない。 また「国家と宗教の分離」の原則を掲げるのであれば、キリスト教徒が掲げる十字架も着用禁止にすべきだ、とする主張もある。
ドイツが国家統一を果たしたのはイギリスやフランスより遅く、「ドイツをドイツたらしめる文化的な背骨のようなもの」に自信をもてないことなどが、排外的な民族主義を生み出す下地となったのかもしれないと、筆者は考察している。
つぎにオランダであるが、「どこで生まれたか」によって国籍を与える、生地主義の立場をとる。 また、オランダにおけるリベラリズムとは、個人が生きたいように生きる権利を保証することを指す。 この国において、ムスリムはカトリックやプロテスタントと同じく、多分化主義に組み込まれている。
では、このような社会でムスリムへの批判が存在しうるのかというと、答えはイエスである。 「個人が生きたいように生きる」とは、裏を返せば「他人に干渉されない」ことを重視することであり、異質な文化をもつ人間が増えることで、自分たちの権利が脅かされることを懸念する。
特に、テロを起こし、女性を抑圧し、ヨーロッパの普遍的価値を学ぼうとしない彼らに対して、オランダは「自分たちが築き上げた寛容の精神がイスラームの不寛容によって脅かされる」というレトリックを用いている。 オランダにおいてイスラーム組織に対する規制が強化されるのは時間の問題だと筆者は意見を述べている。
最後にフランスであるが、フランス国民であることは、共和国の理念や原則を受け入れ、共和国と契約を結ぶことを意味する。 「自由・平等・博愛」のもと、移民への差別は悪とされるが、差別がないわけではもちろんなく、現実に起きる差別が個人の問題に帰されてしまう構造をもつ。
移民にとってフランス人となる契約を結ぶためには、その意志を役所に申請し、フランス語でのやりとりをしなければならない。 フランスにとっての博愛は「万人を愛する」という意味をもたず、むしろ「同胞のみを愛する」という意味をもつ。異なる集団に対しては、愛するどころか敵視と排斥の目を向けることになる。
この国においても、スカーフ着用問題は起きており、おおよそドイツと同じ構造をもつが、中にはスカーフ禁止に賛成するムスリム女性もいる。 彼女たちはフランス社会の多数派と同じく、スカーフを女性抑圧のシンボルとみなしており、彼女たちがこのような立場を取るようになったのはフランスの教育によるところが大きい。
しかしながら、一方で、高い教育を受けてなお、スカーフ着用を個人の自由意志の表明として実践する女性もおり、実態はそう単純ではない。
これらのスケッチを通じて筆者は、ドイツはもともと存在する外国人に対する排斥感情によって、オランダはイスラーム共同体の形成を促進してしまうシステムによって、そしてフランスは同化圧力によって、「文化的・社会的統合に失敗した」と断言している。
最終章において、筆者は、今日のイスラーム・ヨーロッパ両圏の対立は、ヨーロッパ世界のイスラーム世界に対する誤認によるところが大きいと主張する。
ムスリムにとって商業における公正の観念と弱者救済は表裏一体の教えであり、苦しい境遇にある同胞は救済するために努力しなければならない。そのための行動は、彼らを取り巻く環境が悪化するにつれて、大きなものにならざるをえない。 本来、キリスト教やユダヤ教などの異教徒に対して敵意を抱かないどころが、同じ唯一神から啓示を受けた人間として、兄弟と考える彼らの中には、過激な行動をとるものも現れる。
欧米世界は、このようなイスラーム世界に対して、彼らが公正とみなす政策を実現できないどころか、憎悪の連鎖のなかで「原理主義」というレッテルを作り出し、暴力に訴えて反撃するなと諭すには、あまりに理不尽な被害を与えてきた。
両世界の関係を相克の時代から対話の時代へ転換させるためには、ヨーロッパ世界イスラーム世界の文明を理解し、自らの文明がもつ「社会的進歩の観念を無意識に他者に押し付ける力」を自覚する必要があると筆者は締めくくる。</description>
    </item>
    
    <item>
      <title>田中素香『ユーロ 危機の中の統一通貨 (岩波新書)』を読みました</title>
      <link>https://inody.github.io/posts/read-tanaka/</link>
      <pubDate>Fri, 06 Mar 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/read-tanaka/</guid>
      <description>感想とメモ 少し旬が過ぎてしまったが、4月からユーロ圏で過ごすこともあり、通読した。 気まぐれに、得られた知識をメモしておきたいと思う。
第I章では、ユーロ導入でどのような効果があったのかを概観する、
ユーロが主として物価安定と低金利化をもたらしたことがデータをもとに示されており、本章を立ち読みするだけでも得るものがあると思う。
個人的に、第II章の統一通貨導入までのいきさつについての記述がよくまとめられていると思った。
大いに語弊があると思うが、まとめられた記述を更に自分なりに要約してみた(引用ではない)：
 1970年の『ウェルナー報告』に始まる通貨統合の試みは、各国の経済安定への懸念や、権限の委譲の方法の不明瞭度から、一時破綻した。 特に、当時、物価安定重視・貿易黒字だった西ドイツと、経済成長重視・貿易赤字だったフランスとの間には、経済政策路線に大きな隔たりがあり、各国が変動相場制に移行したことで、その隔たりはさらに大きくなった。
変動相場制の導入で欧州各国で経済が不安定化するなか、ドイツ・フランスの両国は1978年に『EMS設立会議』をスタートさせる。 フランスでは完全雇用政策を犠牲にする必要が生じ、失業率が上昇したが、シュミット大統領の手腕でこれを切り抜けた。 また、ドイツでは、厳しくなる一方の外部環境(アメリカドルの大変動など)に対して、マルクをEMSの基軸通貨として確立し、ユーロ導入への道を開いた。
その後EMSが安定度を高めたことと、ヨーロッパがアメリカ・日本に比べて経済的に劣位になっていたことが要因で、単一市場完成への機運が高まった。 1987年の単一欧州議定書発効を機に、統合への動きは加速した。 当時の西ドイツでは、安定したマルクを放棄することへの懸念が大きかったが、EMSの金融政策を支配するこの国に対して、フランスを初め、各国は批判的だった。 1989年、東西ドイツが統一へ動いたが、EC各国ではドイツの独り歩きが「再び」始まるのではないかという不安が広まった。 各国はドイツの統合に反対し、ドイツはマルクを放棄するという条件のもとでの統一の道を提示、各国はこれを飲んだ。 当時のコール首相は「欧州統合は平和か戦争かの問題だ」と繰り返し、世論を押し切ったのである。
 第III章では、ユーロの仕組みと役割、制度についての解説がなされている。
欧州中央銀行と各国中央銀行との関係や、金融政策、市場介入などの仕組みなどが述べられていた。 初学者の自分には、初めて知ることばかりであり、また、多少難解に感じた箇所もあることから、何度か読みなおす必要を感じた章である。
第IV章、第V章では、世界金融危機を主に欧州の視点から概観している。
筆者によれば、世界金融危機は3段階に分けられる。
 バリバ・ショックからリーマン・ショックまでの米欧危機段階 リーマン・ショックから09年代までのグローバル恐慌危機段階 09年代からの不況段階  現在ニュースで目にするギリシャ危機や南欧危機は第3段階目にあたり、未だに収束していない。
ギリシャ危機の特徴について2行でまとめると
 サブプライム危機など：アメリカで起きた危機。いわば対岸の火事。EUの各国への融資をはじめとする対策によってなんとか切り抜け、ユーロの求心力は高まる ギリシャ危機：ユーロ圏内で起きた危機。ユーロ圏の抱える制度的・構造的な問題が浮き彫りとなる  という感じになると思う。
以下IV,V章で印象に残った箇所の引用：
(p150)
 経常収支の大幅赤字、外国銀行からの巨額の借入、外貨依存という三つの点で、中・東欧諸国のん状況は九七年の東アジア通貨危機の諸国（タイや韓国など）に似ている。 にもかかわらず銀行危機が起きていないのは、西欧の銀行支配のおかげであり、東アジアのように脆弱な金融システムではなかった点が大きい
 (p166,167)
 南欧支援の巨額の安定化策が最終決定したのは五月九日夜であった。 (中略) すなわち、七五〇〇億ユーロという膨大な額の金融安定化メカニズムを創設するもので、うち最大五〇〇〇億ユーロをユーロ圏諸国と欧州委員会が分担、さらにIMFが最大二五〇〇億ユーロを共同支援する。 (中略) なぜ七五〇〇億ユーロ、九〇兆円もの莫大な学になったのだろうか。それはユーロ圏諸国の危機感の裏返しといえる。 ユーロはユーロ圏諸国にとって「後戻りできない壮大な実験」である。 市場からのユーロの信認をつなぎ止めるのはいわば「至上命題」であった
 全体を通して、僕のような完全な初学者ではフォローできない箇所が目立った。 テクニカルタームへの理解が足りず、金融論に関する知識をもっと増やす必要を感じた。 以前読んだ、新保恵志著『金融商品とどうつき合うか―仕組みとリスク (岩波新書)』で得た知識は少なからず読解に役立ったと思うので、こちらも読み直したい。
感想を書いてみての感想 普段本を読んだ後何もアクションすることがないので、得られた知識が3日と保たないことが多いが、こうしてまとめてみることで、知識が整理される気がする。
これからも続けていきたいが、義務化してしまうと本を読む気が失せる危険があるので、あくまで気まぐれに続けていきたい。</description>
    </item>
    
    <item>
      <title>線形回帰手法まとめ</title>
      <link>https://inody.github.io/posts/linear-regression/</link>
      <pubDate>Fri, 30 Jan 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/linear-regression/</guid>
      <description>概要 最近学んだ線形回帰手法の特徴についてまとめる．
具体的には，特定のデータセットに対して，重回帰(Ordinary Least Squares: OLS)，リッジ回帰(Ridge Regression: RR)，部分最小自乗回帰(Partial Least Squares: PLS)の3つの線形回帰手法を適用し，結果を考察する．
重回帰 説明変数$ X$および目的変数$ y$が与えられているとき，
$ y = X b + e$
のように，目的変数が説明変数と回帰係数$ b$との線形結合によって表されているとするのが，線形回帰の考え方である．
ここで，重回帰においては，残差$ e$の二乗和
$Q = e^T e$
が最小となるように回帰係数を決定する． 残差二乗和が最小となるときの回帰係数は
$ b = ( X^T X)^{-1} X^T y$
として与えられることが知られている．
リッジ回帰 重回帰では，$ X^T X$が逆行列を持たない場合，残差二乗和を最小化できない． これは，説明変数が線形従属である場合や，サンプル数が入力変数の数より少ない場合に対応する． また，説明変数が厳密に線形従属でなくても，変数間に強い相関がある場合には，回帰係数の分散が大きくなり，推定結果の信頼性が低下してしまう問題が起きる． これを，多重共線性の問題という．
回帰係数を小さく抑えるためのひとつの手法として，リッジ回帰が挙げられる． リッジ回帰においては，残差の二乗和に加えて，回帰係数の二乗和を加えた
$Q&amp;rsquo; = e^T e + \lambda b^T b$
が最小となるよう，回帰係数を決定する．ここで，$\lambda\ge0$を複雑度パラメータと呼ぶ． 残差二乗和が最小となるときの回帰係数は
$ b = ( X^T X + \lambda I)^{-1} X^T y$</description>
    </item>
    
    <item>
      <title>モンテカルロ法で次元の呪い</title>
      <link>https://inody.github.io/posts/monte-carlo/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/monte-carlo/</guid>
      <description>概要 モンテカルロ法で次元の呪いを体験するを読んで，自分も最近似たような体験をしたことを思い出したので，メモしておく．
問題  $N$行$N$列の行列の各要素に$1$から$N$までの数字が入っているものとする． 各列，各行に数字の重複を許さない行列は全部で何通りあるかを推定せよ．
 はじめ，ランダムに$1$から$N$までの数字を格納した2次元配列を用意して，各行と列に重複がないかチェックし，重複がない試行の確率を求める方法をとった．以下，作成したPythonのコード(クソコードなのはご愛嬌)．
#! /usr/bin/env python # -*- coding: utf-8 -*- from numpy.random import * def check_overlap(args): for i in range(len(args)): if len(set(args[:,i])) &amp;lt; len(args[:,i]) or len(set(args[i,:])) &amp;lt; len(args[ i,:]): return False return True if __name__ == &#39;__main__&#39;: N=4	#size of matrix M=100000000	#number of trial randarray = randint(1,N+1,(N,N,M)) count=0 for i in range(M): if check_overlap(randarray[:,:,i])==True: count = count+1 if i%100000==0: print(M-i,count) print( N**(N*N) * count / M )  この方法では，$N=4$あたりで現実的な解が得られなくなってしまった．</description>
    </item>
    
    <item>
      <title>三菱重工のインターンシップに参加しました</title>
      <link>https://inody.github.io/posts/intern-mhi/</link>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/intern-mhi/</guid>
      <description>概要 本格的就活シーズンの到来に先駆け，少し古い話になるが，今年の夏に三菱重工のインターンに参加したことについて備忘録を残す． おそらく社外秘につき触れてはいけない点が多々あるため，特に技術的な点については触れないことにする．
なぜ三菱重工なのか 僕は制御工学を研究している． 制御工学は，対象が特定の形式でモデル化されていれば，（そのスケールに関わらず）それが制御可能であるか，可能であればどうすれば制御できるか，などをある程度体系的に取り扱う事ができる． 僕はこの分野横断的な要素に惹かれており，制御工学がどの程度大きな対象に対象にまで応用されているかに興味をもっていた． 重工系の企業を選んだのはこれが理由． そのなかで，三菱重工を選んだのは，単に自分のなかでもっとも有名な企業だったためと言ってしまってよい．
あとはざっくりと社会人ってどういう感じなのか知りたかった．
研修内容 2週間，原子力発電所の運転訓練用シミュレータの保守作業にかかわらせてもらった． 原子力プラントの運転には高度な技術が必要であり，実際の発電所の近くには，訓練のための実機そっくりのプラントシミュレータが設置されている． シミュレータは，（制御的視点からみれば）プラント部とコントローラ部からなっている． プラントの動特性はある程度数理的にモデル化されており，また，コントローラは実際に用いられているロジックを移植することで構成されていた． 僕が携わったのは，制御器のなかの一部のロジックの変更作業．
所感 #社会にでることについて まず感じたことは，「社会人思ったより大変」ということ．
具体的には，毎日早起きして，満員電車に乗って，一日同じ机の上で作業し，夜に帰宅し，つぎの日を迎えるというサイクルははじめ地獄のように思えた． 天下に名を轟かせる大企業ですら，毎日朝から晩まで仕事しなくちゃいけないんだという考えてみたら当たり前の事実が，当時の僕を驚かせた． 裏を返せば，もっと待遇の悪い（残業漬け，土日出社など）会社なんてごまんとあるはずで，この辺は自分が順応していくしかないと思った．
また，自分を苦しめた要因の一つが「サイクルの単調さ」にあったように思うので，就職するうえではある程度刺激的で流動的な仕事ができたらいいと感じた． 一方で安定を求めているのも確かで，バランスを考えていく必要を感じた．
#学校で学んだこととの関わりについて 原子力にはさほど興味がなかったが，巨大さの象徴でもある発電プラントのなかで，制御工学がどの程度関わっているかということを知ることができた． 「じゃあどの程度か」と訊かれたら「ほんの一部」という答えになる． この辺をあまり詳しく書くと怒られるかもしれないが，大学院で学ぶ高度な制御理論は殆ど登場せず，はじめ少しがっかりした．
しかしながら，配属先の部長さんの話を聞くうちに，目から鱗が落ちていくような気がした． というのも，彼は学生のとき僕と同じく理論ベースの制御を研究し，就職時に学問と実際とのギャップに落胆したとのこと． けれども，業務を通じて，「自分の専門」への固執が，ある意味で世界を狭めていたことに気づき，以後より広い目線を獲得していくことにつながった，という趣旨の話をしてくださった．
このエピソード以外にも，貴重な時間を割いてたくさん含蓄ある話を聞かせてもらい，少し大袈裟かもしれないが「この人の下でなら仕事をしたい」と思えるくらい，魅力を感じた．
12月現在，自分の研究に対しての素養が十分でないとわかりつつある今，就職は人で決めたいと思う理由のひとつになっている．
今後どうするか インターンで得る情報がかなり有益であることに気づいたので，できれば別の会社を訪問し，比較検討したいと考えている．</description>
    </item>
    
    <item>
      <title>ヴルカヌス・イン・ヨーロッパに採択された </title>
      <link>https://inody.github.io/posts/vine/</link>
      <pubDate>Tue, 25 Nov 2014 00:00:00 +0900</pubDate>
      
      <guid>https://inody.github.io/posts/vine/</guid>
      <description>概要 理系の大学生，大学院生を対象にした，1年間の奨学金付きインターンプログラム．
日欧産業協力センター(以下センター)によって実施されている．詳しくはこちらを参照．
ヴルカヌス・イン・ヨーロッパ
採択されたのはベルギーのSiemens Industry Software NVという企業． 今回は応募の経緯と，採択に至る過程を簡単に紹介しようと思う．
経緯 4月に他大学院に進学．環境が変わることで，刺激的な出会いがたくさんあった．
そのなかでも修士2年から留学に行くという研究室の友人に触発され，海外経験の必要を感じていたこともあり，応募するだけならタダ，という気楽な考えで応募した．
友人や，その友人の留学生に英文の書類作成や面接練習を手伝ってもらったおかげで，選考を生き残ることができて，徐々に覚悟を決めていった，という次第．
過程 採用は1次選考，2次選考，3次選考と進んでいく．
1次は書類選考．志望動機書と推薦書をそれぞれ和文，英文で作成して，センターに郵送する．
2次は面接．東京の会場にてグループディスカッションと個人面接を行う．
3次は企業の人事の方と直接電話面接．研修内容の確認などを行う．
一番驚いたのは，2次の面接に合格したこと．というのも，僕は特に英語が得意というわけでもなく，本番でも面接官の質問にほとんど答えられなかったから． 後から考察するに，おそらく研究分野が候補となる企業の業務内容とマッチしていたことが大きかったんじゃないかと思う． あとはわからない質問には沈黙するんじゃなくて，単語のつぎはぎでもいいからとにかく喋ること． 語学力というより，話そうとする意思を見せたことがよかったのかもしれない． ちなみに，グループディスカッションのテーマは「たこ焼きをヨーロッパで得るための企業戦略を考えよ」みたいな感じだった． 個別面接では好きな漫画を尋ねられたので，即座に『HUNTER×HUNTER』と返答したが，誰もご存知なかったようで焦った．
1次，3次についても，参考までに，ぼく(もといぼくの友人とその友人の留学生)が作成した書類の一部を公開したいと思う．
 1次選考志望動機(和文)   プログラム参加志望理由
私の目標は世界を舞台に活躍するエンジニアになることです． より具体的には，日本の重工業またはプラントエンジニアリング企業の研究開発部門などに所属し，海外の大きなプロジェクトに携わるなかで，技術面から業界に一定の貢献をしていくことです． 後述する制御工学を専攻する中で，私は巨大なシステムをどのように設計し，動作させるかに興味をもち，このようなキャリア設計をするに至りました．
貴プログラムを通じて得るものは「外国語でのコミュニケーション」「未知の環境での研究開発」など目標達成のために不可欠な経験であるばかりでなく，欧州での文化的生活を体験することは，私の価値観を広げてくれると予感します． また，欧州諸国には，ドイツのシーメンス社やフランスのシュナイダー社，スイスのABB社など，規模・技術の両面で日本に先行する企業が数多くあるため，私は将来そうした企業の人たちと積極的に関わり，協力・競争したいと考えています． そのため，私の目標と，貴プログラムの目的である「将来の日欧関係を担う若者育成」はマッチするといえます．
大学，大学院での専門分野
現在私はシステム科学を専攻し，その中でも制御工学を研究対象にしています． 制御工学とは，制御対象への入力を工夫することにより，その出力を自由に操作することを目指す学問です． ここでの制御対象とは，機械系，電気系，化学プロセス系，生物系など，産業上重要なあらゆるシステムを含みます． また本学問では，対象を数式でモデル化したうえで，制御手法を統一的な枠組みで議論することができます． このような応用の可能性と，理論の簡明性が，本学問の魅力だと考えます．
現在私は，制御信号に離散値しか用いることができない場合に対する，制御手法の研究をおこなっています． このような制約は産業上よくある要請であり，意義のある研究だといえます． 私が提案する制御手法では，信号に確率的な雑音を意図的に付加することで，制御性能を改善することができます． これは，制御器に乱数生成器を取り付けるだけで実装できる，コストパフォーマンスに優れた手法です．
自分はどのように受入企業へ貢献できるか
はじめに，私は研究者としての素質を備えています． 私は前述の研究内容に関して一定の成果を上げており，これまで学会発表を国内で2件，国外で1件おこなったほか，国内でもっとも権威ある学会に論文が採択されました． これらは勉学に関する地道な下積みなしには達成できない成果です．
また，私は技術者として一定のスキルを備えています． 具体的にはシミュレーション，実機実験，データ分析などをはじめとする，研究活動に必要なひと通りの作業を経験しています． また，C, Python, Matlabなどのプログラミング言語を扱うことができます．
  1次選考志望動機(英文)   Motivation to take part in this program.
My life goal is to be the engineer leading the world.</description>
    </item>
    
  </channel>
</rss>
