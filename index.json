[{"content":"概要 先日、2021年4月から始まった社会人博士取得の取り組みが一段落した。 3年で学位を取るという当初掲げた目標は達成したので、結果としては大変満足している。 忘れっぽい将来の自分のために、そして社会人博士に興味のあるどこかの誰かのために、今のうちに体験してみての所感をメモしておく。\nなぜ社会人博士を選択したか 多くの人がストレートでの博士進学を躊躇する理由に、経済面の懸念があると思う。 自分もその一人で、当時障害持ちの親から仕送りを急かされていて、そうでなくとも自費での修士の生活にかなり苦労していたため、就職することにした。 修士までに得た知識を活かした仕事をしたく、また研究を生業にすることにはもともと興味があったため、企業の研究所に的を絞った。 いくつかの企業に応募し、最初に内定をいただいたところに入社することにした。\n入社後、入学までの経緯 社会人博士を始められたのは、配属部署・上司・受け入れ先の先生のそれぞれに恵まれたおかげである。 配属部署では論文が成果として認められ、大学の研究室と変わらないフェーズの研究が可能だった。 特許化や受託開発を主業とする部署では、博士を目指すのにもう少し時間がかかると思う。 また、上司は配属当初から博士を目指すという私の要望を受け入れ、事あるごとに親身に相談に乗ってくれた。 入学先は巡り合わせで決まった。 社内で新プロジェクトが始まるにあたり、これまで関わりの少なかった数学系の研究室と組むことになり、上司を通して恐る恐る先生に進学可否を尋ねたところ、快諾していただいた（上司に感謝）。\nこのように運に恵まれた会社生活だが、入学が決まるまで入社から4年かかっている。 後述する私生活との兼ね合いもあるため、やはりストレートで進学できる人はした方が良いと思う。 また、企業研究所から博士号取得を目指す人は、博士進学が可能かどうか、会社の理解がどの程度あるのか、事前に中の人によく話を聞くべきだと思う。\n入学後、最初の論文を通すまで 自分は工学の中でも理論よりの分野出身であり、研究室は数学の中でも応用よりの分野だが、使用される数学は難解に感じられた。 はじめ、学部後半向けの教科書から地道に読んで必要な知識をキャッチアップしようとしたが、読むペースが遅すぎて、3年で成果を出すのは難しいと感じた。\nこのため、途中から勉強は適度にし、とにかく論文を調査して自分にも手が出せる切り口がないか探る方針に切り替えた。 出会った論文を1時間読んでみて「まるで何をしているか理解できない」と感じる時は、一旦保留にして次に進んだ。 そうするうちに、自分にもなんとかエッセンスを理解できる論文の数が増えていった。 あるとき、ある論文と別の論文でそれぞれ提案されている手法を組み合わせれば、拡張が可能な気がした。 このアイデアを先生に相談したところ、Goサインをもらうことができた。\n取り組んだテーマは、ある偏微分方程式に対する数値計算スキームの提案とその性能解析である。 計算スキームは既存の論文のアイデアの組み合わせであり、解析に難しい数学の概念は登場しない。 スキームの提案では解ける問題が工学問題として価値があることを強調し、解析においては細部にわたる慎重な式展開を心がけた（結果式番号は150を超えた）。 執筆中、先生には何度も助けを求め、社内の研究者にも助言いただいた。\n無事提出できた時には安堵したが、初回の査読が返ってきた時の絶望は今でも鮮明に覚えている。 難解すぎて批判の内容が理解できなかったのだ。 査読対応中は2日に1度先生と打ち合わせし、一から十まで指導を受けながら、何としても期日までの再提出を目指した。 結果、2度目の査読でのマイナーリビジョンを経て、アクセプトを勝ち取ることができた。\n博士論文の執筆まで 入学した研究科では、卒業要件に明確なアウトプットの基準が設けられておらず、慣例的に最低1本しっかりとした論文を通していればOKとされている（研究科によっては論文誌に3本以上採択などの条件があるため、慎重に確認すべきと思う）。 このため、1本目の論文の採択後は、より挑戦的な研究を実施することを意識した。\n1つに、数学と工学の間にあるギャップを考え、必ずしも数学解析が伴わない形でも解決策を提案する研究を実施した。 この内容は自分の従来の専門分野の雑誌に投稿し、スムーズにアクセプトをいただくことができた。\nもう1つに、より解くのが難しい方程式に対する計算スキームと数学解析を試みた。 結果は不完全なもので、一度投稿したがリジェクトだった。 その後内容を見直し、再投稿したが、現在査読中である。\n発展的な話題として、機械学習を取り入れた計算手法も提案した。 機械学習の最先端のトピックはレッドオーシャンだが、少し古典的な道具を使うことで、学んだ数学解析を活かした理論結果を導出できた。 このテーマは現在論文化に向けて準備中である。\n博士論文では、1本目の論文に加えて、上記の3つのテーマの内容を含めた。 内容に一貫性が欠ける懸念があったが、工学的な目標達成のための多様な手法を提案するという視点で構成した。 この取り組みが功を奏したといえ、発表後は先生方から好意的なコメントをいただけた。\n研究を進める上で、指導していただいた先生と、共研に関わった社内メンバーには大変お世話になり、本当に感謝してもしきれない。\nどのように生活したか 学位取得に向けた3年間、家庭・仕事・学業に折り合いをつけるために様々な方法を模索したが、結局うまくいかなかった。 特に初期は成果が出なかったため焦りが大きかったが、歯痒い思いをするたびに、優先順位は「1. 家庭、2. 仕事、3. 学業」だと自分に言い聞かせた。\nプライベートでは、以前に都内に転勤が決まり、東海地方の妻とは別居婚で生活している状態だった。 これに加えて、入学前に妻の出産というライフイベントを経験し、子どもという大きな不確定要素を抱えたまま挑戦が始まった。 3年間の生活はおおよそ以下の通りだった：\n1年目：妻の育休中、妻と子に都内に来てもらい3人で同居していた。自分は在宅と出社の半々で生活していた。\n2年目：妻の育休終了後、妻と子は東海の実家に戻り、妻は仕事に復帰し、子は保育園に入園した。自分は都内と妻の実家を2週間ごとに行き来する生活を送った。\n3年目：自分の転勤期間が終了後、東海に戻り妻の実家に同居させてもらった。自分は主に在宅勤務をしながら週一の頻度で出社し、月一の頻度で新幹線で通学した。\n各年度での生活を振り返ると、1年目は、特に妻のメンタルケアが課題だった。 地元から離れて周りに友人がおらず、毎日の子どもとの生活に気が滅入るようだった。 このため、週末は妻に休んでもらい、リフレッシュしてもらうようにお願いした。 この間、自分は子どもを連れていろんな場所に出かけたおかげで、都内の公園や百貨店の屋上などに詳しくなれた。\n家事について、平日の夕ご飯は妻に作ってもらい、それ以外は相談して決めていた。 自分が家にいる間は、オムツ交換・ミルク・お風呂・寝かしつけなどは率先してやるようにした。 食洗機・ロボット掃除機・ホットクック・Amazon Echo・Switch Botなど、時短の道具には惜しみなく投資した。\n精神的には、特に入学初期は時間の確保に苦しんだ。 早朝や夜遅くに研究に臨んだ時期もあったが、結局昼間に寝不足になるだけだった。 すでに十分頑張ってくれている妻にこれ以上負担を求めるわけにはいかず、限られた時間で焦りながら文献調査や手法検討をしていた。\n2年目は、最も妻に負担をかけた年だった。 妻は時短勤務で職場復帰しながら、保育園の送迎や自分が不在の間の子の世話を全てこなしてくれた。 義父母には、毎晩の夕食と週末の子の見守りをお願いし、妻を支えていただいた。 自分は都内にいる間は出社して仕事しながら学位取得にも集中させてもらい、帰省中は100%在宅勤務で残業をせず、家族との時間を最優先に生活した。\n都内にいる間時間ができて集中できたおかげもあり、1本目の論文のアクセプトが決まり、学位取得の出口への光が見えた年でもあった。\n3年目は、研究成果は出揃いつつあったが、論文執筆の時間の確保に苦労し、引き続き妻には保育園の送迎をお願いした。 一方、子どもが大きくなったことで、自分と子の2人で隣県まで電車で出掛けて外泊することもできるようになり、妻に週末リフレッシュしてもらう機会を増やすことができた。\n3年間を通じて、妻に大変な支援を受けたこと、家族全員に支えていただいたことに深く感謝している。\n時間を捻出できた理由 上記から分かる通り、結局プライベートの時間を削って学位取得のための時間を捻出することはほとんどできなかった。 それでも学位が取れた主な理由として「会社と研究室で共同研究契約を結んでいた」ことが大きいと思う。 会社は学位取得と共同研究を切り分ける立場だったが、成果物を明確に区別すれば、共研と学位取得を近い方向性で進めることができた。 学位に関わらない仕事にも並行で取り組んでおり、ストレートに進学した人に比べて時間は不足したが、規則正しい生活と経済的な安心感は社会人博士の利点だったといえる。\nなお、このような地盤を整えてくれたのも、上司があちこち交渉してくれたおかげである（改めて感謝）。 また、繰り返しになるが、社会人博士を目指す人は、自分のような体制で取り組むことができるか事前に確認するべきだと思う。\nまた、我が家においてコロナ禍はプラスに働いた。 以前は例外的な扱いだった在宅勤務が、コロナ禍によって一般化し、家族の急用対応や遠方からの研究打ち合わせに追い風となってくれた。\n反省点 第一に、専門性が事前の期待に比べて深まらなかった。 深く学問に没頭するよりは、目標達成に向けて効率的に研究を進める3年間だった。 ただ、難解な数式には晒され続けたので、一見理解が難しい概念に対して、粘り強く取り組み、エッセンスを吸収する姿勢は身につけられた。\n第二に、人脈形成の機会を逃していた。 子どもが小さいため在宅を優先し、学会発表を控えめにし、論文投稿に注力した。 その結果、一定の成果は出たが、外部の研究者との連携を深められなかったことは残念に思う。\n今後の予定 学位を取るという当初の目標は達成できたが、これで燃え尽きずに、チャレンジを続けていきたい。 具体的には、社内の留学制度の利用を視野に入れながら、社外の研究者とコラボレーションを実現したい。 国内外を問わず様々な研究者と繋がり、パートナーとなってくれる方を見つけたい。 （どなたか一緒に研究しましょう！）\nまた、一つ前の投稿で、転職活動について触れた。 学位を取った途端転職するのは不義理が過ぎるため、すぐに取る選択肢ではない。 ただ、これまでの研究活動が評価される場所がどこかにないか興味を持っている。 少し調べたところ、今の職場ほどテーマ設定の自由度が大きい組織は少ないと感じており、改めて弊社最高、という気持ちになっている。 これはありがたい事実だが、これに甘えていると将来会社に見限られた時に路頭に迷う可能性が高まるとも思うため、今後は外でも通用するテーマ設計を心がけたい。 この観点は世の中に役立つ研究を実施するためにも重要なはず。 （どなたかスカウトお待ちしてます！）\nというわけでこのメモ自体が会社に不義理な感じもしてきたが、もしかしたらどこかの誰かの役に立つかもしれないので、公開しておく。 （今年は会社のリクルータを仰せつかっています。どなたか弊社にご興味ある方、ご連絡お待ちしております！）\n","permalink":"https://inody.github.io/posts/finishphd/","summary":"概要 先日、2021年4月から始まった社会人博士取得の取り組みが一段落した。 3年で学位を取るという当初掲げた目標は達成したので、結果としては大変満足している。 忘れっぽい将来の自分のために、そして社会人博士に興味のあるどこかの誰かのために、今のうちに体験してみての所感をメモしておく。\nなぜ社会人博士を選択したか 多くの人がストレートでの博士進学を躊躇する理由に、経済面の懸念があると思う。 自分もその一人で、当時障害持ちの親から仕送りを急かされていて、そうでなくとも自費での修士の生活にかなり苦労していたため、就職することにした。 修士までに得た知識を活かした仕事をしたく、また研究を生業にすることにはもともと興味があったため、企業の研究所に的を絞った。 いくつかの企業に応募し、最初に内定をいただいたところに入社することにした。\n入社後、入学までの経緯 社会人博士を始められたのは、配属部署・上司・受け入れ先の先生のそれぞれに恵まれたおかげである。 配属部署では論文が成果として認められ、大学の研究室と変わらないフェーズの研究が可能だった。 特許化や受託開発を主業とする部署では、博士を目指すのにもう少し時間がかかると思う。 また、上司は配属当初から博士を目指すという私の要望を受け入れ、事あるごとに親身に相談に乗ってくれた。 入学先は巡り合わせで決まった。 社内で新プロジェクトが始まるにあたり、これまで関わりの少なかった数学系の研究室と組むことになり、上司を通して恐る恐る先生に進学可否を尋ねたところ、快諾していただいた（上司に感謝）。\nこのように運に恵まれた会社生活だが、入学が決まるまで入社から4年かかっている。 後述する私生活との兼ね合いもあるため、やはりストレートで進学できる人はした方が良いと思う。 また、企業研究所から博士号取得を目指す人は、博士進学が可能かどうか、会社の理解がどの程度あるのか、事前に中の人によく話を聞くべきだと思う。\n入学後、最初の論文を通すまで 自分は工学の中でも理論よりの分野出身であり、研究室は数学の中でも応用よりの分野だが、使用される数学は難解に感じられた。 はじめ、学部後半向けの教科書から地道に読んで必要な知識をキャッチアップしようとしたが、読むペースが遅すぎて、3年で成果を出すのは難しいと感じた。\nこのため、途中から勉強は適度にし、とにかく論文を調査して自分にも手が出せる切り口がないか探る方針に切り替えた。 出会った論文を1時間読んでみて「まるで何をしているか理解できない」と感じる時は、一旦保留にして次に進んだ。 そうするうちに、自分にもなんとかエッセンスを理解できる論文の数が増えていった。 あるとき、ある論文と別の論文でそれぞれ提案されている手法を組み合わせれば、拡張が可能な気がした。 このアイデアを先生に相談したところ、Goサインをもらうことができた。\n取り組んだテーマは、ある偏微分方程式に対する数値計算スキームの提案とその性能解析である。 計算スキームは既存の論文のアイデアの組み合わせであり、解析に難しい数学の概念は登場しない。 スキームの提案では解ける問題が工学問題として価値があることを強調し、解析においては細部にわたる慎重な式展開を心がけた（結果式番号は150を超えた）。 執筆中、先生には何度も助けを求め、社内の研究者にも助言いただいた。\n無事提出できた時には安堵したが、初回の査読が返ってきた時の絶望は今でも鮮明に覚えている。 難解すぎて批判の内容が理解できなかったのだ。 査読対応中は2日に1度先生と打ち合わせし、一から十まで指導を受けながら、何としても期日までの再提出を目指した。 結果、2度目の査読でのマイナーリビジョンを経て、アクセプトを勝ち取ることができた。\n博士論文の執筆まで 入学した研究科では、卒業要件に明確なアウトプットの基準が設けられておらず、慣例的に最低1本しっかりとした論文を通していればOKとされている（研究科によっては論文誌に3本以上採択などの条件があるため、慎重に確認すべきと思う）。 このため、1本目の論文の採択後は、より挑戦的な研究を実施することを意識した。\n1つに、数学と工学の間にあるギャップを考え、必ずしも数学解析が伴わない形でも解決策を提案する研究を実施した。 この内容は自分の従来の専門分野の雑誌に投稿し、スムーズにアクセプトをいただくことができた。\nもう1つに、より解くのが難しい方程式に対する計算スキームと数学解析を試みた。 結果は不完全なもので、一度投稿したがリジェクトだった。 その後内容を見直し、再投稿したが、現在査読中である。\n発展的な話題として、機械学習を取り入れた計算手法も提案した。 機械学習の最先端のトピックはレッドオーシャンだが、少し古典的な道具を使うことで、学んだ数学解析を活かした理論結果を導出できた。 このテーマは現在論文化に向けて準備中である。\n博士論文では、1本目の論文に加えて、上記の3つのテーマの内容を含めた。 内容に一貫性が欠ける懸念があったが、工学的な目標達成のための多様な手法を提案するという視点で構成した。 この取り組みが功を奏したといえ、発表後は先生方から好意的なコメントをいただけた。\n研究を進める上で、指導していただいた先生と、共研に関わった社内メンバーには大変お世話になり、本当に感謝してもしきれない。\nどのように生活したか 学位取得に向けた3年間、家庭・仕事・学業に折り合いをつけるために様々な方法を模索したが、結局うまくいかなかった。 特に初期は成果が出なかったため焦りが大きかったが、歯痒い思いをするたびに、優先順位は「1. 家庭、2. 仕事、3. 学業」だと自分に言い聞かせた。\nプライベートでは、以前に都内に転勤が決まり、東海地方の妻とは別居婚で生活している状態だった。 これに加えて、入学前に妻の出産というライフイベントを経験し、子どもという大きな不確定要素を抱えたまま挑戦が始まった。 3年間の生活はおおよそ以下の通りだった：\n1年目：妻の育休中、妻と子に都内に来てもらい3人で同居していた。自分は在宅と出社の半々で生活していた。\n2年目：妻の育休終了後、妻と子は東海の実家に戻り、妻は仕事に復帰し、子は保育園に入園した。自分は都内と妻の実家を2週間ごとに行き来する生活を送った。\n3年目：自分の転勤期間が終了後、東海に戻り妻の実家に同居させてもらった。自分は主に在宅勤務をしながら週一の頻度で出社し、月一の頻度で新幹線で通学した。\n各年度での生活を振り返ると、1年目は、特に妻のメンタルケアが課題だった。 地元から離れて周りに友人がおらず、毎日の子どもとの生活に気が滅入るようだった。 このため、週末は妻に休んでもらい、リフレッシュしてもらうようにお願いした。 この間、自分は子どもを連れていろんな場所に出かけたおかげで、都内の公園や百貨店の屋上などに詳しくなれた。\n家事について、平日の夕ご飯は妻に作ってもらい、それ以外は相談して決めていた。 自分が家にいる間は、オムツ交換・ミルク・お風呂・寝かしつけなどは率先してやるようにした。 食洗機・ロボット掃除機・ホットクック・Amazon Echo・Switch Botなど、時短の道具には惜しみなく投資した。","title":"博士号の授与が決まりました"},{"content":"概要 macでは修飾キーがcmdだけど、win, linuxにRDPした時はctrlであり、それぞれで押下するキーが異なるのがずっともどかしく思っていた。 また、macではkarabinerの設定で左cmdでIME off、右cmdでIME onにできていたが、RDP先ではうまく設定できずにいた。 ここに、愛用しているHHKBのキー配列が絡むので、問題がややこしくなっている。 今回重い腰を上げてキー設定を整えたので、メモしておく。\nできること コピペとかの修飾キーを全てtabの下のキーで、IMEオンオフを全てスペースバーの左右のキーで行えるようになる。 具体的には：\nmac内蔵キー caps lockをcmdにする 左右cmdキー空打ちで、IMEをオンオフする HHKB ctrlをcmdに、左cmdをctrlにする 置換されたctrl（ex左cmd）と右cmd空打ちで、IMEをオンオフする RDP接続時（全キーボード） cmdを全てctrlにする 置換された左右ctrl空打ちで、IMEをオンオフする 手順 mac本体のキーは変更せず、全ての設定をkarabiner-elementsで行う。\nまず、simple modificationsで画像のように変更する。\n次に、complex modificationsで、下記のようなjsonファイルを作成する：\n{ \u0026#34;description\u0026#34;: \u0026#34;my karabiner setting\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;conditions\u0026#34;: [ { \u0026#34;identifiers\u0026#34;: [ { \u0026#34;vendor_id\u0026#34;: 1452 } ], \u0026#34;type\u0026#34;: \u0026#34;device_if\u0026#34; }, { \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.2X\\\\.Client\\\\.Mac$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.macos$\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_unless\u0026#34; } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;left_command\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [ \u0026#34;any\u0026#34; ] } }, \u0026#34;parameters\u0026#34;: { \u0026#34;basic.to_if_held_down_threshold_milliseconds\u0026#34;: 100 }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_command\u0026#34;, \u0026#34;lazy\u0026#34;: true } ], \u0026#34;to_if_alone\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;japanese_eisuu\u0026#34; } ], \u0026#34;to_if_held_down\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_command\u0026#34; } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; }, { \u0026#34;conditions\u0026#34;: [ { \u0026#34;identifiers\u0026#34;: [ { \u0026#34;vendor_id\u0026#34;: 1278 } ], \u0026#34;type\u0026#34;: \u0026#34;device_if\u0026#34; }, { \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.2X\\\\.Client\\\\.Mac$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.macos$\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_unless\u0026#34; } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;left_control\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [ \u0026#34;any\u0026#34; ] } }, \u0026#34;parameters\u0026#34;: { \u0026#34;basic.to_if_held_down_threshold_milliseconds\u0026#34;: 100 }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_control\u0026#34;, \u0026#34;lazy\u0026#34;: true } ], \u0026#34;to_if_alone\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;japanese_eisuu\u0026#34; } ], \u0026#34;to_if_held_down\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_control\u0026#34; } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; }, { \u0026#34;conditions\u0026#34;: [ { \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.2X\\\\.Client\\\\.Mac$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.macos$\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_unless\u0026#34; } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;right_command\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [ \u0026#34;any\u0026#34; ] } }, \u0026#34;parameters\u0026#34;: { \u0026#34;basic.to_if_held_down_threshold_milliseconds\u0026#34;: 100 }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;right_command\u0026#34;, \u0026#34;lazy\u0026#34;: true } ], \u0026#34;to_if_alone\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;japanese_kana\u0026#34; } ], \u0026#34;to_if_held_down\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;right_command\u0026#34; } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; }, { \u0026#34;conditions\u0026#34;: [ { \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.macos$\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34; } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;left_command\u0026#34; }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_control\u0026#34; } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; }, { \u0026#34;conditions\u0026#34;: [ { \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.macos$\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34; } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;right_command\u0026#34; }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;right_control\u0026#34; } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; } ] } 使用するキーボードごとに挙動を変えるため、vendor_idによる条件分岐を行っている。 この数字はDeviceタブから確認できる。\nまた、RDPでは、ctrl左右空打ちでIMEのオンオフを切り替える、AutoHotKeyのスクリプトをバックグラウンドで実行しておく。 https://github.com/Miraium/ctrl-ime-ahk\n以上で目的を達成できる。\nまとめ mac内蔵、HHKB、RDP先のWinで、統一したキー入力が可能になった。\n不満として、HHKBでのctrlキーがスペースキーの隣になっているのは、慣れるのに時間がかかりそう。 また、mac内蔵キーボードでtab下のキーを空打ちした時もIMEがオフになるのも、ちょっと気持ち悪い。 あと、Winに直接ログインした時のIME on/offが統一されていない（滅多にしないけど）。 AutoHotKeyのスクリプトの書き方を勉強する必要がありそう。\n","permalink":"https://inody.github.io/posts/keysetting/","summary":"概要 macでは修飾キーがcmdだけど、win, linuxにRDPした時はctrlであり、それぞれで押下するキーが異なるのがずっともどかしく思っていた。 また、macではkarabinerの設定で左cmdでIME off、右cmdでIME onにできていたが、RDP先ではうまく設定できずにいた。 ここに、愛用しているHHKBのキー配列が絡むので、問題がややこしくなっている。 今回重い腰を上げてキー設定を整えたので、メモしておく。\nできること コピペとかの修飾キーを全てtabの下のキーで、IMEオンオフを全てスペースバーの左右のキーで行えるようになる。 具体的には：\nmac内蔵キー caps lockをcmdにする 左右cmdキー空打ちで、IMEをオンオフする HHKB ctrlをcmdに、左cmdをctrlにする 置換されたctrl（ex左cmd）と右cmd空打ちで、IMEをオンオフする RDP接続時（全キーボード） cmdを全てctrlにする 置換された左右ctrl空打ちで、IMEをオンオフする 手順 mac本体のキーは変更せず、全ての設定をkarabiner-elementsで行う。\nまず、simple modificationsで画像のように変更する。\n次に、complex modificationsで、下記のようなjsonファイルを作成する：\n{ \u0026#34;description\u0026#34;: \u0026#34;my karabiner setting\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;conditions\u0026#34;: [ { \u0026#34;identifiers\u0026#34;: [ { \u0026#34;vendor_id\u0026#34;: 1452 } ], \u0026#34;type\u0026#34;: \u0026#34;device_if\u0026#34; }, { \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.2X\\\\.Client\\\\.Mac$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.macos$\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_unless\u0026#34; } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;left_command\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [ \u0026#34;any\u0026#34; ] } }, \u0026#34;parameters\u0026#34;: { \u0026#34;basic.","title":"macOSでHHKBを使いながらwin機へRDPする時のキー設定"},{"content":"1月5日に博論を提出した。 まだ全然振り返る心境にはないけど、肩の荷が一つ下ろせた気分。 次は1月の後半の発表に向けて準備を進めなければいけない。\n博士を取れた後もしばらくやることが続く。\nまず、住居。 博士取得に専念するという目的のもと、今は会社のある愛知に物件を借りて、三重の妻の実家と行き来しつつ生活していたが、 これを一拠点に集約しなければいけない。 年末年始で妻とよく話し合い、愛知と三重の物件をそれぞれ見学したりしていたが、今の妻の実家からご両親が移動しそうなことがわかり、じゃあこのままここに住み続ければいいだろう、となったのが今日までの判断。 ただそうなると通勤時間が2時間半となり、いつまで在宅勤務を全力活用できるのか不安でもある。 また4月までに状況が変わっているかもしれない。\n次に転職活動。 前々から学位取得したらやってみたいと思っていた。 今の職場に不満は全くない。 こんなに自由でおおらかに仕事ができる職場は全国を見てもかなり少ないはず。 しかし上記のように生活の基盤が揺らいでいることからも、いっそ気分を変えて都内とかに引っ越してもいいのでは、という気分になっている。 とりあえず年末にエージェントサイトに登録して、2人のエージェントとリモートで話をしてみた。 しかし全然気持ちが傾かないのは、今の職場が好きだからなんだろうな、とも思う。 優先順位は低いけど、マイペースで続けていきたい。\n最後に新しい研究テーマの探索。 次年度から職場でのチームが変わり、新規のテーマに取り組む必要がある。 ここ数年、博士取得と関連づけたテーマに注力していたこともあり、新テーマの起案は久しぶり。 じっくり色々考えているけど、どうもいいテーマが思いつかない。 これまでのパターンとして、心の琴線に触れる研究とエンカウントするまでひたすら論文を読みあさっていたことを、最近ようやく思い出した。 年末年始にいくつか読む時間ができたので、ぼんやり形が見えてきているところ。 職場の最強研究者軍団に相談しながら、テーマを固めていきたい。\n2023年は博士取得という長いトンネルの出口がようやく見えた年だった。 2024年は公私ともに新しい取り組みが増えそうで、不安と期待とが入り混ざっている。 家族を大事にすること、楽しむことを優先して、自分のペースで取り組んでいきたい。\n","permalink":"https://inody.github.io/posts/submit_thesis/","summary":"1月5日に博論を提出した。 まだ全然振り返る心境にはないけど、肩の荷が一つ下ろせた気分。 次は1月の後半の発表に向けて準備を進めなければいけない。\n博士を取れた後もしばらくやることが続く。\nまず、住居。 博士取得に専念するという目的のもと、今は会社のある愛知に物件を借りて、三重の妻の実家と行き来しつつ生活していたが、 これを一拠点に集約しなければいけない。 年末年始で妻とよく話し合い、愛知と三重の物件をそれぞれ見学したりしていたが、今の妻の実家からご両親が移動しそうなことがわかり、じゃあこのままここに住み続ければいいだろう、となったのが今日までの判断。 ただそうなると通勤時間が2時間半となり、いつまで在宅勤務を全力活用できるのか不安でもある。 また4月までに状況が変わっているかもしれない。\n次に転職活動。 前々から学位取得したらやってみたいと思っていた。 今の職場に不満は全くない。 こんなに自由でおおらかに仕事ができる職場は全国を見てもかなり少ないはず。 しかし上記のように生活の基盤が揺らいでいることからも、いっそ気分を変えて都内とかに引っ越してもいいのでは、という気分になっている。 とりあえず年末にエージェントサイトに登録して、2人のエージェントとリモートで話をしてみた。 しかし全然気持ちが傾かないのは、今の職場が好きだからなんだろうな、とも思う。 優先順位は低いけど、マイペースで続けていきたい。\n最後に新しい研究テーマの探索。 次年度から職場でのチームが変わり、新規のテーマに取り組む必要がある。 ここ数年、博士取得と関連づけたテーマに注力していたこともあり、新テーマの起案は久しぶり。 じっくり色々考えているけど、どうもいいテーマが思いつかない。 これまでのパターンとして、心の琴線に触れる研究とエンカウントするまでひたすら論文を読みあさっていたことを、最近ようやく思い出した。 年末年始にいくつか読む時間ができたので、ぼんやり形が見えてきているところ。 職場の最強研究者軍団に相談しながら、テーマを固めていきたい。\n2023年は博士取得という長いトンネルの出口がようやく見えた年だった。 2024年は公私ともに新しい取り組みが増えそうで、不安と期待とが入り混ざっている。 家族を大事にすること、楽しむことを優先して、自分のペースで取り組んでいきたい。","title":"博士論文を提出しました"},{"content":"Preprint Daisuke Inoue, Yuji Ito, Takahito Kashiwabara, Norikazu Saito, Hiroaki Yoshida, \u0026ldquo;Convergence Analysis of the Upwind Difference Methods for Hamilton-Jacobi-Bellman Equations,\u0026rdquo; January 18, 2023, (link). Journal (Refereed) D. Inoue, Y. Ito, T. Kashiwabara, N. Saito, and H. Yoshida, \u0026ldquo;Partially Centralized Model-Predictive Mean Field Games for Controlling Multi-Agent Systems,\u0026rdquo; IFAC Journal of Systems and Control, vol. 24, p. 100217, 2023 (link) D. Inoue, Y. Ito, T. Kashiwabara, N. Saito, and H. Yoshida, \u0026ldquo;A fictitious-play finite-difference method for linearly solvable mean field games,\u0026rdquo; ESAIM: Mathematical Modelling and Numerical Analysis (ESAIM: M2AN), vol. 57, no. 4, Art. no. 4, Jul. 2023 (link) A. Okada, D. Inoue, S. Koyama, T. Matsumori, and H. Yoshida, \u0026ldquo;Dynamical Cooperation Model for Mitigating the Segregation Phase in Schelling’s Model.\u0026rdquo; The European Physical Journal B, 2022, 95, no. 10. (link) S. Koyama, D. Inoue, A. Okada, and H. Yoshida, \u0026ldquo;Electro-osmotic diode based on colloidal nano-valves between double membranes,\u0026rdquo; Phys. Rev. Research, 2021, 3, 033289. (link) D. Inoue, A. Okada, T. Matsumori, K. Aihara, and H. Yoshida, \u0026ldquo;Traffic Signal Optimization on a Square Lattice with Quantum Annealing,\u0026rdquo; Scientific Reports, 2021, 11, 3303. (link). D. Inoue, Y. Ito, and H. Yoshida, \u0026ldquo;Optimal Transport-based Coverage Control for Swarm Robot Systems: Generalization of the Voronoi Tessellation-based Method,\u0026rdquo; IEEE Control Systems Letters, 2021, Vol. 5, Issue 4. (link) S. Koyama, D. Inoue, A. Okada, and H, Yoshida, \u0026ldquo;Separation of pedestrian counter flows with an array of obstacles,\u0026rdquo; Artificial Life and Robotics 25, 2020, 529–536. (link) S. Koyama, D. Inoue, A. Okada, and H. Yoshida, \u0026ldquo;Membranes for spontaneous separation of pedestrian counterflows,\u0026rdquo; EPL (Europhysics Letters), 2020, Vol. 129, Issue 5. (link) D. Inoue and H. Yoshida, \u0026ldquo;Model Predictive Control for Finite Input Systems using the D-Wave Quantum Annealer,\u0026rdquo; Scientific Reports, 2020, 10, 1. (link) D. Inoue, D. Murai, Y. Ikuta, and H. Yoshida, \u0026ldquo;Distributed Range-based Localization and Control for Swarm Robot Systems,\u0026rdquo; Sensors \u0026amp; Transducers, 2019, Vol. 236, Issue 8, pp. 16-27. (link) 井上 大輔, 東 俊一, 杉江 俊治, ネットワーク化単調システムの安定性解析, 計測自動制御学会論文集, 2017, 53 巻, 9 号, pp. 493-500. (link) 井上 大輔, 東 俊一, 杉江 俊治, 量子化観測を伴う移動ロボットシステムのランデブー制御, システム制御情報学会論文誌, 2016, 29 巻, 7 号, pp. 311-317. (link) 加嶋 健司, 井上 大輔, ネットワーク化制御系における確率雑音の白色化効果と非再現性の同時活用, 計測自動制御学会論文集, 2014, 50 巻, 10 号, pp. 712-720. (link) Conference (Refereed) T. Miyano, Y. Ito, D. Inoue, S. Koide, and T. Hatanaka, \u0026ldquo;Stability Analysis of Logit Dynamics with Committed Minority and Internal/External Conformity Biases,\u0026rdquo; Proc. 22nd IFAC World Congress, Yokohama, Japan, July 9-14, to appear, 2023. D. Inoue, Y. Ito, T. Kashiwabara, N. Saito, and H. Yoshida, \u0026ldquo;Model Predictive Mean Field Games for Controlling Multi-Agent Systems,\u0026rdquo; IEEE International Conference on Systems, Man, and Cybernetics 2021 (SMC 2021), Melbourne, Australia, 2021. (link) D. Inoue, Y. Ito, and H. Yoshida, \u0026ldquo;Optimal Transport-based Coverage Control for Swarm Robot Systems: Generalization of the Voronoi Tessellation-based Method,\u0026rdquo; American Control Conference 2021 (ACC 2021), New Orleans, USA, 2021. (link) S. Koyama, D. Inoue, A. Okada, and H. Yoshida, \u0026ldquo;Separation of Pedestrian Counter Flows with an Array of Obstacles,\u0026rdquo; The 3rd International Symposium on Swarm Behavior and Bio-Inspired Robotics (SWARM2019), Okinawa, Japan, pp. 314-318, 2019. (link) D. Inoue, D. Murai, and H. Yoshida, \u0026ldquo;Stochastic Self-Organizing Control for Swarm Robot Systems,\u0026rdquo; The Tenth International Conference on Swarm Intelligence (ICSI 2019), Chiang Mai, Thailand, pp. 405-416, 2019. (link) D. Inoue, D. Murai, Y. Ikuta, and H. Yoshida, \u0026ldquo;Distributed Range-based Localization for Swarm Robot Systems using Sensor-Fusion Technique,\u0026rdquo; SENSORNETS 2019, Prague, Czech Republic, pp. 13 - 22, 2019. (link) K. Kashima and D. Inoue, \u0026ldquo;Replay attack detection in control systems with quantized signals,\u0026rdquo; 2015 European Control Conference (ECC), Linz, pp. 782-787, 2015. (link) K. Kashima and D. Inoue, \u0026ldquo;Stationary performance evaluation of control systems with random dither quantization,\u0026rdquo; 2014 European Control Conference (ECC), Strasbourg, pp. 1625-1630, 2014. (link) Conference (Unrefereed) 井上 大輔, 大規模マルチエージェントシステムの制御のための平均場モデルとその数値計算, 九州大学IMI研究集会「数値解析と機械学習の協同が拓く新時代の数理科学」, 2023 井上 大輔, 伊藤 優司, 吉田 広顕, 柏原 崇人, 齊藤 宣一, 平均場ゲーム方程式に対する繰り返し差分法とマルチエージェント制御問題への応用, 京都大学RIMS研究集会「新時代における高性能科学技術計算法の探究」, 2023 井上 大輔, 伊藤 優司, 吉田 広顕, 柏原 崇人, 齊藤 宣一, 平均場ゲーム方程式のCole-Hopf変換とFictitious Play反復による数値計算, 日本応用数理学会2022年度年会, 2022 井上 大輔, 量子アニーリングマシンを用いた大規模都市での信号制御, 第69回応用物理学会春季学術講演会, 2022（分科内招待公演） 井上 大輔, 量子アニーリングマシンを用いた大規模都市での信号制御, 量子コンピューティング技術シンポジウム2021 (link) 井上 大輔, 伊藤 優司, 吉田 広顕, 柏原 崇人, 齊藤 宣一, Hamilton-Jacobi-Bellman方程式に対する風上差分法の収束証明, 日本応用数理学会2021年度年会, 2021 井上 大輔, 東 俊一, 杉江 俊治, ネットワーク化単調システムの安定性解析 , 第59回自動制御連合講演会, 2016 （優秀発表賞受賞） 井上 大輔, 加嶋 健司, ディザを有する制御系におけるリプレイアタック 検出, 第58回システム制御情報学会研究発表講演会, 2014 （研究奨励賞受賞） 井上 大輔, 加嶋 健司, ディザを有する制御系の定常特性解析 II：リプレイアタック検出, 第1回制御部門マルチシンポジウム , 2014 （制御部門研究奨励賞受賞） 井上 大輔, 加嶋 健司, ディザを有する制御系の定常特性解析 I: 不変確率測度の近似計算 , 第1回制御部門マルチシンポジウム , 2014 Patent 井上 大輔, 演算装置、演算システム、演算方法、およびコンピュータプログラム, 7040505号 Media listing D-Wave Systems Inc. Toyota Central R\u0026amp;D Labs: A Quantum Approach to Transportation 東京大学 量子コンピュータにより大規模信号機群を制御する最適化技術の開発に成功 日本経済新聞 東大と豊田中央研究所、量子コンピュータを用いて大規模信号機群を制御する最適化技術を開発 日刊工業新聞 豊田中央研、量子コンピューターで信号機群制御　車両の流れやすさ10％向上 Yahooニュース 量子コンピューターの一種で渋滞緩和を目指す。都市全体の信号機制御を最適化 Awards Repayment Exemption for Students with Excellent Grades, Japan Student Services Organization (2017, Jun) Best presentation award at The 59th Japan Automatic Control Conference, The Society of Instrument and Control Engineer (2016 Nov) Research Encouragement Award on The 58th Annual Conference of the Institute of Systems, Control and Information Engineers, The Institute of Systems, Control and Information Engineers (2015 Jun) Research Encouragement Award on The 1st Multi-symposium on Control Systems, The Society of Instrument and Control Engineers (2014 Mar) Grants Vulcanus in Europe 2015 (15, 540 dollars), Selected students get to go to Europe to study the local language, and to have a working experience at EU-Japan Centre for Industrial Cooperation in Institute for International Studies and Training ","permalink":"https://inody.github.io/publication/","summary":"Preprint Daisuke Inoue, Yuji Ito, Takahito Kashiwabara, Norikazu Saito, Hiroaki Yoshida, \u0026ldquo;Convergence Analysis of the Upwind Difference Methods for Hamilton-Jacobi-Bellman Equations,\u0026rdquo; January 18, 2023, (link). Journal (Refereed) D. Inoue, Y. Ito, T. Kashiwabara, N. Saito, and H. Yoshida, \u0026ldquo;Partially Centralized Model-Predictive Mean Field Games for Controlling Multi-Agent Systems,\u0026rdquo; IFAC Journal of Systems and Control, vol. 24, p. 100217, 2023 (link) D. Inoue, Y. Ito, T. Kashiwabara, N. Saito, and H. Yoshida, \u0026ldquo;A fictitious-play finite-difference method for linearly solvable mean field games,\u0026rdquo; ESAIM: Mathematical Modelling and Numerical Analysis (ESAIM: M2AN), vol.","title":"Publications"},{"content":"Daisuke Inoue is a researcher at Toyota Central R\u0026amp;D Labs,. Inc. He received a B.E. degree in engineering from Osaka University in 2014 and an M.S. degree in informatics from Kyoto University in 2017. He received a Ph.D. degree in mathematical science from the University of Tokyo in 2024. His current research interests include control engineering, multi-agent systems, and swarm intelligence.\nIf you are interested in my research, please feel free to contact me!\nWork Experience 2017 Apr – Present: Toyota Central R\u0026amp;D Labs., Inc. in Aichi, Japan Numerical methods for PDEs arising in optimal control problems Controller design for very large-scale systems Exploring applications of quantum annealing machines for control engineering etc\u0026hellip; 2016 July – 2017 Mar: Kyoto University in Kyoto, Japan Teaching Assistant of Complex Analysis Class 2015 July – 2016 Mar: Siemens Industry Software N.V in Leuven, Belgium Motion Controller Design for Airbus A330 based on 1-D \u0026amp; 3-D Co-simulation 2014 July: Mitsubishi Heavy Industries, Ltd. in Kobe, Japan Development of a Nuclear Power Plant Simulator Education 2021 Apr - Present: Ph.D. student at Graduate School of Mathematical Sciences, the University of Tokyo 2014 Apr – 2017 Mar: Master of Informatics at Graduate School of Informatics, Kyoto University Thesis: Stability Analysis of Networked Monotone Systems 2010 Apr – 2014 Mar: Bachelor of Engineering at Department of Engineering Science, Osaka University Thesis: Stationary performance evaluation of control systems with random dither quantization Skills General Programming: Python, C, C++, Julia, Matlab Operating System: Windows, macOS, Linux (Debian, Ubuntu) Embedded System: Raspberry Pi, Arduino, Simulink, ROS Numerical Methods: FreeFEM++, FEniCS Optimization: Gurobi, D-Wave Language: Japanese, English ","permalink":"https://inody.github.io/biography/","summary":"Daisuke Inoue is a researcher at Toyota Central R\u0026amp;D Labs,. Inc. He received a B.E. degree in engineering from Osaka University in 2014 and an M.S. degree in informatics from Kyoto University in 2017. He received a Ph.D. degree in mathematical science from the University of Tokyo in 2024. His current research interests include control engineering, multi-agent systems, and swarm intelligence.\nIf you are interested in my research, please feel free to contact me!","title":"About me"},{"content":"I am interested in modeling and control of large-scale dynamical systems. The followings are descriptions of some of the published research topics I have worked on.\nControlling population dynamics using mean-field games (2019 \u0026ndash; Present) When controlling a large system, the larger the number of control targets, the longer it takes to compute the appropriate control inputs. To address this problem, we focus on a concept called the mean-field game, which approximates the optimal control system for a large number of populations. In mean-field games, \u0026ldquo;one-to-one\u0026rdquo; interactions are approximated as \u0026ldquo;one-to-population,\u0026rdquo; which leads to a reduction in computational complexity. Meanwhile, the mean-field game itself is also a system of equations that is difficult to solve in ordinary calculations, so it is necessary to develop a sophisticated numerical method. We investigate methods to numerically compute these mean-field games with high speed and high accuracy.\nAnimation of a group of 1000 agents controlled by the proposed control law. Each agent moves from bottom-left to top-right to minimize its associated cost function.\nReference D. Inoue, Y. Ito, T. Kashiwabara, N. Saito, and H. Yoshida, \u0026ldquo;Model Predictive Mean Field Games for Controlling Multi-Agent Systems,\u0026rdquo; IEEE International Conference on Systems, Man, and Cybernetics (SMC), 2021\nControlling population dynamics using optimal transport (2020 \u0026ndash; Present) The problem of transporting a distributed object from one location to another with minimum cost is called the optimal transport problem. Although optimal transport is an old concept, its connection to control engineering is relatively new. We proposed a new control method by revisiting the multi-agent covering control problem with the concept of optimal transport. This method is an extension of existing methods in the sense that it is equivalent to existing covering control methods by fixing certain parameters. Numerical calculations show that the proposed method is superior to the existing method in terms of covering performance.\nAnimation of a group of 25 agents controlled by the proposed control law. The black dots represent the positions of the agents.\nReference D. Inoue, Y. Ito, and H. Yoshida, \u0026ldquo;Optimal Transport-based Coverage Control for Swarm Robot Systems: Generalization of the Voronoi Tessellation-based Method,\u0026rdquo; in IEEE Control Systems Letter, 2020\nControl applications of quantum computers (2018 \u0026ndash; Present) Recently, a new variant of quantum computers, called quantum annealing machines, has begun to be used commercially. Although its performance as a computer is not yet satisfactory, it is expected to improve in the future. Since annealing machines are limited in the form of problems they can solve, we are studying the transformation of seemingly unsolvable problems into solvable forms with approximations and variable transformations. We have proposed methods for solving model predictive control and traffic signal control problems using such transformations and have shown that the proposed methods are superior to some classical methods.\nAnimation of traffic lights at each intersection of a grid city, controlled by a quantum annealing machine. Red indicates that the intersection allows north-south traffic, and blue indicates that the intersection allows north-south traffic.\nReferences D. Inoue, H. Yoshida, \u0026ldquo;Model Predictive Control for Finite Input Systems using the D-Wave Quantum Annealer\u0026rdquo;, Scientific Reports, 10(1), 2020\nD. Inoue, A. Okada, T, Matsumori, K. Aihara, H. Yoshida, \u0026ldquo;Traffic Signal Optimization on a Square Lattice with Quantum Annealing\u0026rdquo;, Scientific Reports, 11, 3303, 2021\nStochastic control of populations learned from living organisms (2018 \u0026ndash; Present) Organisms that are supposed to have no intelligence, such as ants and E. coli, can exhibit surprisingly intelligent behavior as a group. We are studying control algorithms that mimic the behavior of such organisms. In particular, we are developing a method to make agents act stochastically so that the group can form a desired shape.\nAnimation of 5,000 agents moving with the proposed method. Each agent only moves stochastically according to a simple algorithm, but they form an arbitrary shape as a group.\nReference D. Inoue, D. Murai, and H. Yoshida, \u0026ldquo;Stochastic Self-Organizing Control for Swarm Robot Systems\u0026rdquo;, The Tenth International Conference on Swarm Intelligence (ICSI 2019), Chiang Mai, pp. 405-416, 2019.\nStability analysis of monotone systems (2015 \u0026ndash; 2017) The study of whether a system has a unique stable equilibrium point for all initial values is called a global stability analysis. This is easy to do when the system is linear, but it becomes extremely difficult when the system is nonlinear. Meanwhile, nonlinear systems such as biological population models and gene network models have a property called monotonicity, which allows us to determine their global stability by using a tool called the fixed point theorem. Previously, the global stability of systems with multiple interacting monotone systems has not been thoroughly analyzed. We have used techniques such as graph contraction to provide sufficient conditions of stability for some classes of these systems.\nReference 井上 大輔, 東 俊一, 杉江 俊治, ネットワーク化単調システムの安定性解析, 計測自動制御学会論文集, 2017, 53 巻, 9 号, pp. 493-500\nPerformance analysis of dithered quantized systems (2014 \u0026ndash; 2016) When sensors and actuators in a control system have a low resolution or when communication capacity is limited, continuous-valued signals are forcibly approximated to discrete-valued signals, which leads to performance degradation. Approximation to discrete values is called quantization, and it is known that performance can be slightly improved by intentionally applying a random number before quantization, which is called dither quantization. Although the improvement achieved by dither quantization has only been quantified experimentally, we have characterized this performance as the solution of a simple algebraic equation, using a technique called stochastic linearization.\nReferences K. Kashima and D. Inoue, \u0026ldquo;Replay attack detection in control systems with quantized signals,\u0026rdquo; 2015 European Control Conference (ECC), Linz, pp. 782-787, 2015.\nK. Kashima and D. Inoue, \u0026ldquo;Stationary performance evaluation of control systems with random dither quantization,\u0026rdquo; 2014 European Control Conference (ECC), Strasbourg, pp. 1625-1630, 2014.\n","permalink":"https://inody.github.io/research/","summary":"I am interested in modeling and control of large-scale dynamical systems. The followings are descriptions of some of the published research topics I have worked on.\nControlling population dynamics using mean-field games (2019 \u0026ndash; Present) When controlling a large system, the larger the number of control targets, the longer it takes to compute the appropriate control inputs. To address this problem, we focus on a concept called the mean-field game, which approximates the optimal control system for a large number of populations.","title":"Research"},{"content":"先ほど全ての荷物が搬出され、荷物より少し先に名古屋に新幹線で向かっている最中。 一つ前の記事でも書いたけど、「賑わい」のある東京を離れるのは正直名残惜しい。 またいつかチャンスがあれば滞在したいと思う。\n東京での一番の進捗は、博士課程を始められたことだ。 慣れない数学分野での挑戦は、とても不安だったし、今も周りの凄すぎるプレイヤーに萎縮する一方だけど、大学と会社の両方に相談相手がいるおかげで、ジリジリと前に進むことができていると思う。 経済的な心配が薄いのと、困ったら社内の仕事に切り替えて気分転換できるのは、社会人博士ならではの強みだ。 相変わらず時間は全然足りないけど。 嬉しいニュースとして、先日ようやくちゃんとした雑誌に論文を通すことができた。 あと1本投稿中の原稿は、卒業までに決着させたいし、今進めているアイデアも投稿までは漕ぎ着けたい。\nしばらくは新居を拠点に、愛知の本社、東京の研究室、三重の妻の実家の3箇所を行き来する生活を送ることになりそう。 いろいろなことが少しずつ不安だけど、これまでも何とかなったし、これからも何とかなるはず。 未来はきっと明るい。\n","permalink":"https://inody.github.io/posts/bye_tokyo/","summary":"先ほど全ての荷物が搬出され、荷物より少し先に名古屋に新幹線で向かっている最中。 一つ前の記事でも書いたけど、「賑わい」のある東京を離れるのは正直名残惜しい。 またいつかチャンスがあれば滞在したいと思う。\n東京での一番の進捗は、博士課程を始められたことだ。 慣れない数学分野での挑戦は、とても不安だったし、今も周りの凄すぎるプレイヤーに萎縮する一方だけど、大学と会社の両方に相談相手がいるおかげで、ジリジリと前に進むことができていると思う。 経済的な心配が薄いのと、困ったら社内の仕事に切り替えて気分転換できるのは、社会人博士ならではの強みだ。 相変わらず時間は全然足りないけど。 嬉しいニュースとして、先日ようやくちゃんとした雑誌に論文を通すことができた。 あと1本投稿中の原稿は、卒業までに決着させたいし、今進めているアイデアも投稿までは漕ぎ着けたい。\nしばらくは新居を拠点に、愛知の本社、東京の研究室、三重の妻の実家の3箇所を行き来する生活を送ることになりそう。 いろいろなことが少しずつ不安だけど、これまでも何とかなったし、これからも何とかなるはず。 未来はきっと明るい。","title":"さらば東京"},{"content":"先日、会社から愛知に戻るよう内示を受けた。 こちらに転勤してきて4年、そろそろかな、と心構えをしていたつもりだったが、意外と動揺する自分を発見した。\n自分は大学に入るまでの18年間を北陸の地方都市で過ごし、その後大学で大阪、大学院で京都、就職で愛知、転勤で東京、と約3年ごとに拠点を移してきた。 特定の土地に思い入れがあることに気づいたのは、京都の大学を卒業して愛知に就職した時だった。 就活をしていた当時は留学から帰ってきた直後ということもあり、日本食が食べられるのならどこでも、という感じだったのだが、就職してから思いの外京都を懐かしく感じることに気づいた。 そして帰任準備を始める今も、すでにこの地を離れがたい気持ちになっている。\n毎日の生活はどこにいても大差ないはずなのに、何が違うのだろうか。 自分はその土地の何が好きだったんだろうか。 思いつく点を挙げてみる。\n水辺であること。野生動物のようで認めたくないが、自分は川や湖の近くに住むとテンションが上がるらしい。京都は鴨川、東京は神田川や、愛知は堀川（伏見）がお気に入りだった。 公園があること。1. と関わるが、緑や事前を適度に感じる場所が必要。東京に来て驚いたのがこの点。これまで住んできたどの街より、公園が充実していた。 歩行者が多いこと。移動を目的とした人でなく、移動自体を楽しんでいる人が往来している場所が好き。観光地はもちろんだが、商店街に魅力を感じる。 公共交通機関とのアクセスが良いこと。自分は運転が苦手であり、近場からバスや電車に乗って、外をぼんやり眺めながら移動するのが好き。車での移動を前提とした愛知の暮らしはあまりしっくり来なかった。 友達がいること。関東にも関西にも、数は少ないが学生時代の友人がおり、折につけて会うことができる。残念ながら愛知には会社の知り合い以外に気軽に会える人がおらず、家族以外の人間関係が希薄である。 以上を一言でまとめると「賑わいのある街」になるだろうか。 自分は人見知りの部類であり、あまり親しくない知人と会う予定があると、気疲れしてしまう。 こうした気質から不足する他人との繋がりを、人が往来する街を歩くことで、都合よく実感しようとしているのかもしれない。\n愛知に戻るのは少し残念だが、仕事の内容は楽しいし、勤務地を理由に会社を辞めることはない。 引っ越しにあたっては、上記の点がなるべく満たされるような場所を選びたい。\n","permalink":"https://inody.github.io/posts/relocation/","summary":"先日、会社から愛知に戻るよう内示を受けた。 こちらに転勤してきて4年、そろそろかな、と心構えをしていたつもりだったが、意外と動揺する自分を発見した。\n自分は大学に入るまでの18年間を北陸の地方都市で過ごし、その後大学で大阪、大学院で京都、就職で愛知、転勤で東京、と約3年ごとに拠点を移してきた。 特定の土地に思い入れがあることに気づいたのは、京都の大学を卒業して愛知に就職した時だった。 就活をしていた当時は留学から帰ってきた直後ということもあり、日本食が食べられるのならどこでも、という感じだったのだが、就職してから思いの外京都を懐かしく感じることに気づいた。 そして帰任準備を始める今も、すでにこの地を離れがたい気持ちになっている。\n毎日の生活はどこにいても大差ないはずなのに、何が違うのだろうか。 自分はその土地の何が好きだったんだろうか。 思いつく点を挙げてみる。\n水辺であること。野生動物のようで認めたくないが、自分は川や湖の近くに住むとテンションが上がるらしい。京都は鴨川、東京は神田川や、愛知は堀川（伏見）がお気に入りだった。 公園があること。1. と関わるが、緑や事前を適度に感じる場所が必要。東京に来て驚いたのがこの点。これまで住んできたどの街より、公園が充実していた。 歩行者が多いこと。移動を目的とした人でなく、移動自体を楽しんでいる人が往来している場所が好き。観光地はもちろんだが、商店街に魅力を感じる。 公共交通機関とのアクセスが良いこと。自分は運転が苦手であり、近場からバスや電車に乗って、外をぼんやり眺めながら移動するのが好き。車での移動を前提とした愛知の暮らしはあまりしっくり来なかった。 友達がいること。関東にも関西にも、数は少ないが学生時代の友人がおり、折につけて会うことができる。残念ながら愛知には会社の知り合い以外に気軽に会える人がおらず、家族以外の人間関係が希薄である。 以上を一言でまとめると「賑わいのある街」になるだろうか。 自分は人見知りの部類であり、あまり親しくない知人と会う予定があると、気疲れしてしまう。 こうした気質から不足する他人との繋がりを、人が往来する街を歩くことで、都合よく実感しようとしているのかもしれない。\n愛知に戻るのは少し残念だが、仕事の内容は楽しいし、勤務地を理由に会社を辞めることはない。 引っ越しにあたっては、上記の点がなるべく満たされるような場所を選びたい。","title":"愛知に戻ります"},{"content":"買ってしまいました、E-M1 mark iii。\nよかった点 AFが早い！令和の世に位相差AFを初体験して感動した。 動画が綺麗！クロップなし4Kは使いやすい。ホームビデオ目的だとlog撮影は面倒だし、30p 8bitで全然十分に感じる。 UIがサクサク！E-M5 mark iiは撮れた画像を消去するのにちょっと時間がかかっていたが、本機種では一瞬で消去できるのがストレスフリー。 いまいちだった点 流石にこっちに向かってくる子供をC-AFで連写してもピントが全部合う感じではなかった。この辺SonyやCanonはすごいんだろうなー。 画質はE-M5 mark iiと変化なし。いまだにFujiのフィルムシミュレーションについての解説記事とか読んじゃう。 ショット数を調べると50000回超えてた。キタムラの状態Aを信用して買ったので、ちょっとショックだった。外観は説明通り無傷なので致し方なしか。 懸案事項 以前は撮れた写真はプライベートな順に、iCloudの共有アルバム、Facebook、Tumblrにアップしてたが、最近は後者2つは使わなくなってしまった。 Facebookの代わりにインスタに上げたりもたまにしてるんだけど、正方形クロップにいまだに抵抗がある：調べたらアスペクト比は変えられるんですね。情弱の極み。 ブログ機能をこのサイトに移管したつもりだが、ストレージ容量に限りがあるため（1GB?）、写真は引き続きTumblrに上げていっても良い気もする 総じていい買い物をしたと思います。\n","permalink":"https://inody.github.io/posts/buy-camera/","summary":"買ってしまいました、E-M1 mark iii。\nよかった点 AFが早い！令和の世に位相差AFを初体験して感動した。 動画が綺麗！クロップなし4Kは使いやすい。ホームビデオ目的だとlog撮影は面倒だし、30p 8bitで全然十分に感じる。 UIがサクサク！E-M5 mark iiは撮れた画像を消去するのにちょっと時間がかかっていたが、本機種では一瞬で消去できるのがストレスフリー。 いまいちだった点 流石にこっちに向かってくる子供をC-AFで連写してもピントが全部合う感じではなかった。この辺SonyやCanonはすごいんだろうなー。 画質はE-M5 mark iiと変化なし。いまだにFujiのフィルムシミュレーションについての解説記事とか読んじゃう。 ショット数を調べると50000回超えてた。キタムラの状態Aを信用して買ったので、ちょっとショックだった。外観は説明通り無傷なので致し方なしか。 懸案事項 以前は撮れた写真はプライベートな順に、iCloudの共有アルバム、Facebook、Tumblrにアップしてたが、最近は後者2つは使わなくなってしまった。 Facebookの代わりにインスタに上げたりもたまにしてるんだけど、正方形クロップにいまだに抵抗がある：調べたらアスペクト比は変えられるんですね。情弱の極み。 ブログ機能をこのサイトに移管したつもりだが、ストレージ容量に限りがあるため（1GB?）、写真は引き続きTumblrに上げていっても良い気もする 総じていい買い物をしたと思います。","title":"カメラを買った"},{"content":"学生時代はPentaxのK-30とK-S1を使っていた。 選んだ理由はシンプルにカタログスペック上のコスパが良いと感じたから。 実際使ってみると、旅行先で風景写真を撮るなどの用途には不満を感じなかった。\n就職してから妻（当時の彼女）がOlympusのカメラを購入するのを横目に眺め、マイクロフォーサーズのコンパクトさとミラーレスカメラの充実した機能を羨ましく思うようになり、気づけば自分も同じマウントでE-M5 mark IIを購入していた。 レンズは12-40mm F2.8を使っていて、後から軽さと明るさを求めてPanasonicの25mm F1.4を買い足した。\n子どもが生まれて、元気に歩き回るまで成長してから、E-M5 mark IIのAFに不満を感じるようになった。 2022現在、OlympusはOMDSに名前を変え、OM-1やOM-5など新しいカメラを手掛けていた。 そこまでお金に余裕があるわけではないが、これら同一メーカーの機種だけでなく、他のメーカーへの乗り換えも検討してみることにした。 なお、APS-Cとフルサイズでマウントを共用しているC, N, S社は、AF性能で比べると間違いなく筆頭候補だが、予算的に許容できるAPS-Cを買うと、将来フルサイズへのコンプが刺激されそうで怖いので、見送ることにした。\n評価ポイントとして、E-M5での不満点を考慮し、下記を評価してみることにした。\nAF: 動体（子ども）が合わない。コントラストAFであることに原因がある気がする。 絵作り: 大きな不満があるわけではないが、ちょっと飽きてきている。PanaやFujiの記憶色的な絵作りに興味がある。 操作性: 設定項目が分かりづらい。タッチパネルなども限定的にしか使えない。 運搬性: これは現状不満があるわけではないが、乗り換えの際にあまり重くなってほしくない。 動画: 以前旅行の際初めて外付けマイクで挑戦したが、Full HDの画質がスマホより悪かったのと、30分制限が不満だった。 以上の不満点が買い替えによってどこまで改善しそうか、独断と偏見で点をつけてみることにした。\n機種 価格 AF 絵作り 操作性 運搬性 動画機能 総合 E-M5 mark iii 10 5 5 4 8 5 37 OM-5 6 6 5 4 8 7 36 E-M1 mark iii 8 8 5 7 7 6 41 OM-1 2 9 5 6 7 8 35 G99 9 4 7 8 6 7 41 G9 9 5 7 7 2 9 39 GH5m2 3 6 7 8 4 10 38 X-T5 1 6 10 4 6 10 37 X-S10 3 6 10 4 7 8 38 評価軸ごとにコメントすると、\n買い替えのきっかけであるAFは、OMDS\u0026gt;Fuji\u0026gt;Panaの順だと感じた。コントラストAFも最近は速いと聞いたが、G9のAFを店頭で確認してみると、AF-Cを試すと合焦後にウォブリングが発生してしまっていた。コントラストAFの仕組み上これは避けられないっぽい。 絵作りはFuji\u0026gt;Pana\u0026gt;OMDSの順に好みだった。OMDSは悪いわけではないが、趣味で使う分には記憶色に近い方が好ましい。Raw現像をするまで時間をかけていない自分にとって、撮って出しでいい感じになるFujiのフィルムシミュレーションは羨ましい。またAPS-Cだと大きなボケを表現できるのも良い。 操作性は、Pana\u0026gt;OMDS\u0026gt;Fujiの順だと感じた。E-M5で慣れていたが、やはりOMDSのメニューはどこに何があるのか分かりづらい。Fujiはクラシカルなボタン系統が単に慣れを必要としそうだった。 運搬性は、本体の重さ、レンズの重さ、本体の持ちやすさで決まるように感じた。たとえ少々重くても、グリップがしっかりしていればカバーできるように思えた。これを踏まえて機種順に並べると、OM-5=EM-5\u0026gt;EM-1=OM1\u0026gt;G99\u0026gt;X-S10\u0026gt;X-T5\u0026gt;GH5m2\u0026gt;G9。EM-1やG99のグリップが自分の手にはスイートスポットだと思えた。X-S10は軽くてグリップも深いが、小指余りが辛く感じた。 動画性能は、Pana\u0026gt;Fuji\u0026gt;OMDSの順だと感じた。Pana、Fujiは静止画と動画の設定を分離して保存できるし、多くの機種が制限時間なしの4K撮影に対応している。OMDSもカタログスペック上は4K撮影に対応しているが、OM-1を除き30Pまでであり、カスタムダイアルに設定を保存することも難しい模様。 候補機種ごとにコメントすると、\nEm-5 mark iii: 現機種と違って位相差AFを採用しており、AFの不満は薄まりそう。重さも軽くなっているが、プラボディが残念。コスパはいいが、現機種と変わり映えしなさすぎる感じがある。 OM-5: 最新機種であり、EM-1 mark iiiの機能の多くを受け継いでいるが、価格がまだ高い。プラボディ、micro usbが残念。 E-M1 mark iii: 買い替え候補の筆頭。高いAFと連写性能、マグネシウムボディがOM-5より優れている。少々重いが、グリップがとても良いので、撮る時は疲れなさそう。動画性能は4K30P8bit, 30分制限ありで、少し不満だが、それ以外は及第点。 OM-1: 機能的にはE-M1 mark iiiの完全上位互換だが、防水機能の確保のためか、持った感じがE-M1の方が手に馴染む。価格も25万と高い。 G99: AF以外完璧なカメラ。G9より軽く、クロップアリだが4K30Pを制限なしで撮れる。グリップも良いが、若干小指が余るのと、中指の窪みが小さく感じる。 G9: でかい。G99と比べ、AFに人体認識がついていることが強み。30分制限アリだが、4K60Pがクロップなしで撮れるのも良い。けどでかい。 GH5m2: 4K60P10bitを内部収録で撮れるという、ピカイチの動画性能。カメラ単体でライブストリームできるという意味わからん機能もついている。けどでかくて高い。 X-T5: Fujiの最新機種。4000万画素の写真はデータの取り回しが悪くなるが、クロップでズームできるのはかなり魅力的。最近発売されたSigmaの18-50mm F2.8と組み合わせると幸せになれそう。けどOM-1と同程度のコスト。レンズも新調することになるので、やや非現実的。 X-S10: Fujiの手ぶれ補正付きボディの中で最も安く、詳しく調べる前は買い替え候補の筆頭だった。実際触ってみると、ボディのチープ感と、持った時の小指あまり、背面ボタンの少なさが気になった。 結論。EM-1 mark iiiかG99を買いたい！\n","permalink":"https://inody.github.io/posts/wanna-buy-camera/","summary":"学生時代はPentaxのK-30とK-S1を使っていた。 選んだ理由はシンプルにカタログスペック上のコスパが良いと感じたから。 実際使ってみると、旅行先で風景写真を撮るなどの用途には不満を感じなかった。\n就職してから妻（当時の彼女）がOlympusのカメラを購入するのを横目に眺め、マイクロフォーサーズのコンパクトさとミラーレスカメラの充実した機能を羨ましく思うようになり、気づけば自分も同じマウントでE-M5 mark IIを購入していた。 レンズは12-40mm F2.8を使っていて、後から軽さと明るさを求めてPanasonicの25mm F1.4を買い足した。\n子どもが生まれて、元気に歩き回るまで成長してから、E-M5 mark IIのAFに不満を感じるようになった。 2022現在、OlympusはOMDSに名前を変え、OM-1やOM-5など新しいカメラを手掛けていた。 そこまでお金に余裕があるわけではないが、これら同一メーカーの機種だけでなく、他のメーカーへの乗り換えも検討してみることにした。 なお、APS-Cとフルサイズでマウントを共用しているC, N, S社は、AF性能で比べると間違いなく筆頭候補だが、予算的に許容できるAPS-Cを買うと、将来フルサイズへのコンプが刺激されそうで怖いので、見送ることにした。\n評価ポイントとして、E-M5での不満点を考慮し、下記を評価してみることにした。\nAF: 動体（子ども）が合わない。コントラストAFであることに原因がある気がする。 絵作り: 大きな不満があるわけではないが、ちょっと飽きてきている。PanaやFujiの記憶色的な絵作りに興味がある。 操作性: 設定項目が分かりづらい。タッチパネルなども限定的にしか使えない。 運搬性: これは現状不満があるわけではないが、乗り換えの際にあまり重くなってほしくない。 動画: 以前旅行の際初めて外付けマイクで挑戦したが、Full HDの画質がスマホより悪かったのと、30分制限が不満だった。 以上の不満点が買い替えによってどこまで改善しそうか、独断と偏見で点をつけてみることにした。\n機種 価格 AF 絵作り 操作性 運搬性 動画機能 総合 E-M5 mark iii 10 5 5 4 8 5 37 OM-5 6 6 5 4 8 7 36 E-M1 mark iii 8 8 5 7 7 6 41 OM-1 2 9 5 6 7 8 35 G99 9 4 7 8 6 7 41 G9 9 5 7 7 2 9 39 GH5m2 3 6 7 8 4 10 38 X-T5 1 6 10 4 6 10 37 X-S10 3 6 10 4 7 8 38 評価軸ごとにコメントすると、","title":"カメラを買いたい！"},{"content":"概要 現職場環境からアクセスできるスパコンで、gpuを使ったコードを実行しようとする時、singularity経由でないとcudaの設定周りで怒られることがある。 例えばjuliaのコードはコンテナを経由せずとも実行できたが、pythonでは怒られが発生してしまう。 このためやむを得ずコンテナに入門することになった。 docker hubやsingularity hubのコンテナを利用するのが手っ取り早いが、勉強のためにdockerのコンテナを一から作って、singularityのコンテナに変換してみることにした。 作業内容をここにメモしておく。 dockerのインストール 公式ページを参考にしたが、何かしらのエラーが出てしまった。ここ を参考にするとうまくいった。 プロキシ設定 dockerからプロキシが見えるように、以下を作成 $ sudo mkdir -p /etc/systemd/system/docker.service.d $ sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf 以下を記述 [Service] Environment=\u0026#34;HTTP_PROXY=http://proxy_address:port\u0026#34; Environment=\u0026#34;HTTPS_PROXY=http://proxy_address:port\u0026#34; Environment=\u0026#34;NO_PROXY=localhost\u0026#34; dockerを再起動 $ sudo systemctl daemon-reload $ sudo systemctl restart docker コンテナが作成されたときにプロキシが設定されるよう、以下を作成 $ mkdir ~/.docker $ vim ~/.docker/config.json 以下を記述 { \u0026#34;proxies\u0026#34;: { \u0026#34;default\u0026#34;: { \u0026#34;httpProxy\u0026#34;: \u0026#34;http://proxy_address:port\u0026#34;, \u0026#34;httpsProxy\u0026#34;: \u0026#34;http://proxy_address:port\u0026#34;, \u0026#34;noProxy\u0026#34;: \u0026#34;localhost\u0026#34; } } } pythonの実行環境を作成： ここ を参照 ディレクトリ構成は下記のようにする . ├── docker-compose.yml ├── Dockerfile ├── .env ├── requirements.txt └── src ├── main.py Dokerfileは下記のようにする FROM python:3 USER root RUN apt-get update RUN mkdir -p /root/src COPY requirements.txt /root/src WORKDIR /root/src RUN pip install --proxy=\u0026#34;http://user:pass@proxy_address:port\u0026#34; --upgrade pip RUN pip install --proxy=\u0026#34;http://user:pass@proxy_address:port\u0026#34; --upgrade setuptools RUN pip install --proxy=\u0026#34;http://user:pass@proxy_address:port\u0026#34; -r requirements.txt 以下補足：\nUSERをrootにすると注意されるのであんまり良くなさそう pipはproxyが見えないので、--proxyコマンドで指定する requirements.txtには、pythonの実行ファイルが必要とするライブラリを記述しておく ここによると、ベースイメージはもっと軽量なものを選ぶべきな気がする docker-compose.ymlは下記のようにする\nversion: \u0026#39;3\u0026#39; services: python3: restart: always build: . container_name: \u0026#39;python3\u0026#39; working_dir: \u0026#39;/root/src\u0026#39; tty: true volumes: - ${SRC_PATH}:/root/src .envには下記を記述する SRC_PATH=./src コンテナをbuild、起動、pythonの実行 下記コマンドを実行してbuild docker-compose build うまくいけば、下記のようなコンテナimageが作成される $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE python_python3 latest 5db246979fc6 2 hours ago 6.6GB 下記で起動 $ docker-compose up -d 下記でpythonスクリプトを実行できる $ docker exec -it python3 python main.py Singularityのインストール 上で作成したdockerのイメージを、singularityの.sif形式に変換する 公式ドキュメント を参考にすればsingularityをインストールできる。 goのバージョンを1.17以上にすることと、singularityのバージョンをスパコンのものと合わせることに注意 困ったらgoを一度消去してから再インストールすると上手くいく気がする DockerファイルをSingularityファイルに変換 下記を入力すると、5分ほどでpython-singularity.sif が生成される $ sudo singularity build python-singularity.sif docker-daemon://python_python3:latest 生成されたファイルをスパコンに送って singularity exec --nv `python-singularity.sif` python main.py などと書かれたファイルをsbatchで投げると、GPUを使ったジョブが実行された。\n","permalink":"https://inody.github.io/posts/singularity/","summary":"概要 現職場環境からアクセスできるスパコンで、gpuを使ったコードを実行しようとする時、singularity経由でないとcudaの設定周りで怒られることがある。 例えばjuliaのコードはコンテナを経由せずとも実行できたが、pythonでは怒られが発生してしまう。 このためやむを得ずコンテナに入門することになった。 docker hubやsingularity hubのコンテナを利用するのが手っ取り早いが、勉強のためにdockerのコンテナを一から作って、singularityのコンテナに変換してみることにした。 作業内容をここにメモしておく。 dockerのインストール 公式ページを参考にしたが、何かしらのエラーが出てしまった。ここ を参考にするとうまくいった。 プロキシ設定 dockerからプロキシが見えるように、以下を作成 $ sudo mkdir -p /etc/systemd/system/docker.service.d $ sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf 以下を記述 [Service] Environment=\u0026#34;HTTP_PROXY=http://proxy_address:port\u0026#34; Environment=\u0026#34;HTTPS_PROXY=http://proxy_address:port\u0026#34; Environment=\u0026#34;NO_PROXY=localhost\u0026#34; dockerを再起動 $ sudo systemctl daemon-reload $ sudo systemctl restart docker コンテナが作成されたときにプロキシが設定されるよう、以下を作成 $ mkdir ~/.docker $ vim ~/.docker/config.json 以下を記述 { \u0026#34;proxies\u0026#34;: { \u0026#34;default\u0026#34;: { \u0026#34;httpProxy\u0026#34;: \u0026#34;http://proxy_address:port\u0026#34;, \u0026#34;httpsProxy\u0026#34;: \u0026#34;http://proxy_address:port\u0026#34;, \u0026#34;noProxy\u0026#34;: \u0026#34;localhost\u0026#34; } } } pythonの実行環境を作成： ここ を参照 ディレクトリ構成は下記のようにする . ├── docker-compose.yml ├── Dockerfile ├── .env ├── requirements.","title":"プロキシ環境でスクラッチからsingularityコンテナの作成"},{"content":" 日本応用数理学会の年会で口頭発表してきました。\n内容は、平均場ゲームの数値計算についてです。\n平均場ゲームとは、非常に数の多い多体の最適制御問題を近似する偏微分方程式です。 平均場ゲームを数値計算したいのですが、以下の難しさがあります。 一つが、方程式が非線形であることです。 もう一つが、2本の連立方程式になっており、それぞれの変数が相互依存してしまっていることです。 これらの問題に対して Cole-Hopf変換と呼ばれる変換によって、方程式を線形化し、 Fictitous Playと呼ばれる反復計算によって、相互依存の問題を解消しました。 これらの変換を実施した系に対して、標準的な陽的差分スキームを提案し、提案スキームが平均場ゲームに対して収束性を持つことを証明しました。 提案スキームを1,2次元の制御問題に適用し、妥当な結果を与えることを確認しました。 発表資料をここに置いておきます。興味のある方はご覧ください。\n今回はハイブリッド開催でしたが、オンラインで発表しました。\nせっかくなので、一眼レフとマイクを使って発表を行ってみました。 少し凝った環境でオンライン学会発表してみた pic.twitter.com/02N2XwN97Y\n\u0026mdash; inody (@inody_) September 8, 2022 完全に自己満足ですが、発表後「声が良かった」と好評いただき嬉しかったです。 ","permalink":"https://inody.github.io/posts/jsiam-presentation/","summary":" 日本応用数理学会の年会で口頭発表してきました。\n内容は、平均場ゲームの数値計算についてです。\n平均場ゲームとは、非常に数の多い多体の最適制御問題を近似する偏微分方程式です。 平均場ゲームを数値計算したいのですが、以下の難しさがあります。 一つが、方程式が非線形であることです。 もう一つが、2本の連立方程式になっており、それぞれの変数が相互依存してしまっていることです。 これらの問題に対して Cole-Hopf変換と呼ばれる変換によって、方程式を線形化し、 Fictitous Playと呼ばれる反復計算によって、相互依存の問題を解消しました。 これらの変換を実施した系に対して、標準的な陽的差分スキームを提案し、提案スキームが平均場ゲームに対して収束性を持つことを証明しました。 提案スキームを1,2次元の制御問題に適用し、妥当な結果を与えることを確認しました。 発表資料をここに置いておきます。興味のある方はご覧ください。\n今回はハイブリッド開催でしたが、オンラインで発表しました。\nせっかくなので、一眼レフとマイクを使って発表を行ってみました。 少し凝った環境でオンライン学会発表してみた pic.twitter.com/02N2XwN97Y\n\u0026mdash; inody (@inody_) September 8, 2022 完全に自己満足ですが、発表後「声が良かった」と好評いただき嬉しかったです。 ","title":"日本応用数理学会の年会で発表してきました"},{"content":"U3223QE 買ってしまった…\n良かったこと\n画面が綺麗。ベゼルも狭い。 KVM機能が優秀。マウス・キーボード・usb-dacを切り替えてくれる。以前より配線がスッキリして気持ちいい。 dell display managerが優秀。キーボードショートカットで画面を触らず入力切り替えできるし、画面の輝度はじめとする設定も全部ここからできる。 微妙だったこと\nwebカメラ（logicool brio）をハブに接続すると入力切り替えの際に他のUSBデバイスが認識されなくなる Non-integer scalingをすると4GBくらいメモリが召し上げられる 基本的にいい買い物だったと思うけど、メモリ問題は誤算だった。今後あまりに困るようならS3423DWCに買い替えを検討しようかな…\n","permalink":"https://inody.github.io/posts/buy-monitor/","summary":"U3223QE 買ってしまった…\n良かったこと\n画面が綺麗。ベゼルも狭い。 KVM機能が優秀。マウス・キーボード・usb-dacを切り替えてくれる。以前より配線がスッキリして気持ちいい。 dell display managerが優秀。キーボードショートカットで画面を触らず入力切り替えできるし、画面の輝度はじめとする設定も全部ここからできる。 微妙だったこと\nwebカメラ（logicool brio）をハブに接続すると入力切り替えの際に他のUSBデバイスが認識されなくなる Non-integer scalingをすると4GBくらいメモリが召し上げられる 基本的にいい買い物だったと思うけど、メモリ問題は誤算だった。今後あまりに困るようならS3423DWCに買い替えを検討しようかな…","title":"モニタを買った"},{"content":" 今使っているモニタ（これ）はusb-cでmacbook airに接続・給電できるので、特に不満なく使っていた 買いたいと思ったきっかけは、デスクトップPCを購入して2台体制になったこと KVMを購入してモニタとusbデバイスを共有させようとした 初めに買ったのはサンワサプライのこれ。 usb-cとhdmiを切り替えできて、usb-cの方には給電もできるものはこれくらいしかなかった 一応動作したが、下記に不満があった このKVMを通して接続できる端子がusb2.0のみ 片方の接続が切れると、もう片方に勝手に切り替わる 切り替えが遅い（10秒以上） KVMを通してキーボードとマウスを繋いだだけで、電力不足を警告され、接続をOS側で勝手に切られる 特に最後が致命的だった 次に買ったのは、CKLauのこれ。 usb-cの入力を許容するKVMはほとんどないので、usb-c\u0026lt;-\u0026gt;HDMI+usb-aのハブとHDMI+usb-a同士を切り替えるKVMを組み合わせようとした usb3.0で接続できるKVMはこれくらいしかなかった 聞き慣れないメーカーなので不安だった。届いたら案の定、前面のusb端子が全く反応しなかったので返品 この辺りで、最近のモニタにはKVM機能付きのものが出てきていると知る GIGABYTE, JAPANNEXT, Dellなどが出していたが、口コミを見るとDellの機能が一番安定していそう どうせ買い替えるなら4Kとかウルトラワイドにしてみたいと欲が出てくる 4Kはnon-integer scalingするとGPUを消費するという情報を以前見かけたが、m1 macだとそこまで影響はないと判断した(https://forums.macrumors.com/threads/m1-mba-and-external-4k-monitor-scaling.2304916/) 候補は U3219Q U3223QE S3423DWC S3423DWCはウルトラワイドだが、ゲームとかあまりしないので保留（値段も4Kのものよりちょっとだけ高い） U3223QEはU3219Qの後継で、どちらも4K 色々機能が足されているが、自分の用途的にはU3219Qでも十分に思われた 一方、U3219Qはusb-c接続の時にusb2.0の速度しか出ないと言う情報を見かけた（ここ） なら現行機のU3223QEがいいよね けど価格が高い（2022.8月現在99800円） ボーナスもらったしいけるか！？となりかけているが、一度冷静になるために、ここまでの流れを記録している（\u0026lt;-イマココ） 結論 しばらくウォッチして、安くなったら買いたい。 買ったらここで報告します。 ","permalink":"https://inody.github.io/posts/wanna-buy-monitor/","summary":" 今使っているモニタ（これ）はusb-cでmacbook airに接続・給電できるので、特に不満なく使っていた 買いたいと思ったきっかけは、デスクトップPCを購入して2台体制になったこと KVMを購入してモニタとusbデバイスを共有させようとした 初めに買ったのはサンワサプライのこれ。 usb-cとhdmiを切り替えできて、usb-cの方には給電もできるものはこれくらいしかなかった 一応動作したが、下記に不満があった このKVMを通して接続できる端子がusb2.0のみ 片方の接続が切れると、もう片方に勝手に切り替わる 切り替えが遅い（10秒以上） KVMを通してキーボードとマウスを繋いだだけで、電力不足を警告され、接続をOS側で勝手に切られる 特に最後が致命的だった 次に買ったのは、CKLauのこれ。 usb-cの入力を許容するKVMはほとんどないので、usb-c\u0026lt;-\u0026gt;HDMI+usb-aのハブとHDMI+usb-a同士を切り替えるKVMを組み合わせようとした usb3.0で接続できるKVMはこれくらいしかなかった 聞き慣れないメーカーなので不安だった。届いたら案の定、前面のusb端子が全く反応しなかったので返品 この辺りで、最近のモニタにはKVM機能付きのものが出てきていると知る GIGABYTE, JAPANNEXT, Dellなどが出していたが、口コミを見るとDellの機能が一番安定していそう どうせ買い替えるなら4Kとかウルトラワイドにしてみたいと欲が出てくる 4Kはnon-integer scalingするとGPUを消費するという情報を以前見かけたが、m1 macだとそこまで影響はないと判断した(https://forums.macrumors.com/threads/m1-mba-and-external-4k-monitor-scaling.2304916/) 候補は U3219Q U3223QE S3423DWC S3423DWCはウルトラワイドだが、ゲームとかあまりしないので保留（値段も4Kのものよりちょっとだけ高い） U3223QEはU3219Qの後継で、どちらも4K 色々機能が足されているが、自分の用途的にはU3219Qでも十分に思われた 一方、U3219Qはusb-c接続の時にusb2.0の速度しか出ないと言う情報を見かけた（ここ） なら現行機のU3223QEがいいよね けど価格が高い（2022.8月現在99800円） ボーナスもらったしいけるか！？となりかけているが、一度冷静になるために、ここまでの流れを記録している（\u0026lt;-イマココ） 結論 しばらくウォッチして、安くなったら買いたい。 買ったらここで報告します。 ","title":"モニタを買いたい"},{"content":" 今まで研究者としてのポートフォリオはGoogle Siteを、ブログはTumblrを用いていた それぞれのアドレスは下記 https://sites.google.com/view/d-inoue/home https://inody.tumblr.com どちらも投稿時はWebの投稿画面にアクセスする必要があり、煩雑に感じていた 前からやろうやろうと思っていた、Github pagesでポートフォリオサイトを公開する作業に取り組んだ ジェネレータにはよく見かけるHugoを、テンプレートにはStar数の多いPaperModを使用することにした 作業には https://zenn.dev/okaponta/articles/c302f58507febc が参考になった これまでのポートフォリオサイトの内容をコピペし、ブログ記事も移行した 最初自動化しようと思ったが、そんなに記事の本数も多くなかったため、手作業で行った 過去のブログとmarkdownやlatexのレンダリング方法が異なるため、表示がかなり崩れている 修正は面倒なので、後回しにすることにする -\u0026gt; たぶん完了。 今後、Google SiteやTumblrの更新を止め、こちらのサイトで情報を更新しようと思う いろんなところに貼っているGoogle SiteやTumblrへのリンクもこちらのサイトに張り替えなければならない -\u0026gt; これも多分完了。 git pushすれば記事が公開できるようになったため、執筆のハードルが下がったと思う 自分へのメモ： contentsにmarkdownファイルを作成 inositeでhugo publicでgit push origin main こんなことやってる時間があったら研究しましょう ","permalink":"https://inody.github.io/posts/portfolio-blog-hugo/","summary":" 今まで研究者としてのポートフォリオはGoogle Siteを、ブログはTumblrを用いていた それぞれのアドレスは下記 https://sites.google.com/view/d-inoue/home https://inody.tumblr.com どちらも投稿時はWebの投稿画面にアクセスする必要があり、煩雑に感じていた 前からやろうやろうと思っていた、Github pagesでポートフォリオサイトを公開する作業に取り組んだ ジェネレータにはよく見かけるHugoを、テンプレートにはStar数の多いPaperModを使用することにした 作業には https://zenn.dev/okaponta/articles/c302f58507febc が参考になった これまでのポートフォリオサイトの内容をコピペし、ブログ記事も移行した 最初自動化しようと思ったが、そんなに記事の本数も多くなかったため、手作業で行った 過去のブログとmarkdownやlatexのレンダリング方法が異なるため、表示がかなり崩れている 修正は面倒なので、後回しにすることにする -\u0026gt; たぶん完了。 今後、Google SiteやTumblrの更新を止め、こちらのサイトで情報を更新しようと思う いろんなところに貼っているGoogle SiteやTumblrへのリンクもこちらのサイトに張り替えなければならない -\u0026gt; これも多分完了。 git pushすれば記事が公開できるようになったため、執筆のハードルが下がったと思う 自分へのメモ： contentsにmarkdownファイルを作成 inositeでhugo publicでgit push origin main こんなことやってる時間があったら研究しましょう ","title":"重い腰を上げてGithub pagesにポートフォリオサイトを作成した"},{"content":"インストール ここを参考にした。 以前WSL1を触った時はMicrosoftストアからイメージをDLする感じだったと記憶しているが、コマンドだけでインストールできた。 Powershellでのコマンド：\nwsl --install これだけでUbuntu20.04が自動でインストールされた。\nイメージの移動 デフォルトではCドライブにインストールされる。 しかし後々ディスク容量を逼迫することが目に見えたので、別ドライブにイメージを移動させた。 ここを参考にした。 Fドライブに1TBのSSDを増設したので、基本ここの直下を使うことにした。 Powershellでのコマンド：\nwsl --shutdown wsl --export Ubuntu F:Ubuntu.tar wsl --unregister Ubuntu wsl --import Ubuntu F:Ubuntu D:Ubuntu.tar --version 2 これを行うことで、デフォルトユーザーがrootになってしまう問題がある。 基本vscodeのremote sshで接続する予定なのであまり問題はないが、リンクを参考にしてユーザー権限で起動するショートカットを作成した。\nまた、後々明らかになったのだが、デフォルトのイメージはディスク容量が256GBを最大値として作られるようだった。 容量を拡張するために、ここに従ってコマンドを実行した。\n同一LANからWSLにSSHする Ubuntu内でsshサービスを立ち上げておく必要がある。 いろいろ試行錯誤したため記憶が定かでないが、open-sshは初めからインストールされていた。 なので鍵がうまく設定されていさえすれば、同一LANの外部から接続できそうだが、問題が2つある。\nWSLではsystemdが動いておらず、サービスを自動で起動することができない。 WSL2ではホストであるWindowsと異なるIPが使用されており、直接外部から接続することが難しい。 このうち1. はWSLを起動するときにオプションでシェルスクリプトを実行できるので、それで解決した。 具体的にはWSL内でinit-wsl.shとかの名前のスクリプトを作成しておき、WSL起動時に\nwsl -d Ubuntu -u root exec /home/user/init-wsl.sh とすればよい。init-wsl.shの中身として\n#!/bin/sh service ssh restart service cron restart などと、起動したいサービスの名前を書いておく。 これでsshやcronなどのコマンドを実行できる。\nつぎに2. は、Windowsポート22に来たパケットをwslのポート22に転送する設定を実施した。\nfor /F %%i in ('wsl -d Ubuntu exec hostname -I') do set ip=%%i netsh interface portproxy delete v4tov4 listenport=22 netsh interface portproxy add v4tov4 listenport=22 connectaddress=%ip% この設定はここを真似した。 これらがWindowsが起動されるたびに自動で実施するために、\nwsl -d Ubuntu -u root exec /home/user/init-wsl.sh for /F %%i in ('wsl -d Ubuntu exec hostname -I') do set ip=%%i netsh interface portproxy delete v4tov4 listenport=22 netsh interface portproxy add v4tov4 listenport=22 connectaddress=%ip% とまとめたstart-wsl.batなるファイルを作成し、windowsのタスクスケジューラに設定した。\n全般 最上位の特権で実行する: on トリガー タスクの開始: ログオン時 遅延時間を指定する: 30秒間 操作 操作: プログラムの開始 プログラム/スクリプト: 上記のファイルを置いたパス という感じ。 別LANから接続したい GCEの無料枠の作成 別LANから接続する際の問題は\nグローバルIPが固定されていないこと である。 プロバイダのオプションで固定してくれるサービスもあったが、課金制だったため、無料で行う方法を探していたら、 ここを見つけた。 つまりsshのリモートフォワードを利用して、VPSを経由した接続を実現するというもの。 VPSの調達先として、Googleが提供しているCompute Engineをうまく使えば、課金なしで踏み台用の固定IPが手に入る。 設定はここが参考になった。\n一点、GCEで作成するイメージとして、無料枠のマシンの名前が、2021年7月まではf1-microだったのが、8月以降e2-microに変わっている。 古い記事だけを参考にすると、誤って課金されてしまうので注意。 こことかに変更のあらましが述べられている。\nもう一点、GCEのアドレスは外部に公開されるため、ssh用のポートは変更しておくことが望ましい。 これも確か上の記事の中でやり方が書かれていたはずなので説明割愛。\nリモートフォワード設定 GCEのsshのポートは11111とする。 Windowsマシンのsshのポートは22とする。 このとき、WSL側で実行するコマンドは\nautossh -f -N gce -p 11111 -R 22222:localhost:22 となる。 22222は別に空いていればなんでもよい。 接続先のgceの部分はWSL側の.ssh/configで良しなに設定されているとする。 sshでなくautosshとしているのは、接続が切れたとき再接続してほしいからである（aptでインストール可能）。 -f -Nなどのオプションは検索されたい。 -Rがリモートフォワードを指定するオプションで、gceマシンの22222ポートをlocalhost、つまりwslの22番ポートにリモートフォワードしている。\nつぎに外部PC（ここではmacbookとする）で実行するコマンドは\nssh gce -p 11111 -L 33333:localhost:22222 ssh localhost -p 33333 となる。 もちろんmacbook側からも、gceを./ssh/configで設定しておく必要がある。 ポート33333も、空いていればなんでもよい。 また、1行目と2行目は、それぞれ別ターミナルから実行することに注意。 1行目でmacbookの33333ポートをgceマシンのlocalhost:22222にローカルフォワードしている。 この状態でmacbookのlocalhostの33333にsshでログインすると、macbook-\u0026gt;gceマシン-\u0026gt;wslというログインが可能になる。\nもちろん、それぞれのsshコマンドでは、鍵が良しなに設定されていなければならない。\nWSLでのssh自動実行 これでリモートで作業する環境が整ったのだが、\nautossh -f -N gce -p 11111 -R 22222:localhost:22 のコマンドは、できればwsl開始時に自動で起動させたい。 ここでふたたび問題になるのが、WSLでsystemdが動いていない問題である。 さきほどのinit-wsl.shの下のほうにコマンドを追記しても、うまく動かなかった。 また、どうやら最近導入されたWSLのバージョンで、/etc/wsl.confの中で起動時に実行するコマンドを指定できるようになったらしいのだが、自分の環境ではうまく動かなかった。\nいろいろ調べると、genieなるソフトを使えばsystemdを強制的に動かすこともできると書かれていたが、CPU使用率を上げてしまうという情報もあったので、避けることにした。\nそこで、多少強引だがcronを使うことにした。 具体的には、上記のautosshのコマンド1行からなるtunnel_to_gce.shという名前のスクリプトを作成し、crontabに下記を追記した。\n*/1 * * * * user pidof -x tunnel_to_gce.sh \u0026gt;/dev/null || /home/user/tunnel_to_gce.sh 1分ごとに実行されるので、かなり冗長だが、一応前半のpidof -x tunnel_to_gce.sh \u0026gt;/dev/null ||あたりの記述で、重複実行は避けられるらしい（シェルスクリプトよくわかってない…）\n余談 とりあえず以上で\nwindowsが起動-\u0026gt;wsl起動-\u0026gt;ssh, cronサービス起動-\u0026gt;autosshでgceにリモートフォワード\nまで自動化できた。 したがってwindowsマシンが起動さえすれば、いつでも外部からssh可能になった。\nあとはWake on LANまでできたら最高だが、Switchbotのスイッチが使えるという情報をみつけ、確かにそうだなと思ったので、早速ぽちった。 今日届いてPCの電源ボタンにつけてみたが、簡単に使えた。 いざという時の強制再起動に役立てられそう。\n最後に、時にはGUI環境でWindowsに接続したい時もある。 これは普通にWindowsのRDP機能を使えばよい。 …のだが、なんとRDPサーバーの機能はWindows Proでなければ使えないことがわかった。\nこのため先ほどMicrosoft Storeから泣く泣くProライセンスを購入したところ。 狡い商売しやがって、Microsoft許さん\n以上です。 研究頑張ります。\n","permalink":"https://inody.github.io/posts/wsl-ssh/","summary":"インストール ここを参考にした。 以前WSL1を触った時はMicrosoftストアからイメージをDLする感じだったと記憶しているが、コマンドだけでインストールできた。 Powershellでのコマンド：\nwsl --install これだけでUbuntu20.04が自動でインストールされた。\nイメージの移動 デフォルトではCドライブにインストールされる。 しかし後々ディスク容量を逼迫することが目に見えたので、別ドライブにイメージを移動させた。 ここを参考にした。 Fドライブに1TBのSSDを増設したので、基本ここの直下を使うことにした。 Powershellでのコマンド：\nwsl --shutdown wsl --export Ubuntu F:Ubuntu.tar wsl --unregister Ubuntu wsl --import Ubuntu F:Ubuntu D:Ubuntu.tar --version 2 これを行うことで、デフォルトユーザーがrootになってしまう問題がある。 基本vscodeのremote sshで接続する予定なのであまり問題はないが、リンクを参考にしてユーザー権限で起動するショートカットを作成した。\nまた、後々明らかになったのだが、デフォルトのイメージはディスク容量が256GBを最大値として作られるようだった。 容量を拡張するために、ここに従ってコマンドを実行した。\n同一LANからWSLにSSHする Ubuntu内でsshサービスを立ち上げておく必要がある。 いろいろ試行錯誤したため記憶が定かでないが、open-sshは初めからインストールされていた。 なので鍵がうまく設定されていさえすれば、同一LANの外部から接続できそうだが、問題が2つある。\nWSLではsystemdが動いておらず、サービスを自動で起動することができない。 WSL2ではホストであるWindowsと異なるIPが使用されており、直接外部から接続することが難しい。 このうち1. はWSLを起動するときにオプションでシェルスクリプトを実行できるので、それで解決した。 具体的にはWSL内でinit-wsl.shとかの名前のスクリプトを作成しておき、WSL起動時に\nwsl -d Ubuntu -u root exec /home/user/init-wsl.sh とすればよい。init-wsl.shの中身として\n#!/bin/sh service ssh restart service cron restart などと、起動したいサービスの名前を書いておく。 これでsshやcronなどのコマンドを実行できる。\nつぎに2. は、Windowsポート22に来たパケットをwslのポート22に転送する設定を実施した。\nfor /F %%i in ('wsl -d Ubuntu exec hostname -I') do set ip=%%i netsh interface portproxy delete v4tov4 listenport=22 netsh interface portproxy add v4tov4 listenport=22 connectaddress=%ip% この設定はここを真似した。 これらがWindowsが起動されるたびに自動で実施するために、","title":"WSLのインストールから、外部からのSSH環境構築までの備忘録"},{"content":"購入理由 正月で帰省中、ふと計算機がほしくなった。 会社のネットワークはsshがブロックされているため、家から繋ぐにはRDP接続する必要がある。 通信がラグい時もあり、ストレスで出社したりしていた。 家に計算機があれば、ちょっとした計算を家で回すことができると考えた。 （家族のいない間ゲームをしたい気持ちもあった）\n要件 せっかくなので、最近話題のIntel12世代CPUを積んだやつがいい。 GPUはあんまり使わないだろうけど、機械学習に興味がなくはない（本音はゲームがしたい）ので、それなりのやつを積んでた方が良い。 メモリは32GBあれば十分だけど、16GBでも良いかもしれない。 価格は高くても25万円くらいで抑えたい。\n調査 初めはフロンティアやドスパラなどのBTOを探したけど、途中から欲が出て自作したくなった。 ただ今はあらゆるパーツが高騰していて、自作するとBTOより高くつくことがわかった。 年末年始で各社がセールを行なっており、パソコン工房の自作キットが魅力的だったので（これ）、新年早々寒空の下店舗に並ぶなどしてみたが、惜しくも購入できなかった。\n購入したPC 結局Dellのxps8950を買った。\nスペックは以下のような感じ：\n第12世代 インテル® Core™ i7 12700K (12コア, 25MB キャッシュ, 3.6GHz - 5GHz w/Turbo Boost Max 3.0) 水冷CPUクーラー NVIDIA® GeForce RTX™ 3060 Ti 8GB GDDR6 (LHR) 16GB デュアルチャネル DDR5 (2x 8GB) 4400MHz; 最大 128GB 512GB NVMe M.2 PCIe SSD (ブート) + 1TB 7200RPM SATA 6Gb/s (ストレージ) 750W電源（プラチナ） リンクはここ。 値段は今はちょっと高くなっているが、買った当時は学割+即納セールを利用し、21万円ちょっとだった。 DDR5メモリが枯渇する中、上記スペックのものとしては結構お買い得だったと思う。\n調べると、xpsは前のモデルが排熱に問題があるとして悪評があるようだった。 それは主にケースが小さすぎる、クーラーがリテールクーラー並みにしょぼい、という理由によるもので、本モデルはケースが大きくなり、水冷クーラーを選べるので、問題にはならないと考えた。\n購入後 久しぶりに必需品じゃないもので大きな買い物だったので、緊張した。 届いてすぐ、Geekbenchなどのベンチマークを回してみたが、同等のスペックのものより少しだけスコアが低かったので、やはり排熱問題は若干残っているのかな、と感じた。 とはいえ、ケースファンがとてつもなくうるさくなるとかは今のところないので、快適に使えそう。\n今まで家ではm1 macbook airのみで過ごしていた。 モニタ、マウス、キーボード、スピーカー、webカメラなどの周辺機器は共有のものとしたかったので、ちょうどいいスイッチャーはないかと探したところ、以下のような製品を見つけたので、早速購入した。\nサンワダイレクト パソコン切替器 Type-C⇔HDMI 搭載PC PD対応 USB2ポート/マウス/キーボード Windows Mac対応 400-SW037\nPCと切替器が届いてからは、設置と配線にかなり苦労した。 使っているデスクがスタンディングで上下するため、ケーブルが伸び切ったりしないよう工夫する必要があった。 また、子どもに電源を押されないよう、カバーをかけるなど対策が必要だった。\n環境構築 m.2 ssdを追加購入し、増設した。 初めこっちにubuntuをインストールする予定だったが、せっかくなのでWSLを使うことにした。 WSL環境に外部からアクセス得切るようにすることが目標だったが、悪戦苦闘するうちにこれを実現できた。 時間が出来次第こちらも備忘録としてまとめておきたい。\n","permalink":"https://inody.github.io/posts/buy-pc/","summary":"購入理由 正月で帰省中、ふと計算機がほしくなった。 会社のネットワークはsshがブロックされているため、家から繋ぐにはRDP接続する必要がある。 通信がラグい時もあり、ストレスで出社したりしていた。 家に計算機があれば、ちょっとした計算を家で回すことができると考えた。 （家族のいない間ゲームをしたい気持ちもあった）\n要件 せっかくなので、最近話題のIntel12世代CPUを積んだやつがいい。 GPUはあんまり使わないだろうけど、機械学習に興味がなくはない（本音はゲームがしたい）ので、それなりのやつを積んでた方が良い。 メモリは32GBあれば十分だけど、16GBでも良いかもしれない。 価格は高くても25万円くらいで抑えたい。\n調査 初めはフロンティアやドスパラなどのBTOを探したけど、途中から欲が出て自作したくなった。 ただ今はあらゆるパーツが高騰していて、自作するとBTOより高くつくことがわかった。 年末年始で各社がセールを行なっており、パソコン工房の自作キットが魅力的だったので（これ）、新年早々寒空の下店舗に並ぶなどしてみたが、惜しくも購入できなかった。\n購入したPC 結局Dellのxps8950を買った。\nスペックは以下のような感じ：\n第12世代 インテル® Core™ i7 12700K (12コア, 25MB キャッシュ, 3.6GHz - 5GHz w/Turbo Boost Max 3.0) 水冷CPUクーラー NVIDIA® GeForce RTX™ 3060 Ti 8GB GDDR6 (LHR) 16GB デュアルチャネル DDR5 (2x 8GB) 4400MHz; 最大 128GB 512GB NVMe M.2 PCIe SSD (ブート) + 1TB 7200RPM SATA 6Gb/s (ストレージ) 750W電源（プラチナ） リンクはここ。 値段は今はちょっと高くなっているが、買った当時は学割+即納セールを利用し、21万円ちょっとだった。 DDR5メモリが枯渇する中、上記スペックのものとしては結構お買い得だったと思う。\n調べると、xpsは前のモデルが排熱に問題があるとして悪評があるようだった。 それは主にケースが小さすぎる、クーラーがリテールクーラー並みにしょぼい、という理由によるもので、本モデルはケースが大きくなり、水冷クーラーを選べるので、問題にはならないと考えた。\n購入後 久しぶりに必需品じゃないもので大きな買い物だったので、緊張した。 届いてすぐ、Geekbenchなどのベンチマークを回してみたが、同等のスペックのものより少しだけスコアが低かったので、やはり排熱問題は若干残っているのかな、と感じた。 とはいえ、ケースファンがとてつもなくうるさくなるとかは今のところないので、快適に使えそう。","title":"計算機を購入した"},{"content":"社会人博士として大学に入学してそろそろ2か月になります。 現状を俯瞰すると、いろいろとまずい状態にあるように思われるので、問題点を列挙してみようと思います。\nまず、平日に仕事と学業が思ったほど両立できていません。 今の研究室とは共同研究のご縁で配属させていただいたため、昨年度までは業務内容と学業の内容にオーバーラップがありました。 これを利用して学位取得のための研究を進められると踏んでいたのですが、現状そうはなっていません。 というのも、今年度から組織編成が変わり、業務内容が変更されたためです。 今のところ、上司は過去の業務を精算する時間として、昨年度の研究に時間を割くことを大目に見てくれています。 しかし、そのうち新しい業務項目に本格的に携わることになるのは不可避でしょう。 また、ここ最近書類の作成業務が重なったことも、研究の進捗を阻んでいるように思います。\nまた、平日の夜は一瞬で過ぎます。 子どものご飯を上げる、お風呂、寝かしつけなどをしていると気づけば22:00を回ります。 この時間以降に勉強を進めようとしていた時期もあったのですが、子どもが夜中に目覚めることが多く、その結果自分も寝不足になるため、最近は一緒の時間に寝てしまっています。\nなにより問題なのが休日の過ごし方です。 平日に学業ができていない焦りがあり、常にiPadを手に持ち論文を読みながら子どもの相手をしています。 子どもは少しでも目を離すと視界から消え、気づくとティッシュなど手の届く場所にあるものをなんでも食べようとするので、常に見ておく必要があります。 そこに中途半端に勉強の要素を導入しようとしても無意味です。 子どもをまともに見守れず、かといって論文も全然読み進められない、当然の結果に陥っています。\n妻は現在育休中であり、平日の昼の家事育児はお願いしています（朝ご飯は各自、備品の買い物、ゴミ出し、掃除などは自分が担当しています）。 このため休日まで家事育児に時間を割いてもらうのは申し訳なく、妻には土日の一方をリフレッシュデーとして自由に外出してもらうようにしていました。 しかし僕の入学以降、家事育児がおろそかになり始めてしまったため、見かねた妻が家にいてくれるようになってしまっています。 ホットクック、食洗機、ロボット掃除機などの時短家電はすでにフル稼働しており、生活は多少楽になりましたが、本質的な改善には至っていないというのが実感です。\n妻から見れば、平日ただでさえ家事育児を放棄しているのに、休日もタブレット片手に漫然と過ごす夫に辟易する、といったところでしょう。 実際口にはしませんが、ストレスはたまってきているように思います。\n優先順位を考えると、一番が家庭、そのつぎに食い扶持を稼ぐための仕事、最後にキャリアのための学業となるのは自然です。 しかしこの順位でこなしていくと、永遠に学業が進捗しません。 学業が進捗しない→家事育児が中途半端になる→妻のストレスがたまる→自分も消耗する→学業が進捗しない、という精神的な負のスパイラルが発生し始めているようにも思われます。\n問題点をまとめると、\n平日の昼に内職的に学業を進めているものの、時限である 平日の朝や夜の子どもが起きていない時間に進めたいが、就寝時間が犠牲になる 休日に家事育児と学業が両立できない という感じです。 タイトルの通り、仕事と学業と育児のトリレンマです。\nまとまった時間の確保には、やはり休日の時間の使い方が鍵であるように思われます。 そこで、先日妻に相談し、休日にそれぞれ2時間ほどまとまった時間を確保し、僕は勉強に、妻は休憩に充て、それ以外の時間は平等に家事育児に時間を割く、という取り決めを交わしてもらいました。 この仕組みがうまくワークすることを祈るばかりです。\n","permalink":"https://inody.github.io/posts/trilemma/","summary":"社会人博士として大学に入学してそろそろ2か月になります。 現状を俯瞰すると、いろいろとまずい状態にあるように思われるので、問題点を列挙してみようと思います。\nまず、平日に仕事と学業が思ったほど両立できていません。 今の研究室とは共同研究のご縁で配属させていただいたため、昨年度までは業務内容と学業の内容にオーバーラップがありました。 これを利用して学位取得のための研究を進められると踏んでいたのですが、現状そうはなっていません。 というのも、今年度から組織編成が変わり、業務内容が変更されたためです。 今のところ、上司は過去の業務を精算する時間として、昨年度の研究に時間を割くことを大目に見てくれています。 しかし、そのうち新しい業務項目に本格的に携わることになるのは不可避でしょう。 また、ここ最近書類の作成業務が重なったことも、研究の進捗を阻んでいるように思います。\nまた、平日の夜は一瞬で過ぎます。 子どものご飯を上げる、お風呂、寝かしつけなどをしていると気づけば22:00を回ります。 この時間以降に勉強を進めようとしていた時期もあったのですが、子どもが夜中に目覚めることが多く、その結果自分も寝不足になるため、最近は一緒の時間に寝てしまっています。\nなにより問題なのが休日の過ごし方です。 平日に学業ができていない焦りがあり、常にiPadを手に持ち論文を読みながら子どもの相手をしています。 子どもは少しでも目を離すと視界から消え、気づくとティッシュなど手の届く場所にあるものをなんでも食べようとするので、常に見ておく必要があります。 そこに中途半端に勉強の要素を導入しようとしても無意味です。 子どもをまともに見守れず、かといって論文も全然読み進められない、当然の結果に陥っています。\n妻は現在育休中であり、平日の昼の家事育児はお願いしています（朝ご飯は各自、備品の買い物、ゴミ出し、掃除などは自分が担当しています）。 このため休日まで家事育児に時間を割いてもらうのは申し訳なく、妻には土日の一方をリフレッシュデーとして自由に外出してもらうようにしていました。 しかし僕の入学以降、家事育児がおろそかになり始めてしまったため、見かねた妻が家にいてくれるようになってしまっています。 ホットクック、食洗機、ロボット掃除機などの時短家電はすでにフル稼働しており、生活は多少楽になりましたが、本質的な改善には至っていないというのが実感です。\n妻から見れば、平日ただでさえ家事育児を放棄しているのに、休日もタブレット片手に漫然と過ごす夫に辟易する、といったところでしょう。 実際口にはしませんが、ストレスはたまってきているように思います。\n優先順位を考えると、一番が家庭、そのつぎに食い扶持を稼ぐための仕事、最後にキャリアのための学業となるのは自然です。 しかしこの順位でこなしていくと、永遠に学業が進捗しません。 学業が進捗しない→家事育児が中途半端になる→妻のストレスがたまる→自分も消耗する→学業が進捗しない、という精神的な負のスパイラルが発生し始めているようにも思われます。\n問題点をまとめると、\n平日の昼に内職的に学業を進めているものの、時限である 平日の朝や夜の子どもが起きていない時間に進めたいが、就寝時間が犠牲になる 休日に家事育児と学業が両立できない という感じです。 タイトルの通り、仕事と学業と育児のトリレンマです。\nまとまった時間の確保には、やはり休日の時間の使い方が鍵であるように思われます。 そこで、先日妻に相談し、休日にそれぞれ2時間ほどまとまった時間を確保し、僕は勉強に、妻は休憩に充て、それ以外の時間は平等に家事育児に時間を割く、という取り決めを交わしてもらいました。 この仕組みがうまくワークすることを祈るばかりです。","title":"仕事と学業と育児のトリレンマ"},{"content":"娘が大きくなってきた。\n以前は寝かしつけに相当苦労した。 縦抱っこをしながら子守唄を歌う。 寝息を立て始めてしばらくして大きな吐息が聞こえたら、そっとベッドに寝かせる。 少しでも乱暴な置き方をするとパチリと目が覚め大泣きされる。 こうした動作を繰り返すうちに1時間は余裕で経過する。\n今は違う。 初めからベッドでごろごろさせながら一緒に遊んでいるうちに、そのまま寝息を立て始めることが増えた。 寝かしつけが随分と楽になった。\n今日、久しぶりに娘の寝つきが悪かった。 久しぶりに縦抱っこをしながら子守唄を歌う。 ほんの1ヶ月かそこらぶりのことなのに、随分と懐かしく感じた。 同時に、こうして困らせられながら育児をする期間にも終わりがあるということを強く感じてしまい、急に感情が揺さぶられた。 柄にもなく涙が出てきた。\n僕はうまくやれているだろうか。 この先うまくやれるんだろうか。 わからないけれど、やれるだけやってみるね。\n","permalink":"https://inody.github.io/posts/sleep-baby/","summary":"娘が大きくなってきた。\n以前は寝かしつけに相当苦労した。 縦抱っこをしながら子守唄を歌う。 寝息を立て始めてしばらくして大きな吐息が聞こえたら、そっとベッドに寝かせる。 少しでも乱暴な置き方をするとパチリと目が覚め大泣きされる。 こうした動作を繰り返すうちに1時間は余裕で経過する。\n今は違う。 初めからベッドでごろごろさせながら一緒に遊んでいるうちに、そのまま寝息を立て始めることが増えた。 寝かしつけが随分と楽になった。\n今日、久しぶりに娘の寝つきが悪かった。 久しぶりに縦抱っこをしながら子守唄を歌う。 ほんの1ヶ月かそこらぶりのことなのに、随分と懐かしく感じた。 同時に、こうして困らせられながら育児をする期間にも終わりがあるということを強く感じてしまい、急に感情が揺さぶられた。 柄にもなく涙が出てきた。\n僕はうまくやれているだろうか。 この先うまくやれるんだろうか。 わからないけれど、やれるだけやってみるね。","title":"子の寝かしつけ"},{"content":" この4月から、東京大学の数理科学研究科に博士後期課程の学生として入学することになりました。\n入社当初から会社の上司には学位を取りたいと伝えていたのですが、足掛け5年でようやくスタートを切ることができた次第です。\n入社時は学生時代の指導教員が会社の近くに研究室を構えていたため、そこに通うことを狙っていたのですが、東京転勤によって難しくなってしまいました。\n東京で会社に勤めながらチャンスを伺っていたところ、共同研究のご縁から指導を許可いただける運びとなりました。 なお、仕事は続けるので社会人博士です。\n修士までは制御工学のどちらかというと理論寄りの研究をしており、会社でもそこで培った知識を用いて研究していたのですが、博士課程ではより数学的な研究をさせていただくことになります。\n具体的には、制御にまつわる偏微分方程式を数値的に解く際に、代数解を精度良く近似している保証を与えてくれる計算手法の開発を目指します。\nこのトピックは会社で研究を進めるうちに遭遇した課題であり、少なくとも自分にとっての需要は大きいです。\n一方、解決には偏微分方程式に関する深い知識を必要とするため、素養が皆無の自分には明らかなチャレンジだと感じます。\n加えて、プライベートな懸念もあります。\n入社当初は独身で失うものもなく、休日に頑張れば両立できると高を括っていました。\nしかしながら5年たった今、結婚し子どもを授かったことで、土日も家庭に時間を割く必要が生じています。\nこのような状況において、博士課程の3年は一瞬であり、時間との戦いになることは明白です。\n以上のように不安は尽きませんが、30代最初の挑戦として相応しい舞台に立てたことを前向きに捉えて、しっかり時間管理して研究に励もうと思います。\n","permalink":"https://inody.github.io/posts/start-phd/","summary":"この4月から、東京大学の数理科学研究科に博士後期課程の学生として入学することになりました。\n入社当初から会社の上司には学位を取りたいと伝えていたのですが、足掛け5年でようやくスタートを切ることができた次第です。\n入社時は学生時代の指導教員が会社の近くに研究室を構えていたため、そこに通うことを狙っていたのですが、東京転勤によって難しくなってしまいました。\n東京で会社に勤めながらチャンスを伺っていたところ、共同研究のご縁から指導を許可いただける運びとなりました。 なお、仕事は続けるので社会人博士です。\n修士までは制御工学のどちらかというと理論寄りの研究をしており、会社でもそこで培った知識を用いて研究していたのですが、博士課程ではより数学的な研究をさせていただくことになります。\n具体的には、制御にまつわる偏微分方程式を数値的に解く際に、代数解を精度良く近似している保証を与えてくれる計算手法の開発を目指します。\nこのトピックは会社で研究を進めるうちに遭遇した課題であり、少なくとも自分にとっての需要は大きいです。\n一方、解決には偏微分方程式に関する深い知識を必要とするため、素養が皆無の自分には明らかなチャレンジだと感じます。\n加えて、プライベートな懸念もあります。\n入社当初は独身で失うものもなく、休日に頑張れば両立できると高を括っていました。\nしかしながら5年たった今、結婚し子どもを授かったことで、土日も家庭に時間を割く必要が生じています。\nこのような状況において、博士課程の3年は一瞬であり、時間との戦いになることは明白です。\n以上のように不安は尽きませんが、30代最初の挑戦として相応しい舞台に立てたことを前向きに捉えて、しっかり時間管理して研究に励もうと思います。","title":"博士課程に進学しました"},{"content":"気づけば年の瀬です。 今年はコロナ禍で在宅勤務が一定期間続いたためか、矢のように時間が過ぎたと感じます。\n自分は割と一人が好きなので、はじめのうちはリモートワークを歓迎し、集中して作業を進めることができました。 しかし後半になると、生活リズムがずれるとともに倦怠感を覚え始め、作業効率がガタ落ちしてしまいました。\nそのせいか、今年度のアウトプット目標は「年度末までに3本投稿」でしたが、今の所2本しか投稿できていません。 うち1本はリジェクト、もう1本はアクセプトでした。 どちらも自分としてはハードルが高い雑誌だったので、1本アクセプトされたことは十分検討したとも言えそうです。 ただ、あと1本投稿できる見込みはまったく立っていません。 なんとか希望が見えるところまで頑張りたいです。\n下記、今年経験したイベントと、来年経験するイベントです。\n結婚した 結婚しました。 自分が実家と問題を抱えていてしんどい思いをしていたときから支えてくれた人です。 もう自分ひとりの命じゃないと感じます。 妻の応援に応えられるよう、今後もがんばります。\n\b\b\b子どもを授かった 娘が生まれました。 \bコロナ禍の中大変な出産でしたが、無事に生まれてきてくれました。 もう自分ひとりの命じゃないと感じます（2回目）。\nせっかくなので2か月育休を取得し、がっつり子育てに携わりました。 おむつ、ミルク、ギャン泣きの無限ループ世話に精神が削られました。 妻のワンオペでは絶対成り立たなかったと思います。\n職場復帰後も、これまで比べ効率を重視した立ち回りが必要になりました。 土日の勉強時間が確保できなくなり、正直もどかしい思いもしています。\nただ、こうした悩みよりも、子どもが育っていくのを見守る喜びが上回ってくれるのが救いです。 これからどんな子に育つか楽しみです。\n入学試験に申し込んだ 会社の許可が折りたため、2月に社会人博士過程の入学試験を受験する予定です。 無事受かれば、4月から「会社人」「夫」「父」「学生」の4つの肩書を背負うことになります。 正直、去年もけっこう大変だったので、今からやっていける気がしていません。 ただ、これらすべては自分で望んだことなので、頑張ってやり遂げたいです。\n以上、今後ともよろしくお願いします。 皆さま良いお年を！\nAmazonウィッシュリスト\n","permalink":"https://inody.github.io/posts/lookback-2020/","summary":"気づけば年の瀬です。 今年はコロナ禍で在宅勤務が一定期間続いたためか、矢のように時間が過ぎたと感じます。\n自分は割と一人が好きなので、はじめのうちはリモートワークを歓迎し、集中して作業を進めることができました。 しかし後半になると、生活リズムがずれるとともに倦怠感を覚え始め、作業効率がガタ落ちしてしまいました。\nそのせいか、今年度のアウトプット目標は「年度末までに3本投稿」でしたが、今の所2本しか投稿できていません。 うち1本はリジェクト、もう1本はアクセプトでした。 どちらも自分としてはハードルが高い雑誌だったので、1本アクセプトされたことは十分検討したとも言えそうです。 ただ、あと1本投稿できる見込みはまったく立っていません。 なんとか希望が見えるところまで頑張りたいです。\n下記、今年経験したイベントと、来年経験するイベントです。\n結婚した 結婚しました。 自分が実家と問題を抱えていてしんどい思いをしていたときから支えてくれた人です。 もう自分ひとりの命じゃないと感じます。 妻の応援に応えられるよう、今後もがんばります。\n\b\b\b子どもを授かった 娘が生まれました。 \bコロナ禍の中大変な出産でしたが、無事に生まれてきてくれました。 もう自分ひとりの命じゃないと感じます（2回目）。\nせっかくなので2か月育休を取得し、がっつり子育てに携わりました。 おむつ、ミルク、ギャン泣きの無限ループ世話に精神が削られました。 妻のワンオペでは絶対成り立たなかったと思います。\n職場復帰後も、これまで比べ効率を重視した立ち回りが必要になりました。 土日の勉強時間が確保できなくなり、正直もどかしい思いもしています。\nただ、こうした悩みよりも、子どもが育っていくのを見守る喜びが上回ってくれるのが救いです。 これからどんな子に育つか楽しみです。\n入学試験に申し込んだ 会社の許可が折りたため、2月に社会人博士過程の入学試験を受験する予定です。 無事受かれば、4月から「会社人」「夫」「父」「学生」の4つの肩書を背負うことになります。 正直、去年もけっこう大変だったので、今からやっていける気がしていません。 ただ、これらすべては自分で望んだことなので、頑張ってやり遂げたいです。\n以上、今後ともよろしくお願いします。 皆さま良いお年を！\nAmazonウィッシュリスト","title":"2020年の振り返り"},{"content":"タイトルについてです。\nlineno.styを使うのですが、そのまま用いても以下の問題がありました。\n右ページの番号が真ん中に来ちゃう ページごとに番号が改まらない 数式のところでカウントがバグる ちょっと長いですが、以下のようにすると解決しました。 オプションにpagewiseを指定するのがポイントです。\n\\usepackage[switch,pagewise]{lineno} \\newcommand*\\patchAmsMathEnvironmentForLineno[1]{ \\expandafter\\let\\csname old#1\\expandafter\\endcsname\\csname #1\\endcsname \\expandafter\\let\\csname oldend#1\\expandafter\\endcsname\\csname end#1\\endcsname \\renewenvironment{#1} {\\linenomath\\csname old#1\\endcsname} {\\csname oldend#1\\endcsname\\endlinenomath}} \\newcommand*\\patchBothAmsMathEnvironmentsForLineno[1]{ \\patchAmsMathEnvironmentForLineno{#1} \\patchAmsMathEnvironmentForLineno{#1*}} \\AtBeginDocument{ \\patchBothAmsMathEnvironmentsForLineno{equation} \\patchBothAmsMathEnvironmentsForLineno{align} \\patchBothAmsMathEnvironmentsForLineno{flalign} \\patchBothAmsMathEnvironmentsForLineno{alignat} \\patchBothAmsMathEnvironmentsForLineno{gather} \\patchBothAmsMathEnvironmentsForLineno{multline} } \\linenumbers ","permalink":"https://inody.github.io/posts/latex-two-cols/","summary":"タイトルについてです。\nlineno.styを使うのですが、そのまま用いても以下の問題がありました。\n右ページの番号が真ん中に来ちゃう ページごとに番号が改まらない 数式のところでカウントがバグる ちょっと長いですが、以下のようにすると解決しました。 オプションにpagewiseを指定するのがポイントです。\n\\usepackage[switch,pagewise]{lineno} \\newcommand*\\patchAmsMathEnvironmentForLineno[1]{ \\expandafter\\let\\csname old#1\\expandafter\\endcsname\\csname #1\\endcsname \\expandafter\\let\\csname oldend#1\\expandafter\\endcsname\\csname end#1\\endcsname \\renewenvironment{#1} {\\linenomath\\csname old#1\\endcsname} {\\csname oldend#1\\endcsname\\endlinenomath}} \\newcommand*\\patchBothAmsMathEnvironmentsForLineno[1]{ \\patchAmsMathEnvironmentForLineno{#1} \\patchAmsMathEnvironmentForLineno{#1*}} \\AtBeginDocument{ \\patchBothAmsMathEnvironmentsForLineno{equation} \\patchBothAmsMathEnvironmentsForLineno{align} \\patchBothAmsMathEnvironmentsForLineno{flalign} \\patchBothAmsMathEnvironmentsForLineno{alignat} \\patchBothAmsMathEnvironmentsForLineno{gather} \\patchBothAmsMathEnvironmentsForLineno{multline} } \\linenumbers ","title":"LaTeXで2カラムの原稿の両側にページごとの行番号を振る"},{"content":"大体の問題は、数式か引用文献で発生するので、これらをdiffから除外してあげればよい：\nlatexdiff old.tex new.tex \u0026gt; diff.tex --exclude-safecmd=\u0026#34;cite\u0026#34; --math-markup=0 ","permalink":"https://inody.github.io/posts/latexdiff-tips/","summary":"大体の問題は、数式か引用文献で発生するので、これらをdiffから除外してあげればよい：\nlatexdiff old.tex new.tex \u0026gt; diff.tex --exclude-safecmd=\u0026#34;cite\u0026#34; --math-markup=0 ","title":"latexdiffでコンパイルエラーを回避したい"},{"content":"概要 Dropbox便利ですよね。 何が便利って、真にマルチプラットフォームのクラウドストレージって、これくらいしかないという点です。\nGoogle-Driveは便利ですが、何故かDebianに公式アプリが提供されておらず、サードパーティ製のアプリでなんとかする必要があります。 griveやgoogle drive ocamlfuseなどがあるなかで、自分は一時期rcloneを使って運用していました。 cronと組み合わせることでほぼリアルタイムな動機ができるのですが、API制限に引っかかると同期されないことがあるのが厄介でした。\nまた一時期はiCloudDriveにもトライしていました。 Apple製品で閉じているときは便利ですが、ubuntuとの連携はほとんど不可能といってよさそうです。\n結局Dropboxに戻ってくるのですが、無料プランだと同時接続数に制限があるのが問題です。 今回それを無料のまま解除する指針を得たのでメモしておきます。\n突破の手がかり まともに全部書くと、どこかから怒られそうなので、指針だけメモしておきます。 下記の事実をよく読みましょう：\n有料のDropbox Professionalプランには同時接続端末数制限はない 有料プランには試用期間が設定されている すでに接続が認証されている端末が3台以上の場合、3台の制限が発生したタイミングで端末の認証が解除されるわけではない この2つの事実を紐付けて考えれば、答えは自ずと出てくると思います。\nまとめ 怒られたらすぐ消します。\n","permalink":"https://inody.github.io/posts/dropbox-free/","summary":"概要 Dropbox便利ですよね。 何が便利って、真にマルチプラットフォームのクラウドストレージって、これくらいしかないという点です。\nGoogle-Driveは便利ですが、何故かDebianに公式アプリが提供されておらず、サードパーティ製のアプリでなんとかする必要があります。 griveやgoogle drive ocamlfuseなどがあるなかで、自分は一時期rcloneを使って運用していました。 cronと組み合わせることでほぼリアルタイムな動機ができるのですが、API制限に引っかかると同期されないことがあるのが厄介でした。\nまた一時期はiCloudDriveにもトライしていました。 Apple製品で閉じているときは便利ですが、ubuntuとの連携はほとんど不可能といってよさそうです。\n結局Dropboxに戻ってくるのですが、無料プランだと同時接続数に制限があるのが問題です。 今回それを無料のまま解除する指針を得たのでメモしておきます。\n突破の手がかり まともに全部書くと、どこかから怒られそうなので、指針だけメモしておきます。 下記の事実をよく読みましょう：\n有料のDropbox Professionalプランには同時接続端末数制限はない 有料プランには試用期間が設定されている すでに接続が認証されている端末が3台以上の場合、3台の制限が発生したタイミングで端末の認証が解除されるわけではない この2つの事実を紐付けて考えれば、答えは自ずと出てくると思います。\nまとめ 怒られたらすぐ消します。","title":"Dropboxの同時接続端末数制限を突破したい"},{"content":"概要 最近のコロナの騒ぎを受けて、弊社でもリモートワークが始まりました。 今まで社内では、macbookからデスクトップubuntuにsshでログインして作業していたんですが、異なるネットワークを介して接続したことはありませんでした。 弊社のネットワークはセキュリティを意識してか、vpn環境に入るとsshできず、rdpならできるという謎仕様なので、それならということでubuntuにxrdpサーバーを立ち上げてみました。 同様の記事は他にもたくさんあるのですが（例えばこことか）、あちこち情報が散らばってて設定に苦労したので、備忘録として残しておきます。\n環境 繋ぐ方：macOS 繋がれる方：ubuntu mate 18.04 ubuntu側の設定 まずRDPをするのに必要なパッケージをインストールします。\nsudo apt install xrdp xorg xorgxrdp xorgxrdpを入れるのを忘れていると、リモートログイン出来ても、その後ブラックスクリーンになるので注意します（ここでハマった）。\nつぎに、ログイン後のカーソル周りの不具合を治すために、/etc/xrdp/xrdp.iniでつぎの行を書き換えます。\n書き換え前：\nnew_cursors=true 書き換え後：\nnew_cursors=false さらに、~/.xsessionにつぎのコマンドを書き加えます：\nunset DBUS_SESSION_BUS_ADDRESS export GTK_IM_MODULE=ibus export QT_IM_MODULE=ibus export XMODIFIERS=\u0026#34;@im=ibus\u0026#34; ibus-daemon -rdx exec mate-session ほかの方の記事では、/etc/xrdp/startwm.shに書き込んでいたのですが、こっちに落ち着きました。 また~/.xsessionrcは空のままにしておきます。\n最後に~/.zshrcの下の方につぎを加えます。\nexport \u0026#34;LIBGL_ALWAYS_INDIRECT=1\u0026#34; unset SESSION_MANAGER 正直何がなんだかわからないまま試行錯誤した結果、上記の設定でつなげるようになりました。\nmac側の設定 まずmicrosoft remote desktop clientをインストールします。 App Storeからダウンロードしてください。\n起動したら、新規のPCを追加し、\nPC name: ubuntuのipアドレス user account: ubuntuのユーザ名とパスワード とします。 これで保存し、接続したらつなげるはずです。\n","permalink":"https://inody.github.io/posts/ubuntu-mate-xrdp/","summary":"概要 最近のコロナの騒ぎを受けて、弊社でもリモートワークが始まりました。 今まで社内では、macbookからデスクトップubuntuにsshでログインして作業していたんですが、異なるネットワークを介して接続したことはありませんでした。 弊社のネットワークはセキュリティを意識してか、vpn環境に入るとsshできず、rdpならできるという謎仕様なので、それならということでubuntuにxrdpサーバーを立ち上げてみました。 同様の記事は他にもたくさんあるのですが（例えばこことか）、あちこち情報が散らばってて設定に苦労したので、備忘録として残しておきます。\n環境 繋ぐ方：macOS 繋がれる方：ubuntu mate 18.04 ubuntu側の設定 まずRDPをするのに必要なパッケージをインストールします。\nsudo apt install xrdp xorg xorgxrdp xorgxrdpを入れるのを忘れていると、リモートログイン出来ても、その後ブラックスクリーンになるので注意します（ここでハマった）。\nつぎに、ログイン後のカーソル周りの不具合を治すために、/etc/xrdp/xrdp.iniでつぎの行を書き換えます。\n書き換え前：\nnew_cursors=true 書き換え後：\nnew_cursors=false さらに、~/.xsessionにつぎのコマンドを書き加えます：\nunset DBUS_SESSION_BUS_ADDRESS export GTK_IM_MODULE=ibus export QT_IM_MODULE=ibus export XMODIFIERS=\u0026#34;@im=ibus\u0026#34; ibus-daemon -rdx exec mate-session ほかの方の記事では、/etc/xrdp/startwm.shに書き込んでいたのですが、こっちに落ち着きました。 また~/.xsessionrcは空のままにしておきます。\n最後に~/.zshrcの下の方につぎを加えます。\nexport \u0026#34;LIBGL_ALWAYS_INDIRECT=1\u0026#34; unset SESSION_MANAGER 正直何がなんだかわからないまま試行錯誤した結果、上記の設定でつなげるようになりました。\nmac側の設定 まずmicrosoft remote desktop clientをインストールします。 App Storeからダウンロードしてください。\n起動したら、新規のPCを追加し、\nPC name: ubuntuのipアドレス user account: ubuntuのユーザ名とパスワード とします。 これで保存し、接続したらつなげるはずです。","title":"macからubuntu mateにxrdpでリモートログイン"},{"content":"最近引っ越しました。 WFHも続きそうだし、これまでちょっとずつ揃えてきたデスク周りの環境をまとめておきます。 全体像はこんな感じ。\n机（17k）\nIKEAで買ったテーブルトップに脚をくっつけたもの。脚を細いやつにしたためちょっとぐらつくけど、許容範囲内。 https://www.ikea.com/jp/ja/p/gerton-table-top-beech-30162246/ https://www.ikea.com/jp/ja/p/olov-leg-adjustable-black-90264303/ 椅子（20k）\nメルカリで買ったミラチェア。 座面が死んでたのでAmazonで買った低反発マットを敷いて使っている。 腰痛もちだったが、毎日プランクしてこれに座っているとけっこう改善された。 PC（160k）\nmacbook pro 13 inch 2017 家では重い作業はしないのでこれで十分だったが、在宅勤務が始まったのでもう少しいいマシンがほしい。 まだ購入して2年ほどだが早くもバッテリーが膨張してきた（替え時かもしれない）。 キーボード（33k）\nHHKB Professional Type-S 職場で使っているキーボードに合わせて自宅でも購入。 ポインタ（4k）\nLogicool M575 将来macOS以外のOSを導入したときのために導入。 MxErgoと迷ったが、HHKBと合わせて電池式にした。 モニタ（33k）\nPhilipsのPH15875856というモニタ。4Kは自分にはオーバースペックだと感じたため、31.5型、WQHD、usb-cで接続できるモニタで探した。 最初発色が狂っていたが、ドライバを更新して設定をいろいろ変えるうちに改善した。 https://www.philips.co.jp/c-p/328P6AUBREB_11/brilliance-lcd-monitor-with-usb-c-dock モニタアーム（5k）\nHPのモニタアーム。メルカリで購入。 モニタが重いため、少しぐらつく。 HP(ヒューレット・パッカード) HP(ヒューレット・パッカード) シングルモニターアーム BT861AA PCスタンド（2k）\nクラムシェルモードでPC立てておくためのスタンド。木製でいい感じ。これもメルカリ。 スピーカー（12k）\nOnkyoのGX-100HD。アンプ内蔵、デジタル入力（光ケーブル or 同軸）が使える機種で探した（おなじみメルカリ）。 音の粒感が安いスピーカーとは違うので気に入っている。 低音が少し弱いというレビューも見かけるけど、自分にはちょうどよい。 ONKYO WAVIO パワードスピーカーシステム 15W+15W GX-100HD(B) USB-DAC（3k）\nかつてモニタ裏面のアナログ端子からスピーカーにつないで音を流していたが、ノイズが鳴るようになったため導入（モニタの端子の劣化が原因？）。 DACをモニタ裏のUSB端子に挿しておけば、PCをモニタに挿すことで自動的に出力がデジタルに切り替わるようにできる。 DACもスピーカーも24bit/96kHzの音源に対応しているため、ハイレゾも一応流せるようになった。 FX-AUDIO- FX-D03J USBバスパワー駆動DDC HHKBやトラックボールを買ったりしてたら10万円を超えてしまいました。 あとは机の脚をなんとかしたいのと、PC本体を買い替えたい。 お仕事もがんばります。\n","permalink":"https://inody.github.io/posts/wfh/","summary":"最近引っ越しました。 WFHも続きそうだし、これまでちょっとずつ揃えてきたデスク周りの環境をまとめておきます。 全体像はこんな感じ。\n机（17k）\nIKEAで買ったテーブルトップに脚をくっつけたもの。脚を細いやつにしたためちょっとぐらつくけど、許容範囲内。 https://www.ikea.com/jp/ja/p/gerton-table-top-beech-30162246/ https://www.ikea.com/jp/ja/p/olov-leg-adjustable-black-90264303/ 椅子（20k）\nメルカリで買ったミラチェア。 座面が死んでたのでAmazonで買った低反発マットを敷いて使っている。 腰痛もちだったが、毎日プランクしてこれに座っているとけっこう改善された。 PC（160k）\nmacbook pro 13 inch 2017 家では重い作業はしないのでこれで十分だったが、在宅勤務が始まったのでもう少しいいマシンがほしい。 まだ購入して2年ほどだが早くもバッテリーが膨張してきた（替え時かもしれない）。 キーボード（33k）\nHHKB Professional Type-S 職場で使っているキーボードに合わせて自宅でも購入。 ポインタ（4k）\nLogicool M575 将来macOS以外のOSを導入したときのために導入。 MxErgoと迷ったが、HHKBと合わせて電池式にした。 モニタ（33k）\nPhilipsのPH15875856というモニタ。4Kは自分にはオーバースペックだと感じたため、31.5型、WQHD、usb-cで接続できるモニタで探した。 最初発色が狂っていたが、ドライバを更新して設定をいろいろ変えるうちに改善した。 https://www.philips.co.jp/c-p/328P6AUBREB_11/brilliance-lcd-monitor-with-usb-c-dock モニタアーム（5k）\nHPのモニタアーム。メルカリで購入。 モニタが重いため、少しぐらつく。 HP(ヒューレット・パッカード) HP(ヒューレット・パッカード) シングルモニターアーム BT861AA PCスタンド（2k）\nクラムシェルモードでPC立てておくためのスタンド。木製でいい感じ。これもメルカリ。 スピーカー（12k）\nOnkyoのGX-100HD。アンプ内蔵、デジタル入力（光ケーブル or 同軸）が使える機種で探した（おなじみメルカリ）。 音の粒感が安いスピーカーとは違うので気に入っている。 低音が少し弱いというレビューも見かけるけど、自分にはちょうどよい。 ONKYO WAVIO パワードスピーカーシステム 15W+15W GX-100HD(B) USB-DAC（3k）\nかつてモニタ裏面のアナログ端子からスピーカーにつないで音を流していたが、ノイズが鳴るようになったため導入（モニタの端子の劣化が原因？）。 DACをモニタ裏のUSB端子に挿しておけば、PCをモニタに挿すことで自動的に出力がデジタルに切り替わるようにできる。 DACもスピーカーも24bit/96kHzの音源に対応しているため、ハイレゾも一応流せるようになった。 FX-AUDIO- FX-D03J USBバスパワー駆動DDC HHKBやトラックボールを買ったりしてたら10万円を超えてしまいました。 あとは机の脚をなんとかしたいのと、PC本体を買い替えたい。 お仕事もがんばります。","title":"15万円で揃える在宅環境"},{"content":"約一年ぶりのブログ更新です。 昨年は、公私ともに転換点を迎えた年でした。\n仕事では愛知から東京への転勤を経験しました。 基本的に業務内容は地続きで、愛知での研究テーマに引き続き取り組んでいました。 対外的なアウトプットとして、査読付き国際学会採択2本、査読付き論文誌採択2本、特許出願1件を経験することができました。\nまたプライベートでは、実家にいた父が亡くなりました。 父は10年の長きに渡り心の病気に苦しみつづけていました。 病気の苦しみは家族に向かい、僕は逃げることしかできなかった。 訃報を聞いたときは、正直悲しみより安堵を感じてしまいました。 それまで生活を共にしていた祖母も叔父の家に越すことになり、実家には母だけが残る形になりました。 父の死に対して自分がベストを尽くしたとは到底言えないし、罪悪感で今も父の悪夢を見る。 罪滅ぼしかもしれませんが、せめてこれからはずっと味方でいてくれた母の力になれたらと思います。\n今年は東京ならではの業務が本格的に始まり、仕事がますます充実しそうです。 ただ、それ以上に私生活が忙しくなりそうで、すべてを満足にこなすのは無理だと予想しています。 自分にとって大事なものを見極め、身近な人たちに心を尽くすことを大事にして、日々を過ごそうと思います。\n本年もよろしくお願いします。\n","permalink":"https://inody.github.io/posts/new-year-2020/","summary":"約一年ぶりのブログ更新です。 昨年は、公私ともに転換点を迎えた年でした。\n仕事では愛知から東京への転勤を経験しました。 基本的に業務内容は地続きで、愛知での研究テーマに引き続き取り組んでいました。 対外的なアウトプットとして、査読付き国際学会採択2本、査読付き論文誌採択2本、特許出願1件を経験することができました。\nまたプライベートでは、実家にいた父が亡くなりました。 父は10年の長きに渡り心の病気に苦しみつづけていました。 病気の苦しみは家族に向かい、僕は逃げることしかできなかった。 訃報を聞いたときは、正直悲しみより安堵を感じてしまいました。 それまで生活を共にしていた祖母も叔父の家に越すことになり、実家には母だけが残る形になりました。 父の死に対して自分がベストを尽くしたとは到底言えないし、罪悪感で今も父の悪夢を見る。 罪滅ぼしかもしれませんが、せめてこれからはずっと味方でいてくれた母の力になれたらと思います。\n今年は東京ならではの業務が本格的に始まり、仕事がますます充実しそうです。 ただ、それ以上に私生活が忙しくなりそうで、すべてを満足にこなすのは無理だと予想しています。 自分にとって大事なものを見極め、身近な人たちに心を尽くすことを大事にして、日々を過ごそうと思います。\n本年もよろしくお願いします。","title":"新年を迎えて"},{"content":"久しぶりの投稿、しかも旬がすぎたタイトルでの投稿です。\n2018年は大企業特有の闇の1年研修を終え、ようやく研究業務を始められた年でした。 企業研究所の研究環境といえば、先日kumagi氏の例の記事がバズりましたね。 記事を読んで、企業研究所の研究環境はどこも似たり寄ったりで、弊社の研究環境も他と同程度には恵まれているのかなという感じがしました。 いろいろ言いたいことはありますが、自分は配属がアタリで、大学のように自由に研究させてもらえる部署だったこともあり、文句を言う前に成果を出さねばと言う気持ちです。\n業務内容は物理に近い分野で、自分に馴染みが薄かったため、足りない知識を補うための勉強からはじめました。 業務時間に学べる環境は大変ありがたく、色々な本を発注しては読みふける日々を送っています。 初めのうちは熱統計や流体力学の本を読んでいたのですが、気がつけば仕事に直結しない数学の本まで仕入れ始めていました。\n本記事ではその中で読んで良かったと思うものを紹介します。\nまず田崎先生の「統計力学」です。 以前統計力学に触れたときは、何が仮定で何が結論かがわかりづらく感じたのですが、本書は納得できる仮定を列挙した上で、力学的な仕事をすべての出発点として議論を展開しているので、数学的にもWell-definedな本だと感じました。 また数理物理の本は行間を推測させるような最小限の記述に留められることが多いと思いますが、本書はそれとは真逆の読み物のような文体で書かれているので、初学者にもとっつきやすく感じられました。 とはいえ内容はしっかりしているため自分もすべて網羅できたわけではなく、今後も手に取り続ける本になりそうです。\n次に山田先生の「工学のための関数解析」です。 さまざまな分野に登場する関数解析ですが、自分はとある論文の中で偏微分方程式の解の存在証明に半群の理論が出てきたため、勉強し始めました。 Twitterでおすすめされていた本書を試し読みなしにポチったのですが、これがかなり良くて、数学の厳密さを犠牲にすることなく、概念の「心」をしっかり伝えている本でした。 関数の連続性や収束性と聞くと身構えてしまいますが、「解析の対象が関数になっても、関数を距離で実数に写してあげて、そこで連続性や収束性を考えればよい」と宣言してあるのは目から鱗でした。\nこちらもまだ読了したわけではなく、会社の同期と読み会を進めているところです（いつ終わるのやら）。 本書はスペクトル理論や半群の理論はカバーしていないため、読み終わったら次は黒田先生の「関数解析」を読もうと思います。\n最後に兼清先生の「確率微分方程式とその応用」です。 確率過程は今まで何度も挑戦しようとした分野なのですが、前提知識が多すぎて挫折を繰り返してきました。 確率を数学の土台に乗せるには測度論の知識が必要ですし、確率過程のサンプルパスは関数になるので、収束性の議論などに関数解析の知識が必要になります。 そのため一から勉強を初めて確率過程の定義に辿り着くころには、土台の部分の知識を忘れてしまうという悲しい現実に直面します。\nこんなときにありがたいのは、最小限の用語を定義しながら、時には証明を犠牲にして、ストーリーを重視して伝えてくれるような本であり、本書もまたそのような形式をとっています。 フィルトレーションやマルチンゲールといったつまづきやすい概念の裏にある気持ちをしっかり伝えた上で定理を述べ、その使い方まで提示してくれているのはありがたい限りです（それでも理解できないのは僕の頭がポンコツなのでしょう）。 似たテイストの本として、B.エクセンダールの黄色い本がありますが、自分には兼清本の方がまだリーダーフレンドリーに感じられました。 本書は手にとって間も無く、まだ全然読み進められていないので、引き続き気合い入れて読んでいこうと思います。\n余談ですが、確率自体を公理的に定義してしまえば、測度論なしに確率論を進められるっぽいです。 また確率過程論も測度論なしに展開している本があるようで、小倉先生の「物理・工学のための確率過程論」がそれに当たります。 自分は最初この本から勉強し始めたのですが、どうも本質から逃げているように感じてしまい、本棚に戻してしまいました。\n以上、おすすめでした。\n2018年はインプットは順調でしたが、満足にアウトプット出来なかったことが悔やまれます。 2019年は、引き続き勉強を続けるとともに、アウトプットにも繋げられたらと思います。 目標はつぎの3つです。\n論文3本投稿： 昨年は一本しか書けませんでした。 初年度にしては上々だと思っていたのですが、尊敬する若手の人たちのホームページを眺めると、いくつものpublicationや講演が並んでおり、悔しい気持ちになります。 彼らに少しでも追いつくためにも、今年は最低3本は書きたいです。 Webサービス公開： 毎年アウトプット欲が高まる時期に、フレームワークの勉強だけして、満足して何も作らず終わるという現象が続いています。 去年はFlaskでRestAPIの実装をし、Herokuにアップロードするところまで体験できたので、今年は何かしらのサービスを作って実際に公開するところまで進めたいと思います。 どれだけしょぼくてもいいので、見栄をはらずにアウトプットしたいです。目指せいつでも転職できる人材。 博士課程の行先の決定： 過去に何度も進学を考えたことがあったのですが、資金面が主な理由で断念してきました。 弊社の社会人博士制度は比較的整っており、社内のロビー活動さえうまくいけば、会社に勤めながら学位を目指すことができます。 幸い上司は理解を示してくれており、あとは行き先だけという感じです。 4月から少し職場環境が変わりそうなので、それを活かしていろんな先生に会ってみようと思います。 みなさま今年もよろしくお願いします。\n","permalink":"https://inody.github.io/posts/goal-2019/","summary":"久しぶりの投稿、しかも旬がすぎたタイトルでの投稿です。\n2018年は大企業特有の闇の1年研修を終え、ようやく研究業務を始められた年でした。 企業研究所の研究環境といえば、先日kumagi氏の例の記事がバズりましたね。 記事を読んで、企業研究所の研究環境はどこも似たり寄ったりで、弊社の研究環境も他と同程度には恵まれているのかなという感じがしました。 いろいろ言いたいことはありますが、自分は配属がアタリで、大学のように自由に研究させてもらえる部署だったこともあり、文句を言う前に成果を出さねばと言う気持ちです。\n業務内容は物理に近い分野で、自分に馴染みが薄かったため、足りない知識を補うための勉強からはじめました。 業務時間に学べる環境は大変ありがたく、色々な本を発注しては読みふける日々を送っています。 初めのうちは熱統計や流体力学の本を読んでいたのですが、気がつけば仕事に直結しない数学の本まで仕入れ始めていました。\n本記事ではその中で読んで良かったと思うものを紹介します。\nまず田崎先生の「統計力学」です。 以前統計力学に触れたときは、何が仮定で何が結論かがわかりづらく感じたのですが、本書は納得できる仮定を列挙した上で、力学的な仕事をすべての出発点として議論を展開しているので、数学的にもWell-definedな本だと感じました。 また数理物理の本は行間を推測させるような最小限の記述に留められることが多いと思いますが、本書はそれとは真逆の読み物のような文体で書かれているので、初学者にもとっつきやすく感じられました。 とはいえ内容はしっかりしているため自分もすべて網羅できたわけではなく、今後も手に取り続ける本になりそうです。\n次に山田先生の「工学のための関数解析」です。 さまざまな分野に登場する関数解析ですが、自分はとある論文の中で偏微分方程式の解の存在証明に半群の理論が出てきたため、勉強し始めました。 Twitterでおすすめされていた本書を試し読みなしにポチったのですが、これがかなり良くて、数学の厳密さを犠牲にすることなく、概念の「心」をしっかり伝えている本でした。 関数の連続性や収束性と聞くと身構えてしまいますが、「解析の対象が関数になっても、関数を距離で実数に写してあげて、そこで連続性や収束性を考えればよい」と宣言してあるのは目から鱗でした。\nこちらもまだ読了したわけではなく、会社の同期と読み会を進めているところです（いつ終わるのやら）。 本書はスペクトル理論や半群の理論はカバーしていないため、読み終わったら次は黒田先生の「関数解析」を読もうと思います。\n最後に兼清先生の「確率微分方程式とその応用」です。 確率過程は今まで何度も挑戦しようとした分野なのですが、前提知識が多すぎて挫折を繰り返してきました。 確率を数学の土台に乗せるには測度論の知識が必要ですし、確率過程のサンプルパスは関数になるので、収束性の議論などに関数解析の知識が必要になります。 そのため一から勉強を初めて確率過程の定義に辿り着くころには、土台の部分の知識を忘れてしまうという悲しい現実に直面します。\nこんなときにありがたいのは、最小限の用語を定義しながら、時には証明を犠牲にして、ストーリーを重視して伝えてくれるような本であり、本書もまたそのような形式をとっています。 フィルトレーションやマルチンゲールといったつまづきやすい概念の裏にある気持ちをしっかり伝えた上で定理を述べ、その使い方まで提示してくれているのはありがたい限りです（それでも理解できないのは僕の頭がポンコツなのでしょう）。 似たテイストの本として、B.エクセンダールの黄色い本がありますが、自分には兼清本の方がまだリーダーフレンドリーに感じられました。 本書は手にとって間も無く、まだ全然読み進められていないので、引き続き気合い入れて読んでいこうと思います。\n余談ですが、確率自体を公理的に定義してしまえば、測度論なしに確率論を進められるっぽいです。 また確率過程論も測度論なしに展開している本があるようで、小倉先生の「物理・工学のための確率過程論」がそれに当たります。 自分は最初この本から勉強し始めたのですが、どうも本質から逃げているように感じてしまい、本棚に戻してしまいました。\n以上、おすすめでした。\n2018年はインプットは順調でしたが、満足にアウトプット出来なかったことが悔やまれます。 2019年は、引き続き勉強を続けるとともに、アウトプットにも繋げられたらと思います。 目標はつぎの3つです。\n論文3本投稿： 昨年は一本しか書けませんでした。 初年度にしては上々だと思っていたのですが、尊敬する若手の人たちのホームページを眺めると、いくつものpublicationや講演が並んでおり、悔しい気持ちになります。 彼らに少しでも追いつくためにも、今年は最低3本は書きたいです。 Webサービス公開： 毎年アウトプット欲が高まる時期に、フレームワークの勉強だけして、満足して何も作らず終わるという現象が続いています。 去年はFlaskでRestAPIの実装をし、Herokuにアップロードするところまで体験できたので、今年は何かしらのサービスを作って実際に公開するところまで進めたいと思います。 どれだけしょぼくてもいいので、見栄をはらずにアウトプットしたいです。目指せいつでも転職できる人材。 博士課程の行先の決定： 過去に何度も進学を考えたことがあったのですが、資金面が主な理由で断念してきました。 弊社の社会人博士制度は比較的整っており、社内のロビー活動さえうまくいけば、会社に勤めながら学位を目指すことができます。 幸い上司は理解を示してくれており、あとは行き先だけという感じです。 4月から少し職場環境が変わりそうなので、それを活かしていろんな先生に会ってみようと思います。 みなさま今年もよろしくお願いします。","title":"2018年に読んでよかった本 \u0026 2019年の目標"},{"content":"$x(t)\\in\\mathbb R$の時間発展が、つぎの非線形ランジュバン方程式 $$ \\dot x(t) = f(x(t)) + R(t) $$ で表されるとする。 ここで、$f:\\mathbb R\\to\\mathbb R$は関数、$R:\\mathbb R\\to\\mathbb R$はランダム力である。 $R(t)$はつぎの仮定を満たすとする。\n$R(t)$はガウス過程。 すなわち、$t_1,\\ldots,t_k$を選んだとき、$R(t_1,\\ldots,t_k):=(R(t_1),\\ldots,R(t_k))$が多次元正規分布に従う。 $\\mathbb E[R(t)] = 0. $ $\\mathbb E[R(t)R(t\u0026rsquo;)] = D\\delta(t-t\u0026rsquo;)$, ただし$D$は正の定数。 $x(t)$と$R(t\u0026rsquo;)$が$t\u0026lt;t\u0026rsquo;$で独立。 時刻$t$に$x(t)$が$[x,x+dx]$にある確率を$p(x,t)dx$と定義する。 $p(x,t)$を分布関数という。 $p(x,t)$はつぎの仮定を満たすとする。\n$x\\to\\pm\\infty$で$p(x,t)\\to 0. $ $x\\to\\pm\\infty$で$\\frac{\\partial p(x,t)}{\\partial x}\\to 0. $ このとき、$p(x,t)$はつぎのフォッカープランク方程式に従う。 $$ \\frac{\\partial p(x,t)}{\\partial t} = \\left( -\\frac{\\partial }{\\partial x}f(x) + \\frac{\\partial^2}{\\partial x^2}\\frac{D}{2} \\right) p(x,t) $$\n証明はいろんなところに載ってる。 あとで追記するかも。\n","permalink":"https://inody.github.io/posts/langevin-fokkerplanck/","summary":"$x(t)\\in\\mathbb R$の時間発展が、つぎの非線形ランジュバン方程式 $$ \\dot x(t) = f(x(t)) + R(t) $$ で表されるとする。 ここで、$f:\\mathbb R\\to\\mathbb R$は関数、$R:\\mathbb R\\to\\mathbb R$はランダム力である。 $R(t)$はつぎの仮定を満たすとする。\n$R(t)$はガウス過程。 すなわち、$t_1,\\ldots,t_k$を選んだとき、$R(t_1,\\ldots,t_k):=(R(t_1),\\ldots,R(t_k))$が多次元正規分布に従う。 $\\mathbb E[R(t)] = 0. $ $\\mathbb E[R(t)R(t\u0026rsquo;)] = D\\delta(t-t\u0026rsquo;)$, ただし$D$は正の定数。 $x(t)$と$R(t\u0026rsquo;)$が$t\u0026lt;t\u0026rsquo;$で独立。 時刻$t$に$x(t)$が$[x,x+dx]$にある確率を$p(x,t)dx$と定義する。 $p(x,t)$を分布関数という。 $p(x,t)$はつぎの仮定を満たすとする。\n$x\\to\\pm\\infty$で$p(x,t)\\to 0. $ $x\\to\\pm\\infty$で$\\frac{\\partial p(x,t)}{\\partial x}\\to 0. $ このとき、$p(x,t)$はつぎのフォッカープランク方程式に従う。 $$ \\frac{\\partial p(x,t)}{\\partial t} = \\left( -\\frac{\\partial }{\\partial x}f(x) + \\frac{\\partial^2}{\\partial x^2}\\frac{D}{2} \\right) p(x,t) $$\n証明はいろんなところに載ってる。 あとで追記するかも。","title":"Langevin方程式とFokker-Planck方程式の対応"},{"content":"OpenCVは画像処理に触れたことのある人ならば知らない人はいないと言われるほど有名なライブラリですが、本日はそのモジュールの一つである、AR用ライブラリArUcoを用いて、物体の位置計測をしてみます。\nネットにはC++の記事がたくさん転がっているのですが、Pythonを用いた記事が少ないように感じたため、備忘録として\bブログに残そうと思った次第です。\nやりたいこと 机の上に座標系\bを設定し（横の辺が$x$軸、縦の辺が$y$軸とか）、机の上を動き回る物体（小型ロボットとか）の位置座標を、机を撮影するカメラの映像から推定したいです。\n準備 \b PCにPythonはインストールされているとし、OpenCVのインストールから行います。\npip install opencv-contrib-python 動作確認を行いましょう。\nimport cv2 aruco = cv2.aruco help(aruco) それっぽい文章がわちゃわちゃ出てきたら、インストール成功です。\nマーカー生成 ArUcoでは、QRコードのような2次元マーカーを生成し、画像中から生成されたマーカーを認識することができます。 画像の生成は以下のように行います。\ndictionary = aruco.getPredefinedDictionary(aruco.DICT_4X4_50) for i in range(5): marker = aruco.drawMarker(dictionary, i+1, 100) cv2.imwrite('ar_marker'+str(i+1)+'.png', marker) ここで、getPredefinedDictionaryはマーカーが格納されている辞書を呼び出す関数であり、DICT_4X4_50は辞書の種類を表します。 また、forループの中では、drawMarkerでidが$i+1$のマーカーを呼び出し、imwriteで\b呼び出したマーカーを保存しています。\n生成された画像\bはつぎのようになります。\n今回マーカーは5つ呼び出しました。 1\bつは物体に設置し、認識するためのもので、残りの4つは座標変換のためのものです。\nマーカー検出 \b画像中のマーカーを検出するためのコードが以下です。\nimg = cv2.imread('img.jpg') corners, ids, rejectedImgPoints = aruco.detectMarkers(img, dictionary) img_marked = aruco.drawDetectedMarkers(img, corners, ids) cv2.imwrite('img_marked.png', img_marked) detectMarkersで、画像からマーカーを認識します（たった一行！）。 戻り値であるcornersとidsは、それぞれ検出された\bマーカーの座標とidが格納されたリストです。\n\b先ほど生成された画像をモニタに表示させ、手元のカメラで撮影したものを認識させてみました。 結果がつぎのようになります。\n座標変換 ArUcoでは、\b画像中のマーカーの位置を検出することができますが、\bその位置座標は机の上の座標と必ずしも一致しません。 このため、机の上に座標変換用のマーカーを設置し、それらを用いて座標変換を行うことにします。 この作業は、ArUcoではなく、OpenCVライブラリによって実現できます。\nmarker_coordinates = np.float32(moments) true_coordinates = np.float32([[0.,0.],[0.,1000.],[1000.,0.],[1000.,1000.]]) trans_mat = cv2.getPerspectiveTransform(marker_coordinates,true_coordinates) img_trans = cv2.warpPerspective(original_img,trans_mat,(width, height)) cv2.imwrite('img_trans.png', img_trans) marker_coordinatesは、\bdetectMarkersで検出された、座標変換用のマーカーの座標を表します。 また、true_coordinatesは、それらの座標が、机の上のどの座標に対応するかを表します。 これら2つの座標変換を行うためには、getPerspectiveTransformという関数を用います（これもたった一行！）。\n先の画像を座標変換した結果がつぎです。 \b\b（上下が逆になっていますが、）\b上から撮影したように画像が変換されていることがわかります。\n実践 さて、ここまで紹介した関数を用いて、あらかじめ記録しておいた動画を1フレームずつ読み込み、マーカーの認識と座標変換を行い、物体の位置計測を\bするコードを書いてみました。\n#%% import numpy as np import cv2 aruco = cv2.aruco import matplotlib.pyplot as plt WINDOW_NAME = \u0026quot;\bwindow\u0026quot; ORG_FILE_NAME = \u0026quot;IMG_0888.MOV\u0026quot; NEW_FILE_NAME = \u0026quot;new.avi\u0026quot; #%% def calcMoments(corners,ids): moments = np.empty((len(corners),2)) for i in range(len(corners)): index = int(ids[i])-1 moments[index] = np.mean(corners[i][0],axis=0) return moments def transPos(trans_mat,target_pos): target_pos = np.append(target_pos,1) target_pos_trans = trans_mat@target_pos target_pos_trans = target_pos_trans/target_pos_trans[2] return target_pos_trans[:2] #%% org = cv2.VideoCapture(ORG_FILE_NAME) end_flag, original_img = org.read() width = 1000 height = 1000 fourcc = cv2.VideoWriter_fourcc(*'XVID') rec = cv2.VideoWriter(NEW_FILE_NAME,fourcc, 20.0, (width, height)) cv2.namedWindow(WINDOW_NAME) #%% dictionary = aruco.getPredefinedDictionary(aruco.DICT_4X4_50) corners, ids, rejectedImgPoints = aruco.detectMarkers(original_img, dictionary) img_marked = aruco.drawDetectedMarkers(original_img, corners, ids) cv2.imwrite('detect.png', img_marked) print(all(ids\u0026gt;5)) #%% while(1): corners, ids, rejectedImgPoints = aruco.detectMarkers(original_img, dictionary) if ids.all()!=None and ids.size\u0026gt;4: break end_flag, original_img = org.read() moments = calcMoments(corners,ids) marker_coordinates = np.float32(moments[:4]) true_coordinates = np.float32([[0.,0.],[width,0.],[0.,height],[width,height]]) trans_mat = cv2.getPerspectiveTransform(marker_coordinates,true_coordinates) img_trans = cv2.warpPerspective(original_img,trans_mat,(width, height)) cv2.imwrite('trans.png', img_trans) #%% x_t = [] y_t = [] while end_flag == True: corners, ids, rejectedImgPoints = aruco.detectMarkers(original_img, dictionary) if ids.all()!=None and ids.size==5 and all(ids\u0026lt;=5): moments = calcMoments(corners,ids) marker_coordinates = np.float32(moments[:4]) trans_mat = cv2.getPerspectiveTransform(marker_coordinates,true_coordinates) target_pos = moments[4] trans_pos = transPos(trans_mat,target_pos) x_t.append(trans_pos[0]) y_t.append(trans_pos[1]) img_marked = aruco.drawDetectedMarkers(original_img, corners, ids) img_trans = cv2.warpPerspective(img_marked,trans_mat,(width, height)) else: x_t.append(None) y_t.append(None) img_trans = cv2.warpPerspective(original_img,trans_mat,(width, height)) cv2.imshow(WINDOW_NAME, img_trans) rec.write(img_trans) end_flag, original_img = org.read() cv2.destroyAllWindows() org.release() rec.release() #%% fig = plt.figure() plt.scatter(x_t, y_t) plt.xlabel('x') plt.ylabel('y') plt.savefig(\u0026quot;tragectory.png\u0026quot;, dpi=300) plt.show() 上記のコードを、つぎの動画に適用した結果が、 こちらになります。 先ほどと同じく上下が逆になっていますが、座標変換によって手ブレが抑えられ、さらに位置計測もできていることがわかります。\n\b計測された位置の奇跡\u001dを表示してみましょう。 しっかり位置が計測できていることがわかります。\n","permalink":"https://inody.github.io/posts/opencv/","summary":"OpenCVは画像処理に触れたことのある人ならば知らない人はいないと言われるほど有名なライブラリですが、本日はそのモジュールの一つである、AR用ライブラリArUcoを用いて、物体の位置計測をしてみます。\nネットにはC++の記事がたくさん転がっているのですが、Pythonを用いた記事が少ないように感じたため、備忘録として\bブログに残そうと思った次第です。\nやりたいこと 机の上に座標系\bを設定し（横の辺が$x$軸、縦の辺が$y$軸とか）、机の上を動き回る物体（小型ロボットとか）の位置座標を、机を撮影するカメラの映像から推定したいです。\n準備 \b PCにPythonはインストールされているとし、OpenCVのインストールから行います。\npip install opencv-contrib-python 動作確認を行いましょう。\nimport cv2 aruco = cv2.aruco help(aruco) それっぽい文章がわちゃわちゃ出てきたら、インストール成功です。\nマーカー生成 ArUcoでは、QRコードのような2次元マーカーを生成し、画像中から生成されたマーカーを認識することができます。 画像の生成は以下のように行います。\ndictionary = aruco.getPredefinedDictionary(aruco.DICT_4X4_50) for i in range(5): marker = aruco.drawMarker(dictionary, i+1, 100) cv2.imwrite('ar_marker'+str(i+1)+'.png', marker) ここで、getPredefinedDictionaryはマーカーが格納されている辞書を呼び出す関数であり、DICT_4X4_50は辞書の種類を表します。 また、forループの中では、drawMarkerでidが$i+1$のマーカーを呼び出し、imwriteで\b呼び出したマーカーを保存しています。\n生成された画像\bはつぎのようになります。\n今回マーカーは5つ呼び出しました。 1\bつは物体に設置し、認識するためのもので、残りの4つは座標変換のためのものです。\nマーカー検出 \b画像中のマーカーを検出するためのコードが以下です。\nimg = cv2.imread('img.jpg') corners, ids, rejectedImgPoints = aruco.detectMarkers(img, dictionary) img_marked = aruco.drawDetectedMarkers(img, corners, ids) cv2.imwrite('img_marked.png', img_marked) detectMarkersで、画像からマーカーを認識します（たった一行！）。 戻り値であるcornersとidsは、それぞれ検出された\bマーカーの座標とidが格納されたリストです。\n\b先ほど生成された画像をモニタに表示させ、手元のカメラで撮影したものを認識させてみました。 結果がつぎのようになります。\n座標変換 ArUcoでは、\b画像中のマーカーの位置を検出することができますが、\bその位置座標は机の上の座標と必ずしも一致しません。 このため、机の上に座標変換用のマーカーを設置し、それらを用いて座標変換を行うことにします。 この作業は、ArUcoではなく、OpenCVライブラリによって実現できます。\nmarker_coordinates = np.float32(moments) true_coordinates = np.","title":"OpenCV/ArUcoライブラリで物体位置計測"},{"content":"デルタ関数って結局何なの？ 工学の至る所で現れるデルタ関数。これはよく $$ \\delta(t):= \\begin{cases} \\infty, \u0026amp; t=0\\\\newline 0, \u0026amp; t\\ne 0 \\end{cases}, $$ $$ \\int_\\infty^\\infty \\delta(x-y)f(y)dy = f(x), $$ $$ \\int_\\infty^\\infty \\delta(t)dt = 1 $$ を満たす関数 $\\delta$ という風に定義されていますが、「 $t=0$ は測度0なので、その積分は0になるのでは」と考えたことがある人は多いのではないでしょうか。 実はこの定義は不正確なものであり、「超関数」という概念によって、正確に定義することができます。\n超関数の定義 ある数値を入力するとある数値を出力する装置のことを、関数といいます。 これに対して、ある関数を入力するとある複素数を出力するような装置のことを、汎関数といいます。 汎関数 $F$ に関数 $\\phi$ を入力した時の出力値を $F[\\phi]$ 、または $\\langle F, \\phi \\rangle$ と書きます。以下では後者の書き方を用います。\n全区間で無限回微分可能で、関数値が0でないところが有界区間に限られるような関数の全体からなる集合を $\\mathcal D$ とします。 $\\mathcal D$ 上に属する関数 $\\phi$ をテスト関数と呼びます。 また、 $\\mathcal D$ を定義域とする汎関数を $\\mathcal D$ 上の汎関数と呼びます。\nここで、シュワルツの超関数は、つぎのように定義されます。\n汎関数 $F$ が、\n$\\langle F, \\phi_1 + \\phi_2\\rangle = \\langle F, \\phi_1\\rangle + \\langle F, \\phi_2\\rangle,$ $\\langle F, c\\phi\\rangle = c\\langle F, \\phi\\rangle\\ (c\\in\\mathbb K),$ テスト関数の列 ${\\phi_n}$ が $n\\to\\infty$ で $\\phi$ に収束する時、 $\\langle F, \\phi_n\\rangle$ もまた $\\langle F, \\phi\\rangle$ に収束する を満たすとき、 $F$を超関数という。\n$F$ が超関数であるためには、 $\\mathcal D$ に属する全てのテスト関数が、上の性質を満たさなければなりません。したがって、 $\\mathcal D$ の範囲を狭くとれば、 $F$ は超関数として成り立ちやすくなり、逆もまた然りということが成り立ちます。 今回 $\\mathcal D$は 上のように定義しましたが、超関数のフーリエ変換を考える上では、上の定義では広すぎることが知られています。\n超関数の演算の定義 超関数の演算についていくつか定義します。\n任意のテスト関数 $\\phi$ について $$ \\langle F, \\phi\\rangle = \\langle G, \\phi\\rangle $$ が成り立つとき、「超関数 $F$ と $G$ が等しい」と言います。\n超関数 $F$ を $a$ だけ平行移動した超関数 $F_{x-a}$ を $$ \\langle F_{x-a}, \\phi\\rangle := \\langle F, \\phi(x+a)\\rangle $$ と定義します。\n超関数 $F$ の導超関数 $dF/dx$ を $$ \\langle \\frac{dF}{dx}, \\phi\\rangle := -\\langle F, \\frac{d\\phi}{dx}\\rangle $$ で定義します。右辺で符号が反転する理由については後述します。\n$g(x)$ を無限回微分可能な関数とすると、 $F$ との積について $$ \\langle g(x)F, \\phi(x)\\rangle := \\langle F, g(x)\\phi(x)\\rangle $$ と定義します。\n超関数 $F$ と関数 $g(x)\\in\\mathcal D$ の合成積として $$ F*g(x):= \\langle F_y, g(x-y)\\rangle $$ を定義します。ここで右辺は、 $g(x-y)$ を $y$ のみの関数と見て超関数 $F$ に代入したものです。\n超関数 $F$ と $G$ の合成積として $$ \\langle F*G, \\phi(x)\\rangle := \\langle F_x, \\langle G_y, \\phi(x+y)\\rangle\\rangle $$ を定義します。\nデルタ関数の定義 以上を踏まえた上で、 デルタ関数は $$ \\langle \\delta, \\phi\\rangle = \\phi(0) $$ を満たす超関数として定義されます。\nこのように定義されたデルタ関数について成り立ついくつかの性質を導きましょう。\n平行移動について $$ \\langle \\delta_{x-a}, \\phi\\rangle = \\langle \\delta, \\phi(x+a)\\rangle = \\phi(a). $$\n微分について $$ \\langle \\frac{d\\delta}{dx}, \\phi\\rangle := -\\langle \\delta, \\frac{d\\phi}{dx}\\rangle = -\\phi\u0026rsquo;(0). $$\n積について $$ \\langle g(x)\\delta, \\phi(x)\\rangle := \\langle \\delta, g(x)\\phi(x)\\rangle = g(0)\\phi(0) \\ = g(0)\\langle \\delta, \\phi\\rangle = \\langle g(0)\\delta, \\phi\\rangle. $$ より、 超関数の意味で$g(x)\\delta=g(0)\\delta$。 ここで、 $g(x)=x$とすれば、 $x\\delta=0$ なので、形式的にはじめの「 $x\\ne0$ の時 $\\delta=0$ 」が確かめられます。\n関数 $g(x)\\in\\mathcal D$ との合成積について $$ \\delta*g(x):= \\langle \\delta_y, g(x-y)\\rangle = g(x). $$\n超関数 $F$ との合成積について\n$$ \\langle F*\\delta, \\phi(x)\\rangle := \\langle F_y, \\langle \\delta_x, \\phi(x+y)\\rangle\\rangle = \\\\ \\langle F_y, \\phi(y)\\rangle = \\langle F_x, \\phi(x)\\rangle $$\nにより、超関数の意味で $F*\\delta = \\delta$ が成り立ちます。つまり、デルタ関数が合成積の単位元を与えることがわかります。\n超関数の演算は積分を一般化したもの 超関数 $F$ について、形式的に $$ \\langle F, \\phi(x)\\rangle = \\int_\\infty^\\infty F(x)\\phi(x)dx $$ と書いてみましょう。右辺は具体的な意味を持ちませんが、このように書くと、先に挙げた演算が整合性を持つことがわかります。\nまず、定義の線型性については、積分の線型性に相当します。\n次に、平行移動について、 $F_{x-a}$ を $F(x-a)$ と書くことにすると、 $$ \\int_\\infty^\\infty F(x-a)\\phi(x)dx = \\int_\\infty^\\infty F(x)\\phi(x+a)dx $$ として変数変換したことに相当します。\n微分については $$ \\int_\\infty^\\infty \\frac{dF}{dx}\\phi(x)dx = [F(x)\\phi(x)]^\\infty_\\infty - \\int_\\infty^\\infty F(x)\\phi\u0026rsquo;(x)dx $$ となり、右辺の第一項は $\\phi\\in\\mathcal D$ なので $\\lim_{x\\to\\pm\\infty}\\phi(x) = 0$により0となります。 先の定義で右辺で符号が反転する理由はこれです。\n残りの演算も同様にして対応を確かめることができます。\n以上により、超関数の演算は積分の性質を一般化していることがわかります。 このことが、はじめに触れたデルタ関数の「それらしい定義」を成り立たせている根拠になっています。\n最後にこのことを用いて、ベビサイドの階段関数 $$ H(x):= \\begin{cases} 1, \u0026amp; x\u0026gt;0\\\\newline 0, \u0026amp; x\\le0 \\end{cases}, $$ を超関数の意味で微分してみましょう。 $$ \\langle H, \\phi\\rangle = \\langle H, \\phi\u0026rsquo;\\rangle = - \\int_\\infty^\\infty H(x)\\phi\u0026rsquo;(x)dx \\\\ = - \\int_0^\\infty \\phi\u0026rsquo;(x)dx = -[\\phi(x)]^\\infty_0 = \\phi(0) = \\langle \\delta, \\phi\\rangle $$ よって、 $H\u0026rsquo;(x) = \\delta$ が得られました。\n参考書類 本記事の内容のほとんどはこちらの書籍をもとに書かれました。\nこちらの書籍には、超関数の収束などを含む、より厳密な証明が書かれています。\n","permalink":"https://inody.github.io/posts/generalized-function/","summary":"デルタ関数って結局何なの？ 工学の至る所で現れるデルタ関数。これはよく $$ \\delta(t):= \\begin{cases} \\infty, \u0026amp; t=0\\\\newline 0, \u0026amp; t\\ne 0 \\end{cases}, $$ $$ \\int_\\infty^\\infty \\delta(x-y)f(y)dy = f(x), $$ $$ \\int_\\infty^\\infty \\delta(t)dt = 1 $$ を満たす関数 $\\delta$ という風に定義されていますが、「 $t=0$ は測度0なので、その積分は0になるのでは」と考えたことがある人は多いのではないでしょうか。 実はこの定義は不正確なものであり、「超関数」という概念によって、正確に定義することができます。\n超関数の定義 ある数値を入力するとある数値を出力する装置のことを、関数といいます。 これに対して、ある関数を入力するとある複素数を出力するような装置のことを、汎関数といいます。 汎関数 $F$ に関数 $\\phi$ を入力した時の出力値を $F[\\phi]$ 、または $\\langle F, \\phi \\rangle$ と書きます。以下では後者の書き方を用います。\n全区間で無限回微分可能で、関数値が0でないところが有界区間に限られるような関数の全体からなる集合を $\\mathcal D$ とします。 $\\mathcal D$ 上に属する関数 $\\phi$ をテスト関数と呼びます。 また、 $\\mathcal D$ を定義域とする汎関数を $\\mathcal D$ 上の汎関数と呼びます。\nここで、シュワルツの超関数は、つぎのように定義されます。\n汎関数 $F$ が、\n$\\langle F, \\phi_1 + \\phi_2\\rangle = \\langle F, \\phi_1\\rangle + \\langle F, \\phi_2\\rangle,$ $\\langle F, c\\phi\\rangle = c\\langle F, \\phi\\rangle\\ (c\\in\\mathbb K),$ テスト関数の列 ${\\phi_n}$ が $n\\to\\infty$ で $\\phi$ に収束する時、 $\\langle F, \\phi_n\\rangle$ もまた $\\langle F, \\phi\\rangle$ に収束する を満たすとき、 $F$を超関数という。","title":"デルタ関数とは、超関数とは"},{"content":"$d$個の数値を並べた変数$\\mathbf{x}=(x_1,x_2,\\ldots,x_d)^{\\mathrm T}$から、 $y$という変数を推定する多変量の回帰問題を考えます。 サンプルデータは$n$組あるとし、$i$番目のサンプルを$\\mathbf{x}^{(i)}, y^{(i)}$と書くことにします。\n線形モデル まず、カーネルを使わない線形モデル\n$$y = \\mathbf w^\\mathrm T \\mathbf x$$\nを考えましょう。これは、データを原点を通る直線で当てはめることを意味します。 直線からのズレに対して、損失を\n$$r(y,\\mathbf{x};\\mathbf{w}) = (y-\\mathbf w^\\mathrm T \\mathbf x)^2$$\nとして定義し、全てのサンプルの総和\n$$R(\\mathbf{w}) = \\sum_{j=1}^n r(y,\\mathbf{x};\\mathbf{w})$$\nを考えます。$R(\\mathbf{w})$は\n$$\\mathbf y := \\left( \\begin{array}{ccc} y^{(1)}\\newline y^{(2)}\\newline \\vdots\\newline y^{(n)} \\end{array} \\right) $$ $$X := \\left( \\begin{array}{ccc} x_1^{(1)} \u0026amp; \\cdots \u0026amp; x_d^{(1)}\\newline x_1^{(2)} \u0026amp; \\cdots \u0026amp; x_d^{(2)}\\newline \\vdots\u0026amp; \u0026amp; \\vdots\\newline x_1^{(n)} \u0026amp; \\cdots \u0026amp; x_d^{(n)} \\end{array} \\right) $$\nを用いて、\n$$R(\\mathbf{w})=(\\mathbf y-X\\mathbf w)^\\mathrm T(\\mathbf y-X\\mathbf w)$$\nと表せます。 これを最小化する重み$\\mathbf{\\hat w}$は\n$$\\mathbf{\\hat w} = (X^\\mathrm T X)^{-1}X^\\mathrm T\\mathbf y$$\nと求めることができます（$R$を$\\mathbf w$で微分して、$0$となる点を求める。ここで$X^\\mathrm T X$は逆行列を持つとした）。\n非線形モデル さて、このような線形モデルではどう頑張っても$\\mathbf x$と$y$の直線的な関係しか表せません。 そこで、$\\mathbf x$に何らかの非線形変換$\\mathbf{\\phi}(\\cdot)$を施して\n$$y = \\mathbf w^\\mathrm T \\mathbf{\\phi}(\\mathbf x)$$\nというモデルを用いて回帰を行うことを考えます。 ここで$\\mathbf{\\phi}$はd個の非線形変換$\\phi_1, \\ldots, \\phi_d$を用いて $\\mathbf{\\phi}(\\mathbf x) = ( \\phi_1(\\mathbf x),\\ldots,\\phi_d(\\mathbf x))$と定義しました（変換前後の特徴ベクトルの次元$d$は必ずしも一致する必要はないが、違う文字を導入するのが面倒なため揃えた）。 例えば、元々1次元の入力$x\\in\\mathbb R$を用いた場合、$\\mathbf{\\phi}(x):=(x, x^2,\\ldots,x^d)$などの非線形変換が考えられます。\nこのモデルは、$\\mathbf x$については非線形ですが、$\\mathbf w$については線形なので、先ほどの線形モデルの場合と 同様な最適化問題に帰着することができます。 すなわち\n$$r_\\text{}(y,\\mathbf{x};\\mathbf{w}) = (y-\\mathbf w^\\mathrm T \\mathbf{\\phi}(\\mathbf x))^2,$$\n$$R(\\mathbf{w}) = \\sum_{j=1}^n r(y,\\mathbf{x};\\mathbf{w})$$\nとすると、$R$を最小化する$\\mathbf{\\hat w}$は\n$$\\mathbf{\\hat w} = (\\Phi^\\mathrm T \\Phi)^{-1}\\Phi^\\mathrm T\\mathbf y$$\nと計算できます（$\\Phi$は、$X$と同様にして$\\phi$を並べた行列）。\n正則化 非線形回帰において、特徴ベクトルは高次元であるほど、データへの当てはめはよくなります。 しかしながら、既知のデータに過度に適合しすぎて、未知の入力への当てはめ（汎化性能）は悪くなってしまうという問題（過学習）も生じてしまいます。 そこで、損失関数$R$に対して、正則化項を加えた\n$$R(\\mathbf{w}) = \\sum_{j=1}^n r(y,\\mathbf{x};\\mathbf{w}) + \\lambda \\mathbf{w}^\\mathrm T \\mathbf{w}$$\nを最小化することがよく行われます。 この場合の最適解$\\mathbf{\\hat w}$は\n$$\\mathbf{\\hat w} = (\\Phi^\\mathrm T \\Phi + \\lambda I)^{-1}\\Phi^\\mathrm T\\mathbf y$$\nと計算できます（正則化項を加えると、汎化性能が向上するメカニズムについては、今回は省略。いつかまとめたい）。\nカーネルを用いた表現 ここでもう一歩踏み込んで、カーネル関数を導入します。 カーネル関数は、2つの入力$\\mathbf{x}=(x_1,x_2,\\ldots,x_d)^{\\mathrm T}$と$\\mathbf{x}\u0026rsquo;=(x_1\u0026rsquo;,x_2\u0026rsquo;,\\ldots,x_d\u0026rsquo;)^{\\mathrm T}$ から計算される関数$k(\\mathbf x, \\mathbf x\u0026rsquo;)$です。\nそのもっとも素朴な定義は\n$$k(\\mathbf x, \\mathbf x\u0026rsquo;) = \\mathbf{\\phi}(\\mathbf x)^\\mathrm T \\mathbf{\\phi}(\\mathbf x\u0026rsquo;)$$\nです。このように定義されたカーネル関数ですが、実は先ほどの非線形の回帰の最適解はカーネル関数の線形和を用いて表すことができます。このことは、次のリプレゼンター定理として知られています。\nリプレゼンター定理 先ほどの正則化項つきの$R$を最小化した結果得られる重み$\\mathbf{\\hat w}$は\n$$\\mathbf{\\hat w} = \\sum_{i=1}^n\\alpha_i\\mathbf{\\phi}(\\mathbf x^{(i)})$$\nの形で表せる。\n証明については割愛します。\nリプリゼンター定理により、回帰問題$\\mathbf w$を推定する問題から、$\\mathbf\\alpha:=(\\alpha_1,\\ldots,\\alpha_n)^\\mathrm T$を推定する問題に変化したと言えます。 ここで、$\\mathbf w$は$d$次元であるのに対して、$\\alpha$は$n$次元です。 したがって、特徴ベクトルの次元より、サンプルのサイズが小さい時に、リプレゼンター定理は、回帰問題の解に「コンパクトな」表現を与えてくれると言えそうです。\n実際に$\\mathbf \\alpha$を推定してみましょう。 今考えるべき関数の形は、リプレゼンター定理により、\n$$f(\\mathbf x) = \\sum_i \\alpha_i\\mathbf{\\phi}(\\mathbf x_i)^\\mathrm T\\mathbf{\\phi}(\\mathbf x)=\\sum_i \\alpha_ik(\\mathbf x^{(i)},\\mathbf x)$$\nの形に絞られています。 そこで損失関数を$\\mathbf w, \\mathbf\\phi$を使った表現から、$\\mathbf \\alpha, k$を用いた表現に書き換えると\n$$R(\\alpha) = (\\mathbf y - K \\mathbf\\alpha)^\\mathrm T(\\mathbf y - K \\mathbf\\alpha) + \\lambda\\mathbf\\alpha^\\mathrm TK\\mathbf\\alpha$$\nが得られます。ここで、$K$はグラム行列と呼ばれる行列で、\n$$K := \\left( \\begin{array}{ccc} k(\\mathbf x^{(1)},\\mathbf x^{(1)}) \u0026amp; \\cdots \u0026amp; k(\\mathbf x^{(n)},\\mathbf x^{(1)})\\newline \\vdots \u0026amp; \u0026amp; \\vdots\\newline k(\\mathbf x^{(1)},\\mathbf x^{(n)}) \u0026amp; \\cdots \u0026amp; k(\\mathbf x^{(n)},\\mathbf x^{(n)}) \\end{array} \\right) $$\nと定義されます。 したがって、もし$K$が正則ならば、先ほどと同様にして\n$$\\alpha = (K^\\mathrm T K + \\lambda I)^{-1}K^\\mathrm T \\mathbf y$$\nと解くことができます（実は$K$が対称であることから、$\\alpha = (K+\\lambda i)^{-1}y$として解くことまで可能です）。\nカーネルから特徴ベクトルを導出する 先ほどまでは、元々の特徴ベクトル$\\mathbf x$を非線形変換した$\\phi(\\mathbf x)$を用いて、その内積でカーネル$k(\\mathbf x, \\mathbf x\u0026rsquo;)$を導出しました。 実は、逆にある性質を満たす関数をカーネルとして用意してあげれば、それに対応する特徴ベクトルが存在することが知られています。 その性質とは、カーネルが正定値であること、すなわちグラム行列$K$の二次形式が常に非負であることです（マーサーの定理）。 この正定値性をカーネルの定義とすれば、特徴ベクトル$\\phi(\\mathbf x)$を陽に意識することなく、計算量を削減することができます。 このことを、カーネルトリックと言います。\nカーネルトリックの例をあげましょう。\n$$k(\\mathbf x,\\mathbf x\u0026rsquo;) = \\exp (-\\beta|\\mathbf x - \\mathbf x\u0026rsquo;|^2)$$\nとカーネルを定義します。このカーネルはガウスカーネルと呼ばれています。 証明は割愛しますが、ガウスカーネルは正定値であり、1次元の$x$のときに対応する特徴ベクトルは\n$$ \\mathbf\\phi(x) = \\left\\{ \\left(\\frac{4\\beta}{\\pi}\\right)^{1/4}\\exp(-2\\beta(z-x)^2) \\mid z\\in\\mathbb R \\right\\} $$\nという無限次元ベクトルになります。 この場合、積和だった内積は\n$$\\int_\\mathbb R \\mathbf\\phi_z(x)^{\\mathrm T} \\mathbf\\phi_z(x\u0026rsquo;)dz$$\nという積分の形になります（$\\phi_z(x) = \\left(\\frac{4\\beta}{\\pi}\\right)^{1/4}\\exp(-2\\beta(z-x)^2)$とおいた）。\n省略しますが、$n$次元の場合についても同様のことが言えます。\nグラム行列から特徴ベクトルを導出する 実は、さらに強い事実として、つぎのカーネル関数存在定理が成り立ちます。\nカーネル関数存在定理 サンプルと同じサイズの任意の正定値行列$K$が与えられたとき、ある特徴ベクトル$\\phi(\\mathbf x^{(i)})$が存在し、それに対応するカーネル関数の定めるグラム行列が$K$になる。\nこの定理は、勝手に正定値行列を作ってしまえば、それをカーネル関数のグラム行列としてみなせることを意味しており、非常に強い結果だと言えます。 ただし、適当に正定値行列を作ったとき、それがデータと全く無関係になってしまうこともありうるので、設計に注意が必要です。 また、カーネル関数を設計する場合と違って、全ての入力データに対してグラム行列を作成する必要があるため、使い所は限られると言えるでしょう。\n","permalink":"https://inody.github.io/posts/kernel-machine-learning/","summary":"$d$個の数値を並べた変数$\\mathbf{x}=(x_1,x_2,\\ldots,x_d)^{\\mathrm T}$から、 $y$という変数を推定する多変量の回帰問題を考えます。 サンプルデータは$n$組あるとし、$i$番目のサンプルを$\\mathbf{x}^{(i)}, y^{(i)}$と書くことにします。\n線形モデル まず、カーネルを使わない線形モデル\n$$y = \\mathbf w^\\mathrm T \\mathbf x$$\nを考えましょう。これは、データを原点を通る直線で当てはめることを意味します。 直線からのズレに対して、損失を\n$$r(y,\\mathbf{x};\\mathbf{w}) = (y-\\mathbf w^\\mathrm T \\mathbf x)^2$$\nとして定義し、全てのサンプルの総和\n$$R(\\mathbf{w}) = \\sum_{j=1}^n r(y,\\mathbf{x};\\mathbf{w})$$\nを考えます。$R(\\mathbf{w})$は\n$$\\mathbf y := \\left( \\begin{array}{ccc} y^{(1)}\\newline y^{(2)}\\newline \\vdots\\newline y^{(n)} \\end{array} \\right) $$ $$X := \\left( \\begin{array}{ccc} x_1^{(1)} \u0026amp; \\cdots \u0026amp; x_d^{(1)}\\newline x_1^{(2)} \u0026amp; \\cdots \u0026amp; x_d^{(2)}\\newline \\vdots\u0026amp; \u0026amp; \\vdots\\newline x_1^{(n)} \u0026amp; \\cdots \u0026amp; x_d^{(n)} \\end{array} \\right) $$\nを用いて、\n$$R(\\mathbf{w})=(\\mathbf y-X\\mathbf w)^\\mathrm T(\\mathbf y-X\\mathbf w)$$","title":"カーネル型機械学習入門"},{"content":"概要 今流行りの深層学習で日経平均株価を予想してみました。 結論から言えば、全く予想できず、惨敗でした。\nLSTMとは LSTMとはリカレントニューラルネットワーク（RNN）と呼ばれる機械学習手法の一つです。 RNNを用いることで、現在と過去一定時間の時系列データから、未来のデータを予測することができます。 また、RNNを改良したLSTMでは、長期のトレンドが反映されやすいとされています。\n詳しくはこちらのサイトをご覧ください。\n学習データとかモデルとか こちらのサイトから、過去4ヶ月の1時間足のデータをダウンロードし、学習データとして用いました。 モデルの隠れ層のユニット数は100、過去20時間の株価から1時間先の株価を予測するモデルを用いました。学習方法はAdamを用いました。\n実装 Keras(TensorFlow)を用いて実装しました。初めて使ったんですが、短く書けて便利ですね。以下、ソースコードを載せておきます。\n# coding: utf-8 import numpy as np from keras.models import Sequential from keras.layers import Dense, Activation from keras.layers.recurrent import LSTM from keras.optimizers import Adam from keras.initializers import TruncatedNormal from keras.callbacks import EarlyStopping from sklearn.model_selection import train_test_split import matplotlib.pyplot as plt import seaborn import pandas as pd df = pd.read_csv('~/deep_learning/csv/nikkei4_7.csv') x = df['始値'] / df['始値'].max() f = list(x) length_of_sequences = len(f) maxlen = 20 data = [] target = [] for i in range(0, length_of_sequences - maxlen): data.append(f[i:i+maxlen]) target.append(f[i+maxlen]) X = np.array(data).reshape(len(data), maxlen, 1) Y = np.array(target).reshape(len(data), 1) N_train = int(len(data)*0.9) N_validation = len(data) - N_train X_train, X_validation, Y_train, Y_validation = \\ train_test_split(X, Y, test_size=N_validation) n_in = len(X[0][0]) n_hidden = 100 n_out = len(Y[0]) weight_hidden = TruncatedNormal(stddev=np.sqrt(1/n_hidden)) weight_out = TruncatedNormal(stddev=np.sqrt(1/n_out)) model = Sequential() model.add(LSTM(n_hidden, init=weight_hidden, input_shape=(maxlen, n_out))) model.add(Dense(n_out, init=weight_out)) model.add(Activation('linear')) optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999) model.compile(loss='mean_squared_error', optimizer=optimizer) epochs = 500 batch_size = 10 early_stopping = \\ EarlyStopping(monitor='val_loss', patience=10, verbose=1) hist = model.fit(X_train, Y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_validation, Y_validation), callbacks=[early_stopping]) ## predict 1 step future original = [f[i] for i in range(length_of_sequences)] predicted = [None for i in range(maxlen)] for i in range(1, length_of_sequences - maxlen): Z = X[:i] z_ = Z[-1:] y = model.predict(z_) predicted.append(y[0][0]) plt.figure() plt.plot(original, label=\u0026quot;original\u0026quot;) plt.plot(predicted, label=\u0026quot;predicted\u0026quot;) plt.legend() plt.xlabel(\u0026quot;step\u0026quot;) plt.ylabel(\u0026quot;price\u0026quot;) plt.show() 結果 上のスクリプトを走らせた結果、つぎの結果が得られました。 一見予測できているように見えます。 しかしながら、ズームしてみると、 このように、実際の動きから遅れていることがわかります。 これでは全く意味がありません。 世の中そんなに甘い話はありませんね。\n書籍 ソースコードの作成に当たって、以下の書籍を参考にしました。数学やPythonの基礎に始まり、LSTMやGRUなど現在注目されている時系列データの機械学習方法の理論と実装が述べられています。全体として簡潔かつコンパクトにまとまっており、初学者でも楽しく読むことができました。深層学習初心者の方には特にオススメします。\n","permalink":"https://inody.github.io/posts/lstm-market/","summary":"概要 今流行りの深層学習で日経平均株価を予想してみました。 結論から言えば、全く予想できず、惨敗でした。\nLSTMとは LSTMとはリカレントニューラルネットワーク（RNN）と呼ばれる機械学習手法の一つです。 RNNを用いることで、現在と過去一定時間の時系列データから、未来のデータを予測することができます。 また、RNNを改良したLSTMでは、長期のトレンドが反映されやすいとされています。\n詳しくはこちらのサイトをご覧ください。\n学習データとかモデルとか こちらのサイトから、過去4ヶ月の1時間足のデータをダウンロードし、学習データとして用いました。 モデルの隠れ層のユニット数は100、過去20時間の株価から1時間先の株価を予測するモデルを用いました。学習方法はAdamを用いました。\n実装 Keras(TensorFlow)を用いて実装しました。初めて使ったんですが、短く書けて便利ですね。以下、ソースコードを載せておきます。\n# coding: utf-8 import numpy as np from keras.models import Sequential from keras.layers import Dense, Activation from keras.layers.recurrent import LSTM from keras.optimizers import Adam from keras.initializers import TruncatedNormal from keras.callbacks import EarlyStopping from sklearn.model_selection import train_test_split import matplotlib.pyplot as plt import seaborn import pandas as pd df = pd.read_csv('~/deep_learning/csv/nikkei4_7.csv') x = df['始値'] / df['始値'].max() f = list(x) length_of_sequences = len(f) maxlen = 20 data = [] target = [] for i in range(0, length_of_sequences - maxlen): data.","title":"日経平均株価をLSTMを用いて予測してみた"},{"content":"交渉というと、心理的駆け引きがものをいう、才能が支配する活動であり、自分のような口下手には縁遠いものだという印象がありました。 しかしながら、本書は「交渉には理論があり、後天的に交渉力は獲得できる」という立場のもと、その基礎的な理論を紹介しています。\nもっとも基礎的なこととして、交渉は準備が8割であり、始める前につぎの3つを決めるべきだとあります。\nミッション（Mission）：交渉の軸となるもの。 ゾーパ（ZOPA, Zone Of Possible Agreement）最高と最低の2段構えの幅のある目標 バトナ（Best Alternative To Negotiated Agreement）：ミッションを達成できなかったときの代替選択肢。 また、これらを定める前後で、違いを取り巻く状況を把握するために、マップやツリーを書いてみることは、状況を俯瞰したり、問題点を分解したりする際に役立ちます。\n交渉中、お互いの考えを把握するために、ブレイン・ストーミング、いわゆるブレストを行うことも非常に有効だとあります。 ただし、ブレストをする上で絶対に守らなければいけないこととして、\nはじめに最後に行うことを決めておく アイデアの批判と評価を混在しない 取りうる選択肢を決める際は、軸を決めて比較し、決定する などがあります。\n相手との長期的な関係を求めている場合、下手な交渉テクニックを使うことはあまり得策ではないそうです。 このような交渉テクニックとして\nフットインザドア：最初に取るに足らないような要求を提示し、小さなイエスを引き出す、その上で徐々に要求をエスカレートさせていく。 ドアインザフェイス：最初に課題な要求を出して相手にノーと言わせ、条件を下げて本来の要求を出す。 ニブリング：一旦合意に達した後、相手の気が緩んだところに追加条件を提示し、受諾させる。 タイムプレッシャー：アイスブレイクの時に相手の交通手段などを聞き出し、デットラインを把握。その上で交渉の最終条件の提示をそのデットライン近くまで遅らせ、プレッシャーを与える。 などがあります。\n最後に、交渉を成功させる秘訣は、決して感情的にならず、なるべく第三者の視点から交渉に臨むことです。 これから社会人になる身として、学ぶべきことが多く書かれていた本書は、ぜひ手元に置いておきたい本だと感じました。\n","permalink":"https://inody.github.io/posts/read-isshiki/","summary":"交渉というと、心理的駆け引きがものをいう、才能が支配する活動であり、自分のような口下手には縁遠いものだという印象がありました。 しかしながら、本書は「交渉には理論があり、後天的に交渉力は獲得できる」という立場のもと、その基礎的な理論を紹介しています。\nもっとも基礎的なこととして、交渉は準備が8割であり、始める前につぎの3つを決めるべきだとあります。\nミッション（Mission）：交渉の軸となるもの。 ゾーパ（ZOPA, Zone Of Possible Agreement）最高と最低の2段構えの幅のある目標 バトナ（Best Alternative To Negotiated Agreement）：ミッションを達成できなかったときの代替選択肢。 また、これらを定める前後で、違いを取り巻く状況を把握するために、マップやツリーを書いてみることは、状況を俯瞰したり、問題点を分解したりする際に役立ちます。\n交渉中、お互いの考えを把握するために、ブレイン・ストーミング、いわゆるブレストを行うことも非常に有効だとあります。 ただし、ブレストをする上で絶対に守らなければいけないこととして、\nはじめに最後に行うことを決めておく アイデアの批判と評価を混在しない 取りうる選択肢を決める際は、軸を決めて比較し、決定する などがあります。\n相手との長期的な関係を求めている場合、下手な交渉テクニックを使うことはあまり得策ではないそうです。 このような交渉テクニックとして\nフットインザドア：最初に取るに足らないような要求を提示し、小さなイエスを引き出す、その上で徐々に要求をエスカレートさせていく。 ドアインザフェイス：最初に課題な要求を出して相手にノーと言わせ、条件を下げて本来の要求を出す。 ニブリング：一旦合意に達した後、相手の気が緩んだところに追加条件を提示し、受諾させる。 タイムプレッシャー：アイスブレイクの時に相手の交通手段などを聞き出し、デットラインを把握。その上で交渉の最終条件の提示をそのデットライン近くまで遅らせ、プレッシャーを与える。 などがあります。\n最後に、交渉を成功させる秘訣は、決して感情的にならず、なるべく第三者の視点から交渉に臨むことです。 これから社会人になる身として、学ぶべきことが多く書かれていた本書は、ぜひ手元に置いておきたい本だと感じました。","title":"一色正彦ら著『理系のための交渉学入門』を読みました"},{"content":"GPIFによるデータ GPIF（年金積立金管理運用独立行政法人）は、厚生年金と国民年金の積立金の管理・運用を行っている団体です。 この団体は、定期的に各金融商品のリスクとリターン、相関係数について評価しており、それらをもとに積立金の運用のためのポートフォリオを決定しています。 ただし、ここでの金融商品とは、会社ごとの株式などではなく、TOPIXや日経225などに代表される、株式市場の株価指数を指すこMとに注意してください。\nGPIFは、金融商品を\n国内債券 国内株式 海外債権 海外株式 の4つに分けて評価をおこなっており、それぞれのリターン、リスク、相関係数の値は2016年公開のこちらの資料によると、つぎのようになっています。\nリターン（リスクプレミアムなし）\n国内債券 国内株式 海外債権 海外株式 2.3 5.9 3.6 6.3 リスク\n国内債券 国内株式 海外債権 海外株式 4.2 25.23 11.82 26.76 相関係数\n国内債券 国内株式 海外債権 海外株式 国内債券 1.000 -0.230 -0.040 -0.090 国内株式 -0.230 1.000 0.060 0.660 海外債権 -0.040 0.060 1.000 0.550 海外株式 -0.090 0.660 0.550 1.000 今回はこれらの金融商品に加えて、「定期預金」も考慮したポートフォリオを最適化したいと思います。 ここで、定期預金のリターンは0.1、リスクは0、他の金融商品との相関係数は全て0としました。 いくつかの資料によれば、ポートフォリオを最適化するにあたって、リスク資産と無リスク資産は分けて考えるのが定石のようです。 しかしながら自分には「無リスク資産をリスク0のリスク資産としてみなす」ことが、何故まずいことなのかよく理解できなかったので、今回は「定期預金」もポートフォリオに加入してみた次第です。 このあたりに詳しい方がおられましたら、ぜひご教授ください……\nCVXOPTを用いた最適化 さて、以上のデータを用いて前回紹介した2次計画問題を解くために、Pythonでスクリプトを作成しました。 作成したスクリプトの中では、CVXOPTというソルバー（問題を自動で解いてくれるツール）を用いています。 CVXOPTの使い方は、こちらの記事が参考になります。\nソースコード import numpy import cvxopt from cvxopt import matrix import matplotlib.pyplot as plt mu = numpy.array([[2.3,5.9,3.6,6.3,0.1]]) Sigma = numpy.diag([4.2,25.23,11.82,26.76,0]) R = numpy.array([[1.000,-0.230,-0.040,-0.090,0.000], [-0.230,1.000,0.060,0.660,0.000], [-0.040,0.060,1.000,0.550,0.000], [-0.090,0.660,0.550,1.000,0.000], [0.000,0.000,0.000,0.000,1.000]]) Cov = Sigma@R@Sigma print(numpy.linalg.matrix_rank(Cov)) P = matrix(Cov) q = matrix(numpy.zeros((5,1))) Id = numpy.identity(5) G = matrix(-numpy.concatenate((Id,mu), axis=0)) A = matrix(numpy.ones((1,5))) b = matrix(100*numpy.ones((1,1))) Return_bound = numpy.linspace(0,6.7,50) Return = numpy.array([]) Risk = numpy.array([]) Allocations = numpy.array([]) for re_bound in Return_bound: h = matrix(numpy.array([0.0,0.0,0.0,0.0,0.0,-re_bound*100])) sol = cvxopt.solvers.qp(P,q,G,h,A,b) Sol = sol[\u0026quot;x\u0026quot;] Allocations = numpy.append(Allocations,Sol) re = Sol.T@mu.T/100 Return = numpy.append(Return,re) ri = (Sol.T@Cov@Sol/10000)**0.5 Risk = numpy.append(Risk,ri) print(Risk) print(Return) fig = plt.figure() plt.plot(Risk,Return) plt.xlabel(\u0026quot;予想リスク（標準偏差）\u0026quot;) plt.ylabel(\u0026quot;期待リターン [%]\u0026quot;) plt.show() Allocations = Allocations.reshape(Return_bound.size,5) Allocations = Allocations.T fig = plt.figure() wd = 5/Return.size p1 = plt.bar(Return, Allocations[0], width = wd, color = \u0026quot;red\u0026quot;, label = \u0026quot;国内債権\u0026quot;) p2 = plt.bar(Return, Allocations[1], width = wd, bottom=Allocations[0], color = \u0026quot;orange\u0026quot;, label = \u0026quot;国内株式\u0026quot;) p3 = plt.bar(Return, Allocations[2], width = wd, bottom=sum(Allocations[0:2,:]), color = \u0026quot;yellow\u0026quot;, label = \u0026quot;海外債権\u0026quot;) p4 = plt.bar(Return, Allocations[3], width = wd, bottom=sum(Allocations[0:3,:]), color = \u0026quot;green\u0026quot;, label = \u0026quot;海外株式\u0026quot;) p5 = plt.bar(Return, Allocations[4], width = wd, bottom=sum(Allocations[0:4,:]), color = \u0026quot;blue\u0026quot;, label = \u0026quot;預金\u0026quot;) plt.legend() plt.xlabel(\u0026quot;期待リターン [%]\u0026quot;) plt.ylabel(\u0026quot;資産配分 [%]\u0026quot;) plt.xlim([0.1,6.7]) plt.ylim([0,100]) plt.show() plt.close('all') 実行結果 まず、期待リターンに対しての最小リスクを示した図を示します。 「ハイリスク・ハイリターンの原則」に従い、リターンに対してリスクが単調に増加していることがわかります。\nつぎに期待リターンを実現するポートフォリオを見てみましょう。 期待リターンが小さいうちは定期預金が支配的ですが、徐々にリスク資産にとって代わります。 期待リターン4%くらいまでは海外株式が必要ないという解釈もできそうですね。\n今後の課題 他の団体が公開している指標を使って最適化するとどうなるか、得られたポートフォリオで運用シミュレーションをおこなうとどれくらい良好な結果が出るか、などを見てみたいです。 また、今回はGPIFが公開しているデータセットを使いましたが、将来的には、自分が購入する投資信託の商品の時系列データから、リスクやリターン、相関係数を同定できるようになりたいです。\n","permalink":"https://inody.github.io/posts/portfolio3/","summary":"GPIFによるデータ GPIF（年金積立金管理運用独立行政法人）は、厚生年金と国民年金の積立金の管理・運用を行っている団体です。 この団体は、定期的に各金融商品のリスクとリターン、相関係数について評価しており、それらをもとに積立金の運用のためのポートフォリオを決定しています。 ただし、ここでの金融商品とは、会社ごとの株式などではなく、TOPIXや日経225などに代表される、株式市場の株価指数を指すこMとに注意してください。\nGPIFは、金融商品を\n国内債券 国内株式 海外債権 海外株式 の4つに分けて評価をおこなっており、それぞれのリターン、リスク、相関係数の値は2016年公開のこちらの資料によると、つぎのようになっています。\nリターン（リスクプレミアムなし）\n国内債券 国内株式 海外債権 海外株式 2.3 5.9 3.6 6.3 リスク\n国内債券 国内株式 海外債権 海外株式 4.2 25.23 11.82 26.76 相関係数\n国内債券 国内株式 海外債権 海外株式 国内債券 1.000 -0.230 -0.040 -0.090 国内株式 -0.230 1.000 0.060 0.660 海外債権 -0.040 0.060 1.000 0.550 海外株式 -0.090 0.660 0.550 1.000 今回はこれらの金融商品に加えて、「定期預金」も考慮したポートフォリオを最適化したいと思います。 ここで、定期預金のリターンは0.1、リスクは0、他の金融商品との相関係数は全て0としました。 いくつかの資料によれば、ポートフォリオを最適化するにあたって、リスク資産と無リスク資産は分けて考えるのが定石のようです。 しかしながら自分には「無リスク資産をリスク0のリスク資産としてみなす」ことが、何故まずいことなのかよく理解できなかったので、今回は「定期預金」もポートフォリオに加入してみた次第です。 このあたりに詳しい方がおられましたら、ぜひご教授ください……\nCVXOPTを用いた最適化 さて、以上のデータを用いて前回紹介した2次計画問題を解くために、Pythonでスクリプトを作成しました。 作成したスクリプトの中では、CVXOPTというソルバー（問題を自動で解いてくれるツール）を用いています。 CVXOPTの使い方は、こちらの記事が参考になります。\nソースコード import numpy import cvxopt from cvxopt import matrix import matplotlib.","title":"GPIFのデータをもとに最適ポートフォリオ問題を解いてみた（3）"},{"content":"ポートフォリオ最適化 複数の金融商品の組み合わせのことを「ポートフォリオ」といいます。 あなたはAとBを購入する際、そのポートフォリオを調節することで、リスクをできるだけ小さくしながら、リターンをできるだけ大きくしようと思っています。 けれども、「ハイリスクハイリターンの原則」により、それらを限りなく小さくすることはできません。 しかしながら、あなたがもし「望ましいリターン」を決めたときに、「そのリターンを達成し、かつ最もリスクを小さくするポートフォリオ」を求めることは可能です。 このことを「ポートフォリオ最適化」といいます。\nこの問題を数学的に記述しましょう。 $n$個の金融商品を考えます。 それぞれの商品には$1,\\ldots,n$とラベルが振られているとします。 それぞれの商品のリターンを$\\mu_1,\\ldots,\\mu_n$とします。 それぞれの商品のリスクを$\\sigma_1,\\ldots,\\sigma_n$とし、それらを対角に並べたものを$\\Sigma$とします。 つまり $$ \\Sigma = \\begin{bmatrix} \\sigma_1 \u0026amp; \\cdots \u0026amp; 0\\ \\vdots \u0026amp; \\ddots \u0026amp; \\vdots\\ 0 \u0026amp; \\cdots \u0026amp; \\sigma_n \\end{bmatrix} $$ です。 商品$i$と$j$の間の相関係数を$r_{ij}$とし、それらを縱橫にならべたものを$R$としましょう。 つまり $$ R = \\begin{bmatrix} r_{11} \u0026amp; \\cdots \u0026amp; r_{1n}\\ \\vdots \u0026amp; \\ddots \u0026amp; \\vdots\\ r_{n1} \u0026amp; \\cdots \u0026amp; r_{nn} \\end{bmatrix} $$ です。\nそれぞれの商品の購入割合（つまりポートフォリオ）を$w_1,\\ldots,w_n$とし、これらを縦に並べたものを$w$とします。 あなたはポートフォリオ$w$を決めることで期待リターン$\\nu$を達成したいとしましょう。 このとき、ポートフォリオ最適化問題はつぎのように定式化できます。\n最小化すべき目的関数は $$ w^\\mathrm{T}\\Sigma R \\Sigma w\\ $$ です。これは全体のリスクを表します。\nまた、制約条件は $$ w_i \\ge 0 \\ \\forall i = 1, \\ldots, n,\\ \\sum_{i} w_i = 1,\\ \\sum_{i} w_i\\mu_i \\ge \\nu $$ です。 一つめの不等式は、かく商品の購入割合が正の値であることを表し、2つめの等式は、購入割合の合計が1であることを表します。 また最後の不等式は、全体のリターンが期待リターン$\\nu$を上回ることを意味します。\nこのような最適化問題は、目的関数が変数に対して2次式、制約条件が1次式の形をしているため、2次計画問題と呼ばれます。 一般に最適化問題はその解を求めるのが簡単でないことが多いのですが、2次計画問題は「内点法」「共役勾配法」などと呼ばれる手法で、比較的容易に解を求めることができます。\nさて、次回は数値例を使ってこの最適化問題を解いていきましょう。\n","permalink":"https://inody.github.io/posts/portfolio2/","summary":"ポートフォリオ最適化 複数の金融商品の組み合わせのことを「ポートフォリオ」といいます。 あなたはAとBを購入する際、そのポートフォリオを調節することで、リスクをできるだけ小さくしながら、リターンをできるだけ大きくしようと思っています。 けれども、「ハイリスクハイリターンの原則」により、それらを限りなく小さくすることはできません。 しかしながら、あなたがもし「望ましいリターン」を決めたときに、「そのリターンを達成し、かつ最もリスクを小さくするポートフォリオ」を求めることは可能です。 このことを「ポートフォリオ最適化」といいます。\nこの問題を数学的に記述しましょう。 $n$個の金融商品を考えます。 それぞれの商品には$1,\\ldots,n$とラベルが振られているとします。 それぞれの商品のリターンを$\\mu_1,\\ldots,\\mu_n$とします。 それぞれの商品のリスクを$\\sigma_1,\\ldots,\\sigma_n$とし、それらを対角に並べたものを$\\Sigma$とします。 つまり $$ \\Sigma = \\begin{bmatrix} \\sigma_1 \u0026amp; \\cdots \u0026amp; 0\\ \\vdots \u0026amp; \\ddots \u0026amp; \\vdots\\ 0 \u0026amp; \\cdots \u0026amp; \\sigma_n \\end{bmatrix} $$ です。 商品$i$と$j$の間の相関係数を$r_{ij}$とし、それらを縱橫にならべたものを$R$としましょう。 つまり $$ R = \\begin{bmatrix} r_{11} \u0026amp; \\cdots \u0026amp; r_{1n}\\ \\vdots \u0026amp; \\ddots \u0026amp; \\vdots\\ r_{n1} \u0026amp; \\cdots \u0026amp; r_{nn} \\end{bmatrix} $$ です。\nそれぞれの商品の購入割合（つまりポートフォリオ）を$w_1,\\ldots,w_n$とし、これらを縦に並べたものを$w$とします。 あなたはポートフォリオ$w$を決めることで期待リターン$\\nu$を達成したいとしましょう。 このとき、ポートフォリオ最適化問題はつぎのように定式化できます。\n最小化すべき目的関数は $$ w^\\mathrm{T}\\Sigma R \\Sigma w\\ $$ です。これは全体のリスクを表します。\nまた、制約条件は $$ w_i \\ge 0 \\ \\forall i = 1, \\ldots, n,\\ \\sum_{i} w_i = 1,\\ \\sum_{i} w_i\\mu_i \\ge \\nu $$ です。 一つめの不等式は、かく商品の購入割合が正の値であることを表し、2つめの等式は、購入割合の合計が1であることを表します。 また最後の不等式は、全体のリターンが期待リターン$\\nu$を上回ることを意味します。","title":"GPIFのデータをもとに最適ポートフォリオ問題を解いてみた（2）"},{"content":"なぜ分散投資が有効なのか ここに2つの金融商品があったとしましょう。 それぞれの金融商品は「リスク」と「リターン」という特徴量を持っているとします。 リスクは将来予想される値動きの幅を表し、リターンは将来予想される価値の上昇率を表します。 確率の言葉を使うと、リスクは標準偏差、リターンは平均に対応しています。\n経済学の言葉に、「ハイリスクハイリターンの原則」というものがあります。 これは、ローリスクかつハイリターンな商品はあり得ないということを表すものです。 例えば、銀行の定期預金などはローリスクである代わりに、リターンも小さくなります。 一方で、株式などはハイリターンが期待できますが、値動きが読めない分ハイリスクであると言えます。\nまた、2つの金融商品のペアは、「相関係数」という特徴量を持っているとします。 これは、2つの金融商品がどの程度連動して値動きするかを表します。 例えば相関係数が正の値なら、片方の商品が値上がりしたとき、もう片方の商品も値上がりすることが多いことを意味し、相関係数が負の値なら、片方の商品が値上がりしたとき、もう片方の商品は値下がりすることが多いことを意味します。\n投資の世界には「卵は１つのカゴに盛るな」という言葉があります。 これは、金融商品を分散して買うことで、リターンを維持しつつ、トータルのリスクを減らすことを推奨する言葉です。\n例えば今、2つの金融商品の片方をA、もう片方をBとしましょう。 Aのリターンは5、リスクは10であるとします。 またBのリターンは10、リスクは20であるとします。 さらに、AとBの相関係数は-0.5であるとします。\nここで、片方の金融商品を買ったときと、両方を分散して買ったときの、「リターン/リスク」を求めてみましょう。 この値は、リスクに対してリターンがどれだけ大きいかを示すもので、大きいほどお買い得ということを意味します。\nまず、片方の金融商品を買ったとき、両金融商品とも、リターン/リスクは0.5です。\nつぎに、AとBを半分ずつ購入したときのリターンとリスクを求めてみましょう。 ここでAとBそれぞれのリターンとリスクが$\\mu_A, \\mu_B, \\sigma_A, \\sigma_B$、相関係数が$r_{AB}$であるとし、また二つの商品を$w_A:w_B$の割合で購入したとき、合計のリターン$\\mu$とリスク$\\sigma$は $$ \\mu = w_A \\mu_A + w_B \\mu_B, $$ $$ \\sigma = \\sqrt{ (w_A \\sigma_A)^2 + 2(w_A w_B r_{AB}\\sigma_A\\sigma_B) + (w_B \\sigma_B)^2 } $$ として求められます。 このことを用いると、分散投資したときのリターンは $$ 0.5\\times 5 + 0.5\\times 10 = 7.5 $$ となり、リスクは $$ \\sqrt{ (0.5\\times 10)^2 + 2(0.5\\times 0.5\\times (-0.5)\\times 10\\times 20) + (0.5\\times 20)^2 } = 8.660 $$ となることがわかります。\nしたがって、リターン/リスク=0.866となり、金融商品を分散して買うことが有効であることがわかりました。\nさて、つぎに考えたいのは「一番よい分散の仕方はなにか」ということです。\n次回に続きます。\n","permalink":"https://inody.github.io/posts/portfolio1/","summary":"なぜ分散投資が有効なのか ここに2つの金融商品があったとしましょう。 それぞれの金融商品は「リスク」と「リターン」という特徴量を持っているとします。 リスクは将来予想される値動きの幅を表し、リターンは将来予想される価値の上昇率を表します。 確率の言葉を使うと、リスクは標準偏差、リターンは平均に対応しています。\n経済学の言葉に、「ハイリスクハイリターンの原則」というものがあります。 これは、ローリスクかつハイリターンな商品はあり得ないということを表すものです。 例えば、銀行の定期預金などはローリスクである代わりに、リターンも小さくなります。 一方で、株式などはハイリターンが期待できますが、値動きが読めない分ハイリスクであると言えます。\nまた、2つの金融商品のペアは、「相関係数」という特徴量を持っているとします。 これは、2つの金融商品がどの程度連動して値動きするかを表します。 例えば相関係数が正の値なら、片方の商品が値上がりしたとき、もう片方の商品も値上がりすることが多いことを意味し、相関係数が負の値なら、片方の商品が値上がりしたとき、もう片方の商品は値下がりすることが多いことを意味します。\n投資の世界には「卵は１つのカゴに盛るな」という言葉があります。 これは、金融商品を分散して買うことで、リターンを維持しつつ、トータルのリスクを減らすことを推奨する言葉です。\n例えば今、2つの金融商品の片方をA、もう片方をBとしましょう。 Aのリターンは5、リスクは10であるとします。 またBのリターンは10、リスクは20であるとします。 さらに、AとBの相関係数は-0.5であるとします。\nここで、片方の金融商品を買ったときと、両方を分散して買ったときの、「リターン/リスク」を求めてみましょう。 この値は、リスクに対してリターンがどれだけ大きいかを示すもので、大きいほどお買い得ということを意味します。\nまず、片方の金融商品を買ったとき、両金融商品とも、リターン/リスクは0.5です。\nつぎに、AとBを半分ずつ購入したときのリターンとリスクを求めてみましょう。 ここでAとBそれぞれのリターンとリスクが$\\mu_A, \\mu_B, \\sigma_A, \\sigma_B$、相関係数が$r_{AB}$であるとし、また二つの商品を$w_A:w_B$の割合で購入したとき、合計のリターン$\\mu$とリスク$\\sigma$は $$ \\mu = w_A \\mu_A + w_B \\mu_B, $$ $$ \\sigma = \\sqrt{ (w_A \\sigma_A)^2 + 2(w_A w_B r_{AB}\\sigma_A\\sigma_B) + (w_B \\sigma_B)^2 } $$ として求められます。 このことを用いると、分散投資したときのリターンは $$ 0.5\\times 5 + 0.5\\times 10 = 7.5 $$ となり、リスクは $$ \\sqrt{ (0.5\\times 10)^2 + 2(0.5\\times 0.5\\times (-0.5)\\times 10\\times 20) + (0.","title":"GPIFのデータをもとに最適ポートフォリオ問題を解いてみた（1）"},{"content":"簿記3級に合格してから、ファイナンシャルプランニング技能検定3級の勉強を進めています。\nはじめは「社会に出るにあたって資格の一つや二つ取ったほうがいいだろう」と気軽な気持ちで始めた資格勉強ですが、簿記の合格を契機にその楽しさに目覚めてしまいました。 なんというか、やればやるだけ強くなれるところがRPGと似ていて癖になります。 また、TOEICなどのスコア式の資格と違い、受かるか落ちるかのどちらかである点も、ゲーム性を上げているように思います。\nまた一度ハマってしまったからには、より上位の資格にも手を出したくなります。 これらの資格は2級以上でないと転職などに役立たないと聞きますし、FP3級の受験が終わったら受けてみようかと検討中です。\n一方で、資格の取得自体を目的化してしまうのは危ないとも感じています。 有限の時間の中で、いかに自分のキャリアの可能性を広げ、深化させるかが最も大切であり、資格取得はそのための手段にすぎません。\n自分の場合、研究職としてのメインキャリアを歩みつつ、できれば研究された技術の知財化や商品化などにも携わりたいと思っています。 特に知財には興味があるので、知的財産管理技能士や弁理士の資格をとることは大いに検討すべきです。\nさらに欲を言えば、資格に限らず、プログラミングや数学の勉強も今まで以上に進めていきたいです。 特にWebサービスをスクラッチから実装したことがないので、ぜひ挑戦してみたいです。\n資格にせよ勉強にせよ、あまり手広くやると時間の無駄に終わることは明らかです。 これを機に一度ロードマップを作ってみるのもよいかもしれません。\n","permalink":"https://inody.github.io/posts/license-life/","summary":"簿記3級に合格してから、ファイナンシャルプランニング技能検定3級の勉強を進めています。\nはじめは「社会に出るにあたって資格の一つや二つ取ったほうがいいだろう」と気軽な気持ちで始めた資格勉強ですが、簿記の合格を契機にその楽しさに目覚めてしまいました。 なんというか、やればやるだけ強くなれるところがRPGと似ていて癖になります。 また、TOEICなどのスコア式の資格と違い、受かるか落ちるかのどちらかである点も、ゲーム性を上げているように思います。\nまた一度ハマってしまったからには、より上位の資格にも手を出したくなります。 これらの資格は2級以上でないと転職などに役立たないと聞きますし、FP3級の受験が終わったら受けてみようかと検討中です。\n一方で、資格の取得自体を目的化してしまうのは危ないとも感じています。 有限の時間の中で、いかに自分のキャリアの可能性を広げ、深化させるかが最も大切であり、資格取得はそのための手段にすぎません。\n自分の場合、研究職としてのメインキャリアを歩みつつ、できれば研究された技術の知財化や商品化などにも携わりたいと思っています。 特に知財には興味があるので、知的財産管理技能士や弁理士の資格をとることは大いに検討すべきです。\nさらに欲を言えば、資格に限らず、プログラミングや数学の勉強も今まで以上に進めていきたいです。 特にWebサービスをスクラッチから実装したことがないので、ぜひ挑戦してみたいです。\n資格にせよ勉強にせよ、あまり手広くやると時間の無駄に終わることは明らかです。 これを機に一度ロードマップを作ってみるのもよいかもしれません。","title":"資格取得と人生設計"},{"content":"就職を春に控え、一般常識で欠けている知識を補うために受験した簿記検定3級。 本番で解答用紙の下書きを消し忘れるという手痛いミスをしてしまいましたが、本日結果を確認すると、しっかり点が加算されていました。 参考書として使ったのは、TAC出版のスッキリわかる 日商簿記3級 第7版 [テキスト\u0026amp;問題集]です。 全体的にコンパクトにまとまっており、無駄なく勉強することができました。\nつぎはファイナンシャルプランナー検定を受験したいと思います。\n","permalink":"https://inody.github.io/posts/bookkeeping/","summary":"就職を春に控え、一般常識で欠けている知識を補うために受験した簿記検定3級。 本番で解答用紙の下書きを消し忘れるという手痛いミスをしてしまいましたが、本日結果を確認すると、しっかり点が加算されていました。 参考書として使ったのは、TAC出版のスッキリわかる 日商簿記3級 第7版 [テキスト\u0026amp;問題集]です。 全体的にコンパクトにまとまっており、無駄なく勉強することができました。\nつぎはファイナンシャルプランナー検定を受験したいと思います。","title":"簿記3級に受かりました"},{"content":"研究者の皆さんは，論文を作成するときにIllustratorなどのベクターイメージ編集ソフトを使っていることと存じます． しかしながら，こうしたソフトは一般に有償であり，学生には手が届かないもの． 中にはInkscapeなどのフリーソフトもあるため，そちらを使っている方もいるかもしれません（僕も少し前までこの方法でした）． 今回僕が紹介する手法は，皆さんおなじみのPowerPointやKeynoteなどのプレゼンテーションソフトを使う方法です．\n本手法には，\nほとんどどのPCにもビルドインされているプレゼンソフトを使って作図できる（もちろんベクター画像として） 作成した図をそのままプレゼンの素材として流用できる プレゼンソフトの拡張機能を用いて，LaTeXコードで書かれた数式を自由に挿入・変更できる などのメリットがあります．\nさて，本題の方法ですが，至ってシンプルです． 今回はPowerPointで説明します．\nPowerPointを起動し，最もシンプルな白背景のテンプレートから新規ファイルを作成します\n「デザイン」タブの「スライドのサイズ」から，スライドの縦横比を描きたい図に合わせて望ましいものに変更します\n白紙のスライドに，図形ツールなどを使って図を作成します\n新しい図は，スライドを改めて作成します\n図を全て描き終わったら，「ファイル」からPDFとしてエクスポートします\nLaTeXのソースコードで図を読み込むとき\n\\begin{figure}[t] \\centering \\includegraphics[page=1,width=60mm]{figure.pdf} \\caption{An example. } \\end{figure}\nというように，page=のオプションを用いることで，表示したい図に対応するページ番号を指定します\nLaTeXコードをコンパイルします\n…という感じです．\nこの方法ですと，作成した図を一つのPDFファイルにまとめることができ，ディレクトリがすっきりするのも嬉しいポイントです． ただ，論文に挿入する図ごとに縦横比が大きく異なる際は，別の.pptxファイルを用意しなければいけませんので，注意が必要です．\nまた，PowerPointの場合，IquanaTeXというマクロを使えば，任意のLaTeXコードをベクター画像として生成・編集できますし，Keynoteの場合，MacTeXに最初から付属しているLaTeXitを用いれば自由に数式を挿入できます．\nまた，もしMatlabの図を使いたい場合，Matlabのプロットが表示されているウィンドウから「編集」→「Figureのコピー」を選んで，そのまま貼り付ければちゃんとベクター画像として処理してくれます．\nこの方法を編み出してから，めんどくさい作図にかかる時間を短縮することができるようになりました． 読者の皆さんにも自信をもっておすすめします．\n","permalink":"https://inody.github.io/posts/latex-figure/","summary":"研究者の皆さんは，論文を作成するときにIllustratorなどのベクターイメージ編集ソフトを使っていることと存じます． しかしながら，こうしたソフトは一般に有償であり，学生には手が届かないもの． 中にはInkscapeなどのフリーソフトもあるため，そちらを使っている方もいるかもしれません（僕も少し前までこの方法でした）． 今回僕が紹介する手法は，皆さんおなじみのPowerPointやKeynoteなどのプレゼンテーションソフトを使う方法です．\n本手法には，\nほとんどどのPCにもビルドインされているプレゼンソフトを使って作図できる（もちろんベクター画像として） 作成した図をそのままプレゼンの素材として流用できる プレゼンソフトの拡張機能を用いて，LaTeXコードで書かれた数式を自由に挿入・変更できる などのメリットがあります．\nさて，本題の方法ですが，至ってシンプルです． 今回はPowerPointで説明します．\nPowerPointを起動し，最もシンプルな白背景のテンプレートから新規ファイルを作成します\n「デザイン」タブの「スライドのサイズ」から，スライドの縦横比を描きたい図に合わせて望ましいものに変更します\n白紙のスライドに，図形ツールなどを使って図を作成します\n新しい図は，スライドを改めて作成します\n図を全て描き終わったら，「ファイル」からPDFとしてエクスポートします\nLaTeXのソースコードで図を読み込むとき\n\\begin{figure}[t] \\centering \\includegraphics[page=1,width=60mm]{figure.pdf} \\caption{An example. } \\end{figure}\nというように，page=のオプションを用いることで，表示したい図に対応するページ番号を指定します\nLaTeXコードをコンパイルします\n…という感じです．\nこの方法ですと，作成した図を一つのPDFファイルにまとめることができ，ディレクトリがすっきりするのも嬉しいポイントです． ただ，論文に挿入する図ごとに縦横比が大きく異なる際は，別の.pptxファイルを用意しなければいけませんので，注意が必要です．\nまた，PowerPointの場合，IquanaTeXというマクロを使えば，任意のLaTeXコードをベクター画像として生成・編集できますし，Keynoteの場合，MacTeXに最初から付属しているLaTeXitを用いれば自由に数式を挿入できます．\nまた，もしMatlabの図を使いたい場合，Matlabのプロットが表示されているウィンドウから「編集」→「Figureのコピー」を選んで，そのまま貼り付ければちゃんとベクター画像として処理してくれます．\nこの方法を編み出してから，めんどくさい作図にかかる時間を短縮することができるようになりました． 読者の皆さんにも自信をもっておすすめします．","title":"LaTeXで図を作成するときにおすすめの方法"},{"content":" 二人の人間が、本当に魂の底まで、思いの奥底までひとつになることはできないのだと、ジャンヌは初めて思った。肩を並べて歩き、ときに抱き合うことはあっても、ひとつに溶け合うことはなく、心の底では誰もが生涯一人ぼっちなのだと。\nモーパッサン『女の一生』光文社古典新訳文庫\n光文社古典新訳文庫のシリーズが軒並みKindle Unlimitedの対象になっていたので、読書欲が際限なく刺激される今日この頃。 最近は新書を読むことが多かったので、久しぶりに読む小説は新鮮に感じられました。\n以下あらすじ：\n主人公のジャンヌは、貴族の一人娘として生まれ、幼い頃から修道院で何の汚れも知らぬまま大人になる。 ある日出会った美男の子爵ジュリアンからの求婚を受けるジャンヌ。 幸福の絶頂にいる彼女だが、その後の人生は要約すると転落の一言。\nある日、以前から様子がおかしい召使のロザリが突然倒れ、子供を出産する。 誰の子か問いただしても、口を閉ざすロザリ。 神父の前で懺悔させると、ようやく重い口を開き、父親がジュリアンであることを告げる。 ジャンヌの父親はこれに激怒するが、神父に誰にでもある間違いにすぎないと説得され、若いころの自分にも心当たりのあった父親はこれを許す。\nジャンヌにはその頃既に妊娠していた。 夫への愛は完全に消え失せた彼女だが、生まれる子供には出来る限りの愛情を尽くすことを誓う。\nジャンヌは父親とともに生まれてきた息子ポールを溺愛する。 ジュリアンはその頃、近所に住む貴族のジルベルト夫人と不倫を始めるが、既に夫に失望しているジャンヌは、苦悩の末見てみぬ振りをすることを選ぶ。 しかしながら夫人の夫に事がバレた二人は、密会中に夫に殺される。\n一時期は愛した夫を失ったジャンヌは、母親にも先立たれたたジャンヌの父親とともに、ますます過剰なまでの愛をポールに注ぐ。 結果落ちこぼれとして育ったポールは、学校に入学後も落第しつづけ、女と駆け落ちしてロンドンに行方を眩ます。 彼は事業を起こして失敗し、多額の借金を背負い、手紙でジャンヌに無心する。 ジャンヌは財産を全て失い、家を手放すことになり、ジャンヌの父もその心労から脳溢血で亡くなる。\nポールは恋人に子供を産ませるが、産褥で亡くなる。 そのことを知ったジャンヌは、召使に引き取らせた孫娘を胸に抱き、終劇。\n：以上あらすじ\nあらすじを書くだけで、鬱々としてきます。 あまりにも善良で無知、人々の悪意を知らずに育ったジャンヌは、数々の試練を自ら切り拓くことなく、ただ周囲の流れに身を任せます。 結果悲劇的とも言える人生が待ち構えているわけなのですが、果たしてそれは彼女の怠惰に起因するものなのでしょうか。 筆者はそのよう因果関係を匂わせる文章を一切記述せず、起こった事実をありのまま精密に描写します。 つまり物語に教訓はなく、解釈は読者の方に委ねられていると捉えるべきでしょう。 冷徹なまでの写実的描写は、読んでいて映画を観ている錯覚を引き起こしました。\nぐんぐん進む馬車に乗っていること、窓の外の物悲しい風景を眺めること、そして降りしきる雨にもかかわらず、自分は濡れない場所にいること。ジャンヌはそれだけで嬉しかった。\nモーパッサン『女の一生』光文社古典新訳文庫\n原題は“Une vie”。 どこにも「女の」とは書いておらず、「ある人生」と訳すのが適当そうです。 筆者がやりたかったことは、人生とはこういうものだということを普遍的に描くことだったのかもしれません。\n","permalink":"https://inody.github.io/posts/read-maupassant/","summary":"二人の人間が、本当に魂の底まで、思いの奥底までひとつになることはできないのだと、ジャンヌは初めて思った。肩を並べて歩き、ときに抱き合うことはあっても、ひとつに溶け合うことはなく、心の底では誰もが生涯一人ぼっちなのだと。\nモーパッサン『女の一生』光文社古典新訳文庫\n光文社古典新訳文庫のシリーズが軒並みKindle Unlimitedの対象になっていたので、読書欲が際限なく刺激される今日この頃。 最近は新書を読むことが多かったので、久しぶりに読む小説は新鮮に感じられました。\n以下あらすじ：\n主人公のジャンヌは、貴族の一人娘として生まれ、幼い頃から修道院で何の汚れも知らぬまま大人になる。 ある日出会った美男の子爵ジュリアンからの求婚を受けるジャンヌ。 幸福の絶頂にいる彼女だが、その後の人生は要約すると転落の一言。\nある日、以前から様子がおかしい召使のロザリが突然倒れ、子供を出産する。 誰の子か問いただしても、口を閉ざすロザリ。 神父の前で懺悔させると、ようやく重い口を開き、父親がジュリアンであることを告げる。 ジャンヌの父親はこれに激怒するが、神父に誰にでもある間違いにすぎないと説得され、若いころの自分にも心当たりのあった父親はこれを許す。\nジャンヌにはその頃既に妊娠していた。 夫への愛は完全に消え失せた彼女だが、生まれる子供には出来る限りの愛情を尽くすことを誓う。\nジャンヌは父親とともに生まれてきた息子ポールを溺愛する。 ジュリアンはその頃、近所に住む貴族のジルベルト夫人と不倫を始めるが、既に夫に失望しているジャンヌは、苦悩の末見てみぬ振りをすることを選ぶ。 しかしながら夫人の夫に事がバレた二人は、密会中に夫に殺される。\n一時期は愛した夫を失ったジャンヌは、母親にも先立たれたたジャンヌの父親とともに、ますます過剰なまでの愛をポールに注ぐ。 結果落ちこぼれとして育ったポールは、学校に入学後も落第しつづけ、女と駆け落ちしてロンドンに行方を眩ます。 彼は事業を起こして失敗し、多額の借金を背負い、手紙でジャンヌに無心する。 ジャンヌは財産を全て失い、家を手放すことになり、ジャンヌの父もその心労から脳溢血で亡くなる。\nポールは恋人に子供を産ませるが、産褥で亡くなる。 そのことを知ったジャンヌは、召使に引き取らせた孫娘を胸に抱き、終劇。\n：以上あらすじ\nあらすじを書くだけで、鬱々としてきます。 あまりにも善良で無知、人々の悪意を知らずに育ったジャンヌは、数々の試練を自ら切り拓くことなく、ただ周囲の流れに身を任せます。 結果悲劇的とも言える人生が待ち構えているわけなのですが、果たしてそれは彼女の怠惰に起因するものなのでしょうか。 筆者はそのよう因果関係を匂わせる文章を一切記述せず、起こった事実をありのまま精密に描写します。 つまり物語に教訓はなく、解釈は読者の方に委ねられていると捉えるべきでしょう。 冷徹なまでの写実的描写は、読んでいて映画を観ている錯覚を引き起こしました。\nぐんぐん進む馬車に乗っていること、窓の外の物悲しい風景を眺めること、そして降りしきる雨にもかかわらず、自分は濡れない場所にいること。ジャンヌはそれだけで嬉しかった。\nモーパッサン『女の一生』光文社古典新訳文庫\n原題は“Une vie”。 どこにも「女の」とは書いておらず、「ある人生」と訳すのが適当そうです。 筆者がやりたかったことは、人生とはこういうものだということを普遍的に描くことだったのかもしれません。","title":"モーパッサン『女の一生』を読みました"},{"content":"昨年度留学していた時にカメラを盗まれて以来，ずっと再購入しようと思っていたのですが，就活や研究などで忙しく，買う機会を逃し続けていました． 先日友人と祇園祭を見て回った時に，ファインダーを覗く友人の姿が羨ましく思ったことが，再購入を決断したきっかけです．\n購入に際しては，第一に値段，第二に軽さを重視することにしました． 値段については，学生ゆえに金銭的余裕がなく，どうせお金をかけるならレンズに投資したいからであり， 軽さについては言わずもがな，少しでもコンパクトなほうが持ち出す機会も自ずと増えるからです．\n手元にはまだDA 35mmF2.8 Macro Limitedが残っていたので，引き続きK-マウントのボディだけ買うか，他のマウントに手をだすか迷ったのですが，数年間使い続けた愛着もあることから，前者を選ぶことにしました． 暗所でのAFの遅さとか，動体へのAFの遅さとか，あとライブビュー時のAFの遅さとか，他社と比べて何かと残念なPentaxの製品ですが，不器用なところがなんだか憎めないんですよね．\n前述の基準に照らしあわせ，比較検討したところ，K-S1が自分にはあってそうだったので，早速マップカメラで購入． 色は盗まれたK-30と同じ白にしました． このカメラ，発売当初は謎のLEDライト機能が不評であんまり売れなかったようなのですが，使っている時は全然気になりませんし，設定で常時OFFにすることもできます． ダイヤルの数は1つですが，K-30のころも，そんなに頻繁に2ダイヤルを同時に操作することがなかったので，これも問題ありませんでした． 重量も約500gと，同社製品の中では最軽量で，鞄に忍ばせるのに躊躇を感じさせません（ただし，軽いといえど某C社やN社は400g台の製品をいくつも揃えており，P社にももう少し頑張ってほしいと感じてしまいます…）． あと，地味にGUI周りのフォントやアニメーションが改善されているところが新鮮で好印象でした．\n先週末は早速DA 35mmF2.8 Macro Limitedをつけて京都の街にスナップ撮影に出掛けました． 以前便利ズームを持っていた頃は，単焦点レンズの出番は少なかったのですが，盗まれたことで使わざるを得ない状況になり，自分で足を動かして撮る楽しさを再認識しました． 手持ちのレンズを単焦点のみで構成するのも楽しそうです． またいい写真が取れたら，このブログにもupしたいと思います．\n","permalink":"https://inody.github.io/posts/purchase-camera/","summary":"昨年度留学していた時にカメラを盗まれて以来，ずっと再購入しようと思っていたのですが，就活や研究などで忙しく，買う機会を逃し続けていました． 先日友人と祇園祭を見て回った時に，ファインダーを覗く友人の姿が羨ましく思ったことが，再購入を決断したきっかけです．\n購入に際しては，第一に値段，第二に軽さを重視することにしました． 値段については，学生ゆえに金銭的余裕がなく，どうせお金をかけるならレンズに投資したいからであり， 軽さについては言わずもがな，少しでもコンパクトなほうが持ち出す機会も自ずと増えるからです．\n手元にはまだDA 35mmF2.8 Macro Limitedが残っていたので，引き続きK-マウントのボディだけ買うか，他のマウントに手をだすか迷ったのですが，数年間使い続けた愛着もあることから，前者を選ぶことにしました． 暗所でのAFの遅さとか，動体へのAFの遅さとか，あとライブビュー時のAFの遅さとか，他社と比べて何かと残念なPentaxの製品ですが，不器用なところがなんだか憎めないんですよね．\n前述の基準に照らしあわせ，比較検討したところ，K-S1が自分にはあってそうだったので，早速マップカメラで購入． 色は盗まれたK-30と同じ白にしました． このカメラ，発売当初は謎のLEDライト機能が不評であんまり売れなかったようなのですが，使っている時は全然気になりませんし，設定で常時OFFにすることもできます． ダイヤルの数は1つですが，K-30のころも，そんなに頻繁に2ダイヤルを同時に操作することがなかったので，これも問題ありませんでした． 重量も約500gと，同社製品の中では最軽量で，鞄に忍ばせるのに躊躇を感じさせません（ただし，軽いといえど某C社やN社は400g台の製品をいくつも揃えており，P社にももう少し頑張ってほしいと感じてしまいます…）． あと，地味にGUI周りのフォントやアニメーションが改善されているところが新鮮で好印象でした．\n先週末は早速DA 35mmF2.8 Macro Limitedをつけて京都の街にスナップ撮影に出掛けました． 以前便利ズームを持っていた頃は，単焦点レンズの出番は少なかったのですが，盗まれたことで使わざるを得ない状況になり，自分で足を動かして撮る楽しさを再認識しました． 手持ちのレンズを単焦点のみで構成するのも楽しそうです． またいい写真が取れたら，このブログにもupしたいと思います．","title":"カメラを新調しました"},{"content":"先日、日本での就職活動を終えました。 今年は例年と異なるスケジュールで、僕の帰国が遅れたこともあり、うまくいくか不安もあったのですが、売り手市場の後押しもあってか、最終的に幾つかの企業から内定を頂くことができました。 その中で一社を選択する際、勤務地や待遇などで一時期迷ったのですが、結局最後は「研究職としてのキャリアが積めそうか」に的を絞ることで、納得のいく選択ができたと思います。 進路先は、メーカーから独立した研究機関なので、とにかく何かしらの研究活動ができるであろうことや、企業の研究部門とは違い、目先の営利から少し離れた萌芽的な研究もできそうなことなどが魅力でした。\nこちらの記事に書いた通り、ベルギーの企業からも魅力的なオファーを頂いているので、もしかすると春までに心変わりする可能性もゼロではありません。 しかしながら、帰国後2か月経って思うことは、自分が日本を以前にも増して好きだということです。 確かに日本の労働環境は、お世辞にも優れているとは言えないでしょう。 ただそれを補って余りある、日本語と、日本人と、日本の文化への愛着を感じる自分がいます。 極論、自分がどこで死にたいかを考えたとき、日本がいいと思えるのです。\n終身雇用制が崩れた現代においても、ファーストキャリアの選択は重要だと思われます。 有難いことに、ベルギーの企業からは返事までにまだ時間を頂いているので、それまで進路のことは頭の片隅で意識しながら、卒業研究に力を入れたいと思います。\n","permalink":"https://inody.github.io/posts/finish-job-hunting/","summary":"先日、日本での就職活動を終えました。 今年は例年と異なるスケジュールで、僕の帰国が遅れたこともあり、うまくいくか不安もあったのですが、売り手市場の後押しもあってか、最終的に幾つかの企業から内定を頂くことができました。 その中で一社を選択する際、勤務地や待遇などで一時期迷ったのですが、結局最後は「研究職としてのキャリアが積めそうか」に的を絞ることで、納得のいく選択ができたと思います。 進路先は、メーカーから独立した研究機関なので、とにかく何かしらの研究活動ができるであろうことや、企業の研究部門とは違い、目先の営利から少し離れた萌芽的な研究もできそうなことなどが魅力でした。\nこちらの記事に書いた通り、ベルギーの企業からも魅力的なオファーを頂いているので、もしかすると春までに心変わりする可能性もゼロではありません。 しかしながら、帰国後2か月経って思うことは、自分が日本を以前にも増して好きだということです。 確かに日本の労働環境は、お世辞にも優れているとは言えないでしょう。 ただそれを補って余りある、日本語と、日本人と、日本の文化への愛着を感じる自分がいます。 極論、自分がどこで死にたいかを考えたとき、日本がいいと思えるのです。\n終身雇用制が崩れた現代においても、ファーストキャリアの選択は重要だと思われます。 有難いことに、ベルギーの企業からは返事までにまだ時間を頂いているので、それまで進路のことは頭の片隅で意識しながら、卒業研究に力を入れたいと思います。","title":"就活が終わりました"},{"content":"新しいWindowsマシンにHaskell環境を整えていたとき、\ncabal update 時に、\ncabal.exe: Codec.Compression.Zlib: premature end of compressed stream と表示され、アップデートが進まない現象に遭遇しました。 しばらく四苦八苦していたのですが、ググったらこちらのページに遭遇。\nどうやらパスの通ったディレクトリにcabal.exeをおけばよいらしく、\nC:\\Program Files\\Haskell Platform\\7.10.3\\lib\\extralibs\\bin にあったcabal.exeを\nC:\\Program Files\\Haskell Platform\\7.10.3\\bin にコピーしたらあっさり解決しました。\n","permalink":"https://inody.github.io/posts/windows-cabal/","summary":"新しいWindowsマシンにHaskell環境を整えていたとき、\ncabal update 時に、\ncabal.exe: Codec.Compression.Zlib: premature end of compressed stream と表示され、アップデートが進まない現象に遭遇しました。 しばらく四苦八苦していたのですが、ググったらこちらのページに遭遇。\nどうやらパスの通ったディレクトリにcabal.exeをおけばよいらしく、\nC:\\Program Files\\Haskell Platform\\7.10.3\\lib\\extralibs\\bin にあったcabal.exeを\nC:\\Program Files\\Haskell Platform\\7.10.3\\bin にコピーしたらあっさり解決しました。","title":"WindowsにHaskellをインストール時にcabalが動作しない時の対処法"},{"content":"先日無事日本に帰国しました。 帰国の前日にベルギーの空港でテロがあり、帰国便がキャンセルになってしまいましたが、不幸中の幸いというべきか、パリからの便に空きがあったため、フライトを変更してもらい、無事に帰国することができました。 一昨日に復学の手続きを終え、さっそく残る一年の修士課程に取り組み始めています。 研究活動に加え、就職活動も並行しておこなっているため、しばらくはまた忙しくなりそうです。 元同期がつぎつぎと社会に羽ばたいていく中、アラサーとなった自分が未だ大学に残っている事実に少し焦りを感じなくもありませんが、あまり深刻に捉えず、今年も自分らしい道を歩んでいきたいと思います。\n","permalink":"https://inody.github.io/posts/return-japan/","summary":"先日無事日本に帰国しました。 帰国の前日にベルギーの空港でテロがあり、帰国便がキャンセルになってしまいましたが、不幸中の幸いというべきか、パリからの便に空きがあったため、フライトを変更してもらい、無事に帰国することができました。 一昨日に復学の手続きを終え、さっそく残る一年の修士課程に取り組み始めています。 研究活動に加え、就職活動も並行しておこなっているため、しばらくはまた忙しくなりそうです。 元同期がつぎつぎと社会に羽ばたいていく中、アラサーとなった自分が未だ大学に残っている事実に少し焦りを感じなくもありませんが、あまり深刻に捉えず、今年も自分らしい道を歩んでいきたいと思います。","title":"帰国報告"},{"content":"前回の記事では、ベルギーでの企業研修を終えたこと、今後は日本企業に就職していずれは社会人博士を目指したいことをお話ししました。 しかしながら、企業研修を終える間際、上司に以下のことを言われたのです。\n「もし君が望むなら、卒業後うちに来てPhDやらないか」\n青天の霹靂とはこのことです。 前回お話しした通り、僕の部署では、大学と会社の両方に籍をおき、それぞれから奨学金と給料をもらいながら、PhDの取得を目指している方が何人もおられます。 提携先の大学は、地元のKU Leuvenであったり、イギリスのBristol Universityであったりと様々です。 うちの部署の上司は、そうした産学連携研究のパートナーを見つけるのが得意だそうで、僕が望めばどこかしらの大学の研究室に在籍させてもらい、さらに生活に必要な奨学金も整えてくれるとおっしゃってくれました。\nこの提案は、僕にとってこれ以上ないくらい魅力的なものです。 なぜならば、前回書いた、博士課程へ進学することのデメリット\n最低3年をかけて学ぶ時間的リスクに対して、将来得られるリターンが少ない。 学費を支払う金銭的余裕がない。 研究自体を目的化したくない。 のうち、少なくとも2と3が解決しそうに思われるからです。\n2は、会社からの給料と大学の奨学金によって解決しそうです。 それだけなく、日本には民間機関で海外博士に挑戦する人に奨学金を支給する団体が幾つかあり、それらを組み合わせれば、自活どころか、両親への資金援助も可能かもしれません。 さらに、こちらのサイトに記載されている通り、ヨーロッパの大学の授業料は日本と比べて安値な傾向にあるようです。\n3は、単純にこの8か月の研修内容を考えると、大学での研究より応用的な研究ができそうだという予感に起因します。 「航空機を制御する」という明確な問題ありきの研究においては、方針も自ずと明確になり、研究のための研究という事態は避けられそうです。\nとなると、残るは1です。 ここでは「リスク」と「リターン」をどう捉えるかが問題であり、その点でとても悩んでいます。 まず、リターンですが\n将来博士の学位を持つことは研究者として自分のキャリアアップになる 海外での正規の労働経験は、グローバルな人材としてのキャリアにつながる 単純に日本での博士取得に比べ金銭的費用が少なくて済む などがあると思います。 次に、リスクについてですが\nヨーロッパでの博士取得は4年。自分の場合30歳で博士を取得することになる 30歳になって日本に帰国して、年功序列の社会が自分のキャリアを評価してくれるか不明 4年を海外で過ごすことで感じる孤独感、漠然とした不安 婚期を逃しそう などでしょうか。 特に4つめは瑣末に思われるかもしれませんが、僕には重要です。 なぜならば海外生活で得た一つの帰結として、自分は日本人と結婚したいというものがあるからです。 ここベルギーに住む日本人女性の数は多くなく、その中から結婚相手を探すことは難しそうです。 となると30歳になって帰国し婚活するしかないのでしょうが、おっさんになった自分と相思相愛の関係になる女性に出会える保証はどこにもありません。 またこれは3つめにも繋がるのですが、大切な人に支えてもらわないと、海外生活を乗り切れる自信がありません（甘いことを言っている自覚はあります）。\n2つめについてですが、そもそも日本に帰国するのか、という問題があります。 一般に、日本の労働環境はお世辞にも良いとはいえず、文化の壁を克服し、現地に順応さえできれば、将来的にも欧州で生活していくことも、一つのプランとして考えられそうです（これも結婚相手を見つけられた場合）。 また、こちらでは年功序列の文化がほとんどないので、博士習得にかかる時間的リスクも自ずと減ります。\nさて、長々と書き綴りましたが、結局どうするかはまだ決まっていません。 幸い上司には、修士を終える数ヶ月前に連絡をするよう言われており、悩むにはまだ時間がありそうです（ただし、日本の民間奨学金の締め切りが8月に来るので、こちらがボトルネックになりそう）。 それまで、日本での就活を通じて、研究職としてのキャリアを探りながら、いずれ決断したいと思います。\n","permalink":"https://inody.github.io/posts/finish-belgium2/","summary":"前回の記事では、ベルギーでの企業研修を終えたこと、今後は日本企業に就職していずれは社会人博士を目指したいことをお話ししました。 しかしながら、企業研修を終える間際、上司に以下のことを言われたのです。\n「もし君が望むなら、卒業後うちに来てPhDやらないか」\n青天の霹靂とはこのことです。 前回お話しした通り、僕の部署では、大学と会社の両方に籍をおき、それぞれから奨学金と給料をもらいながら、PhDの取得を目指している方が何人もおられます。 提携先の大学は、地元のKU Leuvenであったり、イギリスのBristol Universityであったりと様々です。 うちの部署の上司は、そうした産学連携研究のパートナーを見つけるのが得意だそうで、僕が望めばどこかしらの大学の研究室に在籍させてもらい、さらに生活に必要な奨学金も整えてくれるとおっしゃってくれました。\nこの提案は、僕にとってこれ以上ないくらい魅力的なものです。 なぜならば、前回書いた、博士課程へ進学することのデメリット\n最低3年をかけて学ぶ時間的リスクに対して、将来得られるリターンが少ない。 学費を支払う金銭的余裕がない。 研究自体を目的化したくない。 のうち、少なくとも2と3が解決しそうに思われるからです。\n2は、会社からの給料と大学の奨学金によって解決しそうです。 それだけなく、日本には民間機関で海外博士に挑戦する人に奨学金を支給する団体が幾つかあり、それらを組み合わせれば、自活どころか、両親への資金援助も可能かもしれません。 さらに、こちらのサイトに記載されている通り、ヨーロッパの大学の授業料は日本と比べて安値な傾向にあるようです。\n3は、単純にこの8か月の研修内容を考えると、大学での研究より応用的な研究ができそうだという予感に起因します。 「航空機を制御する」という明確な問題ありきの研究においては、方針も自ずと明確になり、研究のための研究という事態は避けられそうです。\nとなると、残るは1です。 ここでは「リスク」と「リターン」をどう捉えるかが問題であり、その点でとても悩んでいます。 まず、リターンですが\n将来博士の学位を持つことは研究者として自分のキャリアアップになる 海外での正規の労働経験は、グローバルな人材としてのキャリアにつながる 単純に日本での博士取得に比べ金銭的費用が少なくて済む などがあると思います。 次に、リスクについてですが\nヨーロッパでの博士取得は4年。自分の場合30歳で博士を取得することになる 30歳になって日本に帰国して、年功序列の社会が自分のキャリアを評価してくれるか不明 4年を海外で過ごすことで感じる孤独感、漠然とした不安 婚期を逃しそう などでしょうか。 特に4つめは瑣末に思われるかもしれませんが、僕には重要です。 なぜならば海外生活で得た一つの帰結として、自分は日本人と結婚したいというものがあるからです。 ここベルギーに住む日本人女性の数は多くなく、その中から結婚相手を探すことは難しそうです。 となると30歳になって帰国し婚活するしかないのでしょうが、おっさんになった自分と相思相愛の関係になる女性に出会える保証はどこにもありません。 またこれは3つめにも繋がるのですが、大切な人に支えてもらわないと、海外生活を乗り切れる自信がありません（甘いことを言っている自覚はあります）。\n2つめについてですが、そもそも日本に帰国するのか、という問題があります。 一般に、日本の労働環境はお世辞にも良いとはいえず、文化の壁を克服し、現地に順応さえできれば、将来的にも欧州で生活していくことも、一つのプランとして考えられそうです（これも結婚相手を見つけられた場合）。 また、こちらでは年功序列の文化がほとんどないので、博士習得にかかる時間的リスクも自ずと減ります。\nさて、長々と書き綴りましたが、結局どうするかはまだ決まっていません。 幸い上司には、修士を終える数ヶ月前に連絡をするよう言われており、悩むにはまだ時間がありそうです（ただし、日本の民間奨学金の締め切りが8月に来るので、こちらがボトルネックになりそう）。 それまで、日本での就活を通じて、研究職としてのキャリアを探りながら、いずれ決断したいと思います。","title":"（続）ベルギーでの企業研修を終えました"},{"content":"昨年の8月から、ベルギーのSiemens Industry Software NVという会社でインターン生として働いていたのですが、今日が研修最終日でした。 最終プレゼンも無事に終わり、いよいよ一年間の海外生活も幕を閉じつつあります。\n一年間を通じて、英語を用いた交流経験、エンジニアとしての労働経験、異文化の体験など、日本では決して得られなかった経験ができて、本当によかったと思います。 以下では、得られたこと、これからのことを簡単にまとめたいと思います。\nはじめ4か月のアイルランドでの語学研修は、文字通り初めての海外生活でした。 それまで英語で人と会話することがほとんどなかったこともあり、はじめは戸惑い、まともに挨拶もできない状態でした。 しかしながら、時が経つにつれ、これまで学校で学んできた文法や単語の知識が、会話においても十分役立つことがわかり、少なくとも英語での交流を恐れる気持ちは払拭出来ました。\n語学学校での授業は、語学力を底上げする大きな助けになりました。 特に、会話における表現とその使いどころについての知識は、その後の企業研修でも大いに役立ちました。\nある程度滞り無く会話ができるようになってからは、各国から来た留学生と、授業後にカフェやレストランに行き、それぞれの国の文化や産業、宗教などについて話すようになりました。 会話の中で驚いたのが、日本という国が、とりわけ産業面において世界に大きな影響を与えており、そのことが広く認知されていたことです。 たとえば、滞在中出会ったほとんどの人が、日本の車や電機メーカーのことを知っていましたし、私が日本で工学を勉強していると話すと、皆口を揃えて、将来はお金持ちになるんだねと言いました。\nまた、日本が他国と比べてどのような特徴をもっているか、客観視することができたのも、有意義な経験でした。 我が国の外国人比率はおよそ2%であり、世界の中でもとても低い順位です。 互いに文化や宗教の異なる人々がともに摩擦なく過ごしていくには、互いを理解し尊重しようとする努力が欠かせないことを知りました。\nつぎに、8月からの企業研修では、航空機の制御シミュレーションに関わるR\u0026amp;Dをおこないました。 私の専門は制御工学であるため、制御に関することはある程度知っていたのですが、航空機そのものについてはほとんど何も知らなかったため、企業研修は、航空力学を一から勉強することから始まりました。 参考文献を読むにあたっては、同じオフィスで働く航空力学を専攻するPh.Dの学生の方達に大いに助けていただきました。 休憩時間などには、研究者として少し先のキャリアを歩む彼らに、進路の相談にも乗ってもらうこともありました。\n分厚い教科書や参考文献を一ヶ月近くかけて読み終えた私は、つぎに制御シミュレーションに取り掛かりました。 そこで「航空機のモデルの作成」「制御目標の設定」「制御器の設計」「シミュレーション」というモデルベースドデザインの基本となる一連の過程を経験することができました。 この段階においても、私がすでに持っていた制御についての知識以上のものを習得する機会が多々あり、技術を企業ではどのように展開していくのかということも間近で拝見することができました。\n研修期間は、ベルギーと日本の働き方の違いを実感し続けた8か月間でもありました。 ベルギーにおけるライフワークバランスはとりわけ優れていると感じます。 私のオフィスでは、残業することは本人に時間内に業務を完遂するする能力がないことと同等とみなされており、社員は滅多に残業することはありません。 また、日曜にどのお店も空いてないのは、はじめ不便に感じましたが、国民が各々の生活を大事にする上では合理的な習慣であると理解しました。\n私は将来研究者として働きたいと考えているため、会社を挙げてPh.Dの取得が奨励されていることも、魅力に映りました。 私のオフィスでは、会社と大学の両方から給料を受給しながら博士課程に取り組む社員が少なからずいました。 このような仕組みは、今後あらゆる産業に高度な付加価値や生産の効率化が求められる中、産学連携での研究を活発にする上で、有効な仕組みであると感じます。 日本の博士の称号は「足の裏の米粒」と言われ、技術者として働く上では通常重要視されないこと、取得においては安くない学費を払う必要があることと、対照的に思えました。\nさて、帰国後の進路についてですが、正直とても悩んでいます。 本来は、「日本での就活を通じて研究職としての働ける企業を模索し、修了後は働きながらお金を貯め、いずれは社会人博士」といった道を考えていました（過去形である理由は後述）。 まず、ストレートに博士進学を目指さない理由は以下によるものです。\n最低3年をかけて学ぶ時間的コストに対して、将来得られるリターンが少ないと感じる。 学費を支払う金銭的余裕がない。 研究自体を目的化したくない。 1について。 上でも触れた、欧州での博士重視の風潮は、裏返せば修士では研究職に就くのが難しいことを意味します。一方日本では、研究職として働く上で、修士卒であることのディスアドバンテージはそこまで大きくないのかな、と感じます。 また、就職すれば、働く中で研究職に対する自分の適性がよりはっきりし、キャリアを再考することもできそうなのに対し、博士に進学してしまったら、退路が立たれてしまいそうなことも、懸念事項です。\n2について。 今でも学費と生活費の全てを貯金と奨学金で賄う自転車操業状態であり、これを後3年続けるのは、金銭的にのみならず、精神的に相当不健康です。 両親からは、大学入学以降早々に仕送りを打ち切られ、逆に早く働いて家に金を入れるよう日々プレッシャーをかけられており、援助なんてとても期待できません。 学振などの諸制度にパスできれば、この問題は解決できるかもしれませんが、やはり働いたほうが手っ取り早くお金を稼げます。\n3について。 研究室では、研究のための研究がおこなわれていることがあります。 特に僕が取り組んでいた研究テーマは、学術的に面白くはあるのですが、実際社会で使えるかと聞かれれば、首を傾げざるをえません。 企業でおこなわれる、問題解決を目的とした実践的な研究のほうが、自分には合っているというのが、ベルギーでの企業研修で得られた教訓の一つです。\nさて、このような理由で、先に述べた「就職後社会人博士」の像が徐々に形作られていたわけなのですが、この度の企業研修を終えた際に、上司からあるお話をいただきました。\nそれは、「うちでPh.Dをやらないか」というものです。\n長くなってきたので、続きは次回。\n","permalink":"https://inody.github.io/posts/finish-belgium/","summary":"昨年の8月から、ベルギーのSiemens Industry Software NVという会社でインターン生として働いていたのですが、今日が研修最終日でした。 最終プレゼンも無事に終わり、いよいよ一年間の海外生活も幕を閉じつつあります。\n一年間を通じて、英語を用いた交流経験、エンジニアとしての労働経験、異文化の体験など、日本では決して得られなかった経験ができて、本当によかったと思います。 以下では、得られたこと、これからのことを簡単にまとめたいと思います。\nはじめ4か月のアイルランドでの語学研修は、文字通り初めての海外生活でした。 それまで英語で人と会話することがほとんどなかったこともあり、はじめは戸惑い、まともに挨拶もできない状態でした。 しかしながら、時が経つにつれ、これまで学校で学んできた文法や単語の知識が、会話においても十分役立つことがわかり、少なくとも英語での交流を恐れる気持ちは払拭出来ました。\n語学学校での授業は、語学力を底上げする大きな助けになりました。 特に、会話における表現とその使いどころについての知識は、その後の企業研修でも大いに役立ちました。\nある程度滞り無く会話ができるようになってからは、各国から来た留学生と、授業後にカフェやレストランに行き、それぞれの国の文化や産業、宗教などについて話すようになりました。 会話の中で驚いたのが、日本という国が、とりわけ産業面において世界に大きな影響を与えており、そのことが広く認知されていたことです。 たとえば、滞在中出会ったほとんどの人が、日本の車や電機メーカーのことを知っていましたし、私が日本で工学を勉強していると話すと、皆口を揃えて、将来はお金持ちになるんだねと言いました。\nまた、日本が他国と比べてどのような特徴をもっているか、客観視することができたのも、有意義な経験でした。 我が国の外国人比率はおよそ2%であり、世界の中でもとても低い順位です。 互いに文化や宗教の異なる人々がともに摩擦なく過ごしていくには、互いを理解し尊重しようとする努力が欠かせないことを知りました。\nつぎに、8月からの企業研修では、航空機の制御シミュレーションに関わるR\u0026amp;Dをおこないました。 私の専門は制御工学であるため、制御に関することはある程度知っていたのですが、航空機そのものについてはほとんど何も知らなかったため、企業研修は、航空力学を一から勉強することから始まりました。 参考文献を読むにあたっては、同じオフィスで働く航空力学を専攻するPh.Dの学生の方達に大いに助けていただきました。 休憩時間などには、研究者として少し先のキャリアを歩む彼らに、進路の相談にも乗ってもらうこともありました。\n分厚い教科書や参考文献を一ヶ月近くかけて読み終えた私は、つぎに制御シミュレーションに取り掛かりました。 そこで「航空機のモデルの作成」「制御目標の設定」「制御器の設計」「シミュレーション」というモデルベースドデザインの基本となる一連の過程を経験することができました。 この段階においても、私がすでに持っていた制御についての知識以上のものを習得する機会が多々あり、技術を企業ではどのように展開していくのかということも間近で拝見することができました。\n研修期間は、ベルギーと日本の働き方の違いを実感し続けた8か月間でもありました。 ベルギーにおけるライフワークバランスはとりわけ優れていると感じます。 私のオフィスでは、残業することは本人に時間内に業務を完遂するする能力がないことと同等とみなされており、社員は滅多に残業することはありません。 また、日曜にどのお店も空いてないのは、はじめ不便に感じましたが、国民が各々の生活を大事にする上では合理的な習慣であると理解しました。\n私は将来研究者として働きたいと考えているため、会社を挙げてPh.Dの取得が奨励されていることも、魅力に映りました。 私のオフィスでは、会社と大学の両方から給料を受給しながら博士課程に取り組む社員が少なからずいました。 このような仕組みは、今後あらゆる産業に高度な付加価値や生産の効率化が求められる中、産学連携での研究を活発にする上で、有効な仕組みであると感じます。 日本の博士の称号は「足の裏の米粒」と言われ、技術者として働く上では通常重要視されないこと、取得においては安くない学費を払う必要があることと、対照的に思えました。\nさて、帰国後の進路についてですが、正直とても悩んでいます。 本来は、「日本での就活を通じて研究職としての働ける企業を模索し、修了後は働きながらお金を貯め、いずれは社会人博士」といった道を考えていました（過去形である理由は後述）。 まず、ストレートに博士進学を目指さない理由は以下によるものです。\n最低3年をかけて学ぶ時間的コストに対して、将来得られるリターンが少ないと感じる。 学費を支払う金銭的余裕がない。 研究自体を目的化したくない。 1について。 上でも触れた、欧州での博士重視の風潮は、裏返せば修士では研究職に就くのが難しいことを意味します。一方日本では、研究職として働く上で、修士卒であることのディスアドバンテージはそこまで大きくないのかな、と感じます。 また、就職すれば、働く中で研究職に対する自分の適性がよりはっきりし、キャリアを再考することもできそうなのに対し、博士に進学してしまったら、退路が立たれてしまいそうなことも、懸念事項です。\n2について。 今でも学費と生活費の全てを貯金と奨学金で賄う自転車操業状態であり、これを後3年続けるのは、金銭的にのみならず、精神的に相当不健康です。 両親からは、大学入学以降早々に仕送りを打ち切られ、逆に早く働いて家に金を入れるよう日々プレッシャーをかけられており、援助なんてとても期待できません。 学振などの諸制度にパスできれば、この問題は解決できるかもしれませんが、やはり働いたほうが手っ取り早くお金を稼げます。\n3について。 研究室では、研究のための研究がおこなわれていることがあります。 特に僕が取り組んでいた研究テーマは、学術的に面白くはあるのですが、実際社会で使えるかと聞かれれば、首を傾げざるをえません。 企業でおこなわれる、問題解決を目的とした実践的な研究のほうが、自分には合っているというのが、ベルギーでの企業研修で得られた教訓の一つです。\nさて、このような理由で、先に述べた「就職後社会人博士」の像が徐々に形作られていたわけなのですが、この度の企業研修を終えた際に、上司からあるお話をいただきました。\nそれは、「うちでPh.Dをやらないか」というものです。\n長くなってきたので、続きは次回。","title":"ベルギーでの企業研修を終えました"},{"content":"大作と呼ばれる本作品、昨年末から積ん読していたのですが、この度の旅行のお供にした結果、ようやく読了に至る運びとなりました。\n著者の主張は一貫して明らかで、「地球上の文明の進歩に差がついたのは、地理的・生態的な要因によるものだ」というものです。 例えば、「ユーラシア大陸がアメリカ大陸を侵略して、逆ではなかったのはなぜか」という問いに対する究極の答えは、「ユーラシア大陸の方が多様な動植物が住んでおり、かつ東西に長い形をしていたから」と述べられています。\n順番としてはこうです。 ある土地に多様な動植物が分布しているとします。 すると、これら動植物を狩猟して、ヒトは増えることができます。 つぎに、ヒトはそれらの動植物を栽培・家畜化しようと考えます。 たくさんの動植物がいると、その中で栽培・家畜化可能な動植物が存在する確率は上がります。 栽培・家畜化が成功すると、人々の分業が進みます。 分業により人々の暇な時間が増えることで、さらなる栽培・家畜化のみならず、武器や移動手段などの発明が進みます。 ここで、文化や発明などは、南北方向より、東西方向に広がりやすいことが知られています。 東西方向の方が、気候や植生などの環境が似通っているからです。 大陸が東西に長いと、文化や発明の交流が活発に進みます。 逆に、南北方向に長いと、砂漠などの異なる気候がヒトの移動を阻み、交流が起きづらくなります。\nユーラシア大陸には多様な動植物が住んでおり、かつ東西に長い形をしていました。 南北アメリカ大陸はユーラシアほどの動植物が住んでおらず、大陸の形も南北に延びていました。 結果、ユーラシア大陸がアメリカ大陸を侵略する歴史になったわけです。\n本書の主張はこのように単純明快で、概要は序章と終章を読むだけで事足ります。 では、間の全19章には何が書かれているのでしょうか。 著者は、上で述べたような問いをその都度立てて、それに対する答えを膨大なデータとともに考察しているのです。 例えば「同じユーラシア大陸の中で、ヨーロッパの国々と中国を比べたとき、ヨーロッパが先進国となり、逆にならなかったのはなぜか」などです。 回答は是非本書を読んでお確かめください。\n全体を通して、歴史という一回性の出来事に対して、定量的な評価を行うことで、科学として扱おうとする、作者の歴史科学者としての信念が見て取れました。 個人的には、フォンノイマンが経済現象を数式を用いて定式化することで、ゲーム理論という新たな枠組みを提唱したことと似たものを感じました。\nさて、これで積ん読は全て消化したため、つぎは何を読もうか、とても悩ましいです。\n","permalink":"https://inody.github.io/posts/read-jaredo/","summary":"大作と呼ばれる本作品、昨年末から積ん読していたのですが、この度の旅行のお供にした結果、ようやく読了に至る運びとなりました。\n著者の主張は一貫して明らかで、「地球上の文明の進歩に差がついたのは、地理的・生態的な要因によるものだ」というものです。 例えば、「ユーラシア大陸がアメリカ大陸を侵略して、逆ではなかったのはなぜか」という問いに対する究極の答えは、「ユーラシア大陸の方が多様な動植物が住んでおり、かつ東西に長い形をしていたから」と述べられています。\n順番としてはこうです。 ある土地に多様な動植物が分布しているとします。 すると、これら動植物を狩猟して、ヒトは増えることができます。 つぎに、ヒトはそれらの動植物を栽培・家畜化しようと考えます。 たくさんの動植物がいると、その中で栽培・家畜化可能な動植物が存在する確率は上がります。 栽培・家畜化が成功すると、人々の分業が進みます。 分業により人々の暇な時間が増えることで、さらなる栽培・家畜化のみならず、武器や移動手段などの発明が進みます。 ここで、文化や発明などは、南北方向より、東西方向に広がりやすいことが知られています。 東西方向の方が、気候や植生などの環境が似通っているからです。 大陸が東西に長いと、文化や発明の交流が活発に進みます。 逆に、南北方向に長いと、砂漠などの異なる気候がヒトの移動を阻み、交流が起きづらくなります。\nユーラシア大陸には多様な動植物が住んでおり、かつ東西に長い形をしていました。 南北アメリカ大陸はユーラシアほどの動植物が住んでおらず、大陸の形も南北に延びていました。 結果、ユーラシア大陸がアメリカ大陸を侵略する歴史になったわけです。\n本書の主張はこのように単純明快で、概要は序章と終章を読むだけで事足ります。 では、間の全19章には何が書かれているのでしょうか。 著者は、上で述べたような問いをその都度立てて、それに対する答えを膨大なデータとともに考察しているのです。 例えば「同じユーラシア大陸の中で、ヨーロッパの国々と中国を比べたとき、ヨーロッパが先進国となり、逆にならなかったのはなぜか」などです。 回答は是非本書を読んでお確かめください。\n全体を通して、歴史という一回性の出来事に対して、定量的な評価を行うことで、科学として扱おうとする、作者の歴史科学者としての信念が見て取れました。 個人的には、フォンノイマンが経済現象を数式を用いて定式化することで、ゲーム理論という新たな枠組みを提唱したことと似たものを感じました。\nさて、これで積ん読は全て消化したため、つぎは何を読もうか、とても悩ましいです。","title":"ジャレド・ダイアモンド著の『銃・病原菌・鉄』を読みました"},{"content":"技術者として生きていく上で、複数の専門をもつというのは、重要な戦略になることを最近実感している。\n例えば、僕の専門は制御工学であり、学部・大学院とともに、紙とペンを用いて理論寄りのテーマを研究してきた。 研究を通じて統計学や最適化、授業を通じて機械工学や電気・電子工学などを幅広く学んではきたが、それでも「専門」として答えられる分野は制御くらいしかない。\n翻って今の上司を見てみると、航空工学と統計学のダブルディグリーで修士号を取得後、博士では航空機に対する状態推定と制御に関する研究をしている。 さらにソフトウェアの開発にも精通していて、趣味としてモバイルアプリの開発もおこなうという多才ぶりだ。\n「ある分野で10人に1人の人材である人が、別の分野でも10人に1人の人材であるならば、両分野に関連する領域では100人に1人の逸材であることを意味する」という推論は、キャリアを考える上で重要な考え方のように思われる。\nここで大事なのは、やたら何にでも手を出すのではなく、相性のよい分野を選択しリソースを割くことだろう。 さもなくば、分野同士の共通領域がなくなってしまい、活躍できるフィールドも限られてしまうからだ。\nまた、あまりにありがちな組み合わせを選択するのも、よい戦略とは言えない。 なぜならば、上記の推論は、両分野に属する人材が独立に分布しているという仮定にもとづいているからだ。 例えば機械と電気は切っても切れない関係にあり、その両方を学ぶ人は多いだろう。 そのため、両分野それぞれで10人に1人の人材になれたとしても、それらをまたがる領域で100人に1人の人材になれるとは限らない。\n互いに重複する分野のなかでも、少し意外性があるが実は相性がよい、そういった領域を選択するのがいい。\n現代のものづくりの傾向を考えてみると、大規模で高度なシステムほど、コストやリスク削減のために、ソフトウェアによるモデルベースでの開発が重要になってきている。 このため、技術者志望の僕にとって、プログラミングやデータベース管理などに精通しておくことは、アドバンテージになるだろう。 しかしこれは意外でも何でもない。\n中央大学の竹内先生が仰るとおり、これからの理系の研究者に必要なのは文系力であるということを鑑みれば、経営やマネジメントを学ぶのも意義深いだろう。\n「専門」というテーマからは少し離れるが、語学は絶対に身につけたほうがいい。 世界的に技術者は不足しており、使える言語が増えるほど、働く領域が増えるのは言うまでもないからだ。 実際僕自身、ヨーロッパに来てからというもの、どうしてもっと早く英語を勉強して来なかったのかと毎日のように後悔している。 しかしながら、ポジティブに考えれば「日本語ができる技術者」というのは世界的にも稀だという見方ができ、これが現在僕が日本で働くことを希望する理由の一つになっている。\nさて、ここ数日考えたことを適当に書き散らした。 いずれにせよ、終身雇用制度が崩れ、スキル無くして生き残るのは難しい今、リストラに怯えるような毎日を送らないためにも、自主的に勉強する習慣は常に身につけておきたい。\n","permalink":"https://inody.github.io/posts/multi-major/","summary":"技術者として生きていく上で、複数の専門をもつというのは、重要な戦略になることを最近実感している。\n例えば、僕の専門は制御工学であり、学部・大学院とともに、紙とペンを用いて理論寄りのテーマを研究してきた。 研究を通じて統計学や最適化、授業を通じて機械工学や電気・電子工学などを幅広く学んではきたが、それでも「専門」として答えられる分野は制御くらいしかない。\n翻って今の上司を見てみると、航空工学と統計学のダブルディグリーで修士号を取得後、博士では航空機に対する状態推定と制御に関する研究をしている。 さらにソフトウェアの開発にも精通していて、趣味としてモバイルアプリの開発もおこなうという多才ぶりだ。\n「ある分野で10人に1人の人材である人が、別の分野でも10人に1人の人材であるならば、両分野に関連する領域では100人に1人の逸材であることを意味する」という推論は、キャリアを考える上で重要な考え方のように思われる。\nここで大事なのは、やたら何にでも手を出すのではなく、相性のよい分野を選択しリソースを割くことだろう。 さもなくば、分野同士の共通領域がなくなってしまい、活躍できるフィールドも限られてしまうからだ。\nまた、あまりにありがちな組み合わせを選択するのも、よい戦略とは言えない。 なぜならば、上記の推論は、両分野に属する人材が独立に分布しているという仮定にもとづいているからだ。 例えば機械と電気は切っても切れない関係にあり、その両方を学ぶ人は多いだろう。 そのため、両分野それぞれで10人に1人の人材になれたとしても、それらをまたがる領域で100人に1人の人材になれるとは限らない。\n互いに重複する分野のなかでも、少し意外性があるが実は相性がよい、そういった領域を選択するのがいい。\n現代のものづくりの傾向を考えてみると、大規模で高度なシステムほど、コストやリスク削減のために、ソフトウェアによるモデルベースでの開発が重要になってきている。 このため、技術者志望の僕にとって、プログラミングやデータベース管理などに精通しておくことは、アドバンテージになるだろう。 しかしこれは意外でも何でもない。\n中央大学の竹内先生が仰るとおり、これからの理系の研究者に必要なのは文系力であるということを鑑みれば、経営やマネジメントを学ぶのも意義深いだろう。\n「専門」というテーマからは少し離れるが、語学は絶対に身につけたほうがいい。 世界的に技術者は不足しており、使える言語が増えるほど、働く領域が増えるのは言うまでもないからだ。 実際僕自身、ヨーロッパに来てからというもの、どうしてもっと早く英語を勉強して来なかったのかと毎日のように後悔している。 しかしながら、ポジティブに考えれば「日本語ができる技術者」というのは世界的にも稀だという見方ができ、これが現在僕が日本で働くことを希望する理由の一つになっている。\nさて、ここ数日考えたことを適当に書き散らした。 いずれにせよ、終身雇用制度が崩れ、スキル無くして生き残るのは難しい今、リストラに怯えるような毎日を送らないためにも、自主的に勉強する習慣は常に身につけておきたい。","title":"複数の専門をもつことの重要性"},{"content":"概要 インターン先で進捗をレポートにまとめるよう言われたので、この機会を利用して、Markdownで全部書いてみようと思い至りました。 Markdownはとても便利な記法ですが、引用や相互参照については少し手が届かないところがあります。 そこで今回、pandocとその拡張ツールであるpandoc-citeproc及びpandoc-cross-refを用いて、論文（っぽく見える文章）をMarkdownで書く環境を整えてみました。 あわよくば修論をこれで書きたい。\n僕の環境 OS X El Capitan MacTeX 2015 cabalのインストール 今回使うツールであるpandocをインストールするために、cabalを導入します。 cabalとはHaskellのライブラリ管理ツールです（Pythonでいうpipみたいなもの）。 cabalはbrewからインストール可能です。\nbrew install cabal ついで\ncabal update で最新の状態にアップデートします。 またこのままでは、cabalで管理するパッケージをターミナルが認識できないので、パスを追加します。 .bash_profileに\nexport PATH=\u0026quot;/Users/user_name/.cabal/bin:$PATH\u0026quot; を追加します。\nちなみにホームディレクトリに.bash_profileがあるかは\nls -la コマンドで確認できます。なかった場合は\ntouch .bash_profile で作成してください。\npandocのインストール つぎに、今回の主役であるpandocをインストールします。\ncabal install pandoc その後 which pandoc でパスが表示されれば成功です。 これでひとまず\npandoc main.md -o main.pdf とすることでpdf出力できます。\npandoc-citeprocのインストール このままでもそれっぽいレポートが書けるのですが、参考文献に.bibファイルを使えるとさらに便利になるので、そのための環境を整えます。\ncabal install pandoc-citeproc とタイプし、pandoc-citeprocという環境を用意します。 念のためここでもwhich pandoc-citeproc でパスを確認しときましょう。\npandoc-citeprocの使い方を説明します。 いつも使っている.bibファイルの名前を references.bib とします。 中身はよくある文献リストで、次のような感じだとします。\n@book{stevens2003aircraft, title={Aircraft control and simulation}, author={Stevens, Brian L and Lewis, Frank L}, year={2003}, publisher={John Wiley \\\u0026amp; Sons} } これを.mdファイルの方では[@stevens2003aircraft]というふうに@をつけて参照します。 また、.mdファイルの最終行には#Referencesと記入しておくと、その下に文献リストが表示されます。\npandoc-citeprocを経由してコンパイルする方法は\npandoc main.md --bibliography references.bib -o main.pdf という感じです。\npandoc-crossrefのインストール つぎに、相互参照をするための拡張機能である、pandoc-crossrefを導入します。 ターミナルで\ncabal install pandoc-crossref とタイプし、which pandoc-crossref でパスが表示されれば成功です。\n使い方については、例えば図にラベリングしたい時は\n![sample.jpg](sample.jpeg){#fig:label} と{#fig:~}を書き足します。 そして、参照するときは\n[@fig:label] と[@fig:~]とすれば、自動で参照してくれます。 他にも、@sec、@eq、@tblなどに対応しています。 詳しいことは公式に書いてあります。\nコンパイル方法は\npandoc main.md --filter pandoc-crossref -o main.pdf という感じです。\n豆知識 .mdファイルを\n% title % author's name % date という記述で書き始めると、コンパイル時に自動的に論文っぽいタイトルが出力されます。 さらに、dateの欄には\\todayコマンドが使えます。\nまた、デフォルトの余白が狭すぎる場合\n-V geometry:margin=30mm などのコマンドを追加すると変更できます。\n章番号をつけたい場合\n-N を追加すると追加できます。\nさて、全てのコマンドをまとめてみましょう。\npandoc main.md --filter pandoc-crossref --bibliography references.bib -o main.pdf -V geometry:margin=30mm -N\u0026quot; こんな感じですね。\n日本語化においての問題点 pandocで日本語文書を扱う方法として、lualatexでltjsarticleのクラスを指定してコンパイルする方法があります。 具体的には\n-V documentclass=ltjsarticle --latex-engine=lualatex\u0026quot; を上のコマンドに追加すればよいのですが、僕の環境では信じられないくらいコンパイルに時間がかかります。 試しに、ltjsarticleを追加せずにコンパイルして3-4秒時間のかかったファイルに対して、ltjsarticleを指定してコンパイルすると、40秒近くかかってしまいました。 現在理由を調査中なのですが、いまいちよくわかりません。 誰か解決策をご存知の方がいらっしゃいましたら、何卒ご教授ください。\n","permalink":"https://inody.github.io/posts/markdown-paper-writing/","summary":"概要 インターン先で進捗をレポートにまとめるよう言われたので、この機会を利用して、Markdownで全部書いてみようと思い至りました。 Markdownはとても便利な記法ですが、引用や相互参照については少し手が届かないところがあります。 そこで今回、pandocとその拡張ツールであるpandoc-citeproc及びpandoc-cross-refを用いて、論文（っぽく見える文章）をMarkdownで書く環境を整えてみました。 あわよくば修論をこれで書きたい。\n僕の環境 OS X El Capitan MacTeX 2015 cabalのインストール 今回使うツールであるpandocをインストールするために、cabalを導入します。 cabalとはHaskellのライブラリ管理ツールです（Pythonでいうpipみたいなもの）。 cabalはbrewからインストール可能です。\nbrew install cabal ついで\ncabal update で最新の状態にアップデートします。 またこのままでは、cabalで管理するパッケージをターミナルが認識できないので、パスを追加します。 .bash_profileに\nexport PATH=\u0026quot;/Users/user_name/.cabal/bin:$PATH\u0026quot; を追加します。\nちなみにホームディレクトリに.bash_profileがあるかは\nls -la コマンドで確認できます。なかった場合は\ntouch .bash_profile で作成してください。\npandocのインストール つぎに、今回の主役であるpandocをインストールします。\ncabal install pandoc その後 which pandoc でパスが表示されれば成功です。 これでひとまず\npandoc main.md -o main.pdf とすることでpdf出力できます。\npandoc-citeprocのインストール このままでもそれっぽいレポートが書けるのですが、参考文献に.bibファイルを使えるとさらに便利になるので、そのための環境を整えます。\ncabal install pandoc-citeproc とタイプし、pandoc-citeprocという環境を用意します。 念のためここでもwhich pandoc-citeproc でパスを確認しときましょう。\npandoc-citeprocの使い方を説明します。 いつも使っている.bibファイルの名前を references.bib とします。 中身はよくある文献リストで、次のような感じだとします。\n@book{stevens2003aircraft, title={Aircraft control and simulation}, author={Stevens, Brian L and Lewis, Frank L}, year={2003}, publisher={John Wiley \\\u0026amp; Sons} } これを.","title":"Markdownを使って論文っぽい文章を書く"},{"content":"LQG/LTR (Linear Quadratic Gaussian / Loop Transfer Recovery) とは LQGとは、カルマンフィルタを用いて推定した状態に対して、最適レギュレータを用いて状態フィードバックをおこなう、よく知られた制御法です。 LQGが時間領域での制御器設計であるのに対して、周波数領域での設計も考慮するのが、LQG/LTRです。 今回はStein G and Micheal A. The LQG/LTR procedure for multivariable feedback control designを参考にしました。\n問題設定 今、制御対象が伝達関数行列$G(s)$としてモデリングされているとします。 ここで、制御対象は非最小位相系であり、同数の入出力をもつとします。\n我々の目標は制御対象の出力$y$と参照入力$r$との偏差$e:=r-y$を受け取り、制御入力$u$を生成する制御器$K(s)$を実装することです。 ここで、制御器$K(s)$は以下の要求を満たすことを求められます。\n安定化：$G(s)$を安定化する（有界な外乱$d$、参照入力$r$に対して、$y$が有界となる） 良い制御性能：$e$をできるだけ小さくする ロバスト安定化：$G_A(s)$を安定化する（後述） 1だけを達成するための方法はたくさんあるので、本記事では触れません。\n2を達成するためには、外乱$d$や参照入力$r$が大きな値を持つ周波数領域で、感度関数 $$ S(s) = (I+G(s)K(s))^{-1} $$ を小さくすることが求められます。 ここでいう\u0026quot;小さい\u0026quot;とは、伝達関数の最大特異値$\\sigma_{max}(S(j\\omega))$が小さいという意味です。\n3について説明します。 一般に、制御対象を完全にモデリングするのは不可能であり、何らかの不確かさを含むと考えるのが自然です。 これは例えば、真のモデルを$G_A(s)$とすると $$ G_A(s) = (I+L(s))G(s) $$ と表すことができます。 ここで、$L(s)$は乗法的不確かさを表す伝達関数行列であり、既知の$m(\\omega)$と任意の$\\omega$に対して $$ \\sigma_{max}(L(j\\omega)) \u0026lt; m(\\omega) $$ なる関係が成り立つとします。 ここで、簡単な計算から、相補感度関数 $$ T(s) = G(s)K(s)(I+G(s)K(s))^{-1} $$ が任意の$\\omega$に対して $$ \\sigma_{max}(T(j\\omega)) \\le \\frac{1}{m(\\omega)} $$ を満たすことが、$G_A(s)$の安定性の必要十分条件として導出できます。\nさて、よく知られているように $$ S(s)+T(s)=I $$ が成り立つことから、同じ周波数領域で$S(s)$と$T(s)$を同時に小さくすることはできません。 しかしながら、一般に外乱抑制は高い周波数領域での話であり、ロバスト安定化は低い周波数領域の話であることが多いです。 そのため、$K(s)$を適切に設計することで、トレードオフを考慮しながら所望の$S(s), T(s)$を設計できれば嬉しいわけです。\n$H^2$最適制御 感度関数$S(s)$と相補感度関数$T(s)$を小さくするための評価関数 $$ J = \\int_0^\\infty Tr(MM^T)d\\omega $$ を考えます。ここで、$M$は重み$W$を用いて $$ M(s) = [S(s)W(s) \\quad T(s)] $$ と定義されています。 $J$を最小化する$K(s)$を設計する問題を、$H^2$最適制御問題といいます。\nこれから、よく知られているLQG制御が$H^2$最適制御問題に対する一つの解を与えることを示します。\nLQG制御 LQGは時間領域で設計される制御法なので、制御対象として $$ \\dot x = Ax(t) + Bu(t) + L\\xi(t), \\quad \\ y(t) = Cx(t) + \\mu I\\eta(t), \\quad \\ z(t) = Hx(t) \\tag{9} $$ を考えます。$x$は状態、$u$は入力、$y$は出力です。 $z$は補助的な信号です。 $\\xi, \\eta$はそれぞれ白色ガウス信号です。 上述の伝達関数との対応を述べると $$ G(s) = C\\Phi(s)B, \\ \\Phi(s) = (sI-A)^{-1} $$ という関係が成り立ちます。\nLQG制御問題では、評価関数 $$ J_{LQG} = E\\left\\{ \\lim_{T\\rightarrow\\infty} \\frac{1}{T}\\int_0^T z^Tz+\\rho^2u^Tu \\ dt \\right\\} \\tag{10} $$ を最小化する$K(t)$を設計することを考えます。\nここで、標準的なLQG制御問題と違うところは、制御対象の$L, \\mu, H$及び評価関数の$\\rho$は事前に与えられたものではなく、自由パラメータであるところです。 これらはLQG制御問題が$H^2$最適制御問題と等価であることを示すために用いられます。\nLQG制御器と$H^2$最適制御問題の関わり (9)を周波数領域で表すと\n$$ \\begin{bmatrix} y \\newline z \\end{bmatrix} = \\begin{bmatrix} G \u0026amp; C\\Phi L \u0026amp; I \\newline H\\Phi B \u0026amp; H\\Phi L \u0026amp;0 \\end{bmatrix} \\begin{bmatrix} u \\newline \\xi \\newline \\eta \\end{bmatrix} $$\nとなります。出力フィードバック$u=-K(s)y$を考えると $$ \\begin{bmatrix} z \\newline u \\end{bmatrix} = P(s) \\begin{bmatrix} \\xi \\newline \\eta \\end{bmatrix} \\tag{12} $$ と書き改められます。ここで$P$は $$ P(s) = \\begin{bmatrix} H\\Phi L - H\\phi BK(I-GK)^{-1}C\\Phi L \u0026amp; - \\mu H\\Phi BK(I-GK)^{-1}\\newline -\\rho K(I-GK)^{-1}C\\Phi L \u0026amp; \\mu\\rho K(I-GK)^{-1} \\end{bmatrix} $$ と定義されています。(10), (12)とパーセバルの定理を用いると $$ J_{LQG} = \\frac{1}{\\pi} \\int_0^\\infty Tr(PP^T)d\\omega \\tag{13} $$ となります。\nここで、自由パラメータ$L, \\mu, H$を $$ \\frac{C\\Phi L}{\\mu} = W(s), \\ H=C \\tag{14} $$ となるように選び、$\\rho\\rightarrow 0$とすると $$ P(s) \\rightarrow \\mu \\begin{bmatrix} (I+GK)^{-1}W \u0026amp; GK(I+GK)^{-1}\\newline 0 \u0026amp; 0 \\end{bmatrix} $$ が成り立ちます。 これを(13)に代入して(10)と比較すれば、$J_{LQG}=J$が成り立つことが示せます。\nさて、こうしてLQG制御問題が$H^2$最適制御問題と等価であることが導けました。 すなわち、LQG制御問題の解$\\arg_K J_{LQG}$が$H^2$最適制御問題の解$\\arg_K J$でもあるということです。 ただしこれが成り立つのは、$\\rho\\rightarrow 0$としたときなので、最適レギュレータのゲインが大きくなり、大きな入力を生成してしまうことには注意が必要です。\nまた、別の観点から、自由パラメータ$H,\\rho,L$を $$ \\frac{H\\Phi B}{\\rho} = W(s), \\ L=B $$ となるように選び、$\\mu\\rightarrow 0$とすると $$ P(s) \\rightarrow \\rho \\begin{bmatrix} W(I+GK)^{-1} \u0026amp; 0\\newline GK(I+GK)^{-1} \u0026amp; 0 \\end{bmatrix} $$ が成り立ちます。 こちらの場合、$\\mu\\rightarrow 0$としてしまっているので、カルマンフィルタのゲインが小さくなり状態推定の収束が悪くなります。\n2つの観点を紹介しましたが、以後は前者のみに焦点を絞ってより詳しく考察していきます。\n制御器の性質について LQG制御問題の解は、カルマンフィルタと最適レギュレータを用いることで与えられることが知られています。 すなわち $$ K_{LQG}(s) = K_C (sI-A-BK_C -K_f C)^{-1} K_f $$ として与えられます。 ここで、$K_C,K_f$はそれぞれ最適レギュレータのゲイン、カルマンフィルタゲインです。\n設計手順として、重み$W(s)$を設計した後、(14)を用いて$L,\\mu$を決め、カルマンフィルタを実装し、つぎに十分小さな$\\rho$を用いて最適レギュレータを実装します。 ここで、$\\rho$が小さければ小さいほど$H^2$最適性が保証されますが、その分制御器からの入力も大きくなることに注意が必要です。\nここで、$\\rho\\rightarrow 0$としたとき $$ G(s)K_{LQG}(s) \\rightarrow C\\Phi(s)K_f $$ が成り立つことが計算できます。証明はここに載ってます。 ここから例えば以下の性質を導くことができます。\n任意の$\\omega$に対して、$\\sigma_{min}(W(j\\omega))\u0026gt;1$が成り立つならば $$ \\sigma_i((I+C\\Phi(j\\omega)K_f)^{-1}) \\approx \\frac{1}{\\sigma_i(W(j\\omega))}, $$ $$ \\sigma_i(C\\Phi(j\\omega)K_f(I+C\\Phi(j\\omega)K_f)^{-1}) \\approx 1, $$ $$ \\sigma_i (C\\Phi(j\\omega) K_f) \\approx \\sigma_i(W(j\\omega)) $$ が成り立つ（$\\sigma_i$はそれぞれの特異値）。 第一式は、重み$W(s)$の設計により、カルマンフィルタの感度関数を調節できることを意味します。\n$\\omega\\rightarrow\\infty$のとき $$ \\sigma_i((I+C\\Phi(j\\omega)K_f)^{-1}) \\approx 1, $$ $$ \\sigma_i(C\\Phi(j\\omega)K_f(I+C\\Phi(j\\omega)K_f)^{-1}) \\approx \\frac{\\sigma_i(CK_f)}{w}, $$ $$ \\sigma_{i} (C \\Phi(j\\omega) K_f) \\approx \\frac{\\sigma_{i} (C K_f)}{w} $$ が成り立つ。 第二式は高周波領域で相補感度関数が小さくなることを意味します。\n任意の$\\omega$に対して $$ \\sigma_i((I+C\\Phi(j\\omega)K_f)^{-1}) \\le 1, $$ $$ \\sigma_i(C\\Phi(j\\omega)K_f(I+C\\Phi(j\\omega)K_f)^{-1}) \\le 2 $$ が成り立つ。 第一式は閉ループ系が重みの設計にかかわらず、外乱を増幅することはないことを示しています。\nその他の式の解釈については、本論文に書かれていますが、正直自分ではよくわかりませんでした。\nまとめ 状態空間モデルを扱う現代制御理論は、周波数領域での制御器設計において、古典制御理論に劣ると言われていましたが、LQG/LTRではこの点をある程度克服できています。\nここまでが70年代の話になりますが、さらに80年代になるとZamesさんが$H^\\infty$制御理論を確立し、より体系化されていったようです。\n","permalink":"https://inody.github.io/posts/lqg-ltr/","summary":"LQG/LTR (Linear Quadratic Gaussian / Loop Transfer Recovery) とは LQGとは、カルマンフィルタを用いて推定した状態に対して、最適レギュレータを用いて状態フィードバックをおこなう、よく知られた制御法です。 LQGが時間領域での制御器設計であるのに対して、周波数領域での設計も考慮するのが、LQG/LTRです。 今回はStein G and Micheal A. The LQG/LTR procedure for multivariable feedback control designを参考にしました。\n問題設定 今、制御対象が伝達関数行列$G(s)$としてモデリングされているとします。 ここで、制御対象は非最小位相系であり、同数の入出力をもつとします。\n我々の目標は制御対象の出力$y$と参照入力$r$との偏差$e:=r-y$を受け取り、制御入力$u$を生成する制御器$K(s)$を実装することです。 ここで、制御器$K(s)$は以下の要求を満たすことを求められます。\n安定化：$G(s)$を安定化する（有界な外乱$d$、参照入力$r$に対して、$y$が有界となる） 良い制御性能：$e$をできるだけ小さくする ロバスト安定化：$G_A(s)$を安定化する（後述） 1だけを達成するための方法はたくさんあるので、本記事では触れません。\n2を達成するためには、外乱$d$や参照入力$r$が大きな値を持つ周波数領域で、感度関数 $$ S(s) = (I+G(s)K(s))^{-1} $$ を小さくすることが求められます。 ここでいう\u0026quot;小さい\u0026quot;とは、伝達関数の最大特異値$\\sigma_{max}(S(j\\omega))$が小さいという意味です。\n3について説明します。 一般に、制御対象を完全にモデリングするのは不可能であり、何らかの不確かさを含むと考えるのが自然です。 これは例えば、真のモデルを$G_A(s)$とすると $$ G_A(s) = (I+L(s))G(s) $$ と表すことができます。 ここで、$L(s)$は乗法的不確かさを表す伝達関数行列であり、既知の$m(\\omega)$と任意の$\\omega$に対して $$ \\sigma_{max}(L(j\\omega)) \u0026lt; m(\\omega) $$ なる関係が成り立つとします。 ここで、簡単な計算から、相補感度関数 $$ T(s) = G(s)K(s)(I+G(s)K(s))^{-1} $$ が任意の$\\omega$に対して $$ \\sigma_{max}(T(j\\omega)) \\le \\frac{1}{m(\\omega)} $$ を満たすことが、$G_A(s)$の安定性の必要十分条件として導出できます。","title":"LQG/LTR制御を学んだ"},{"content":"得られたもの ボストンキャリアフォーラム（以下BCF）に参加してきました。 自分は17年度卒なので、就活には少し早いのですが、今年は経団連の指示で採用活動が早まるのと、帰ってから就活に時間を奪われるのが嫌で、あらかじめ選考を進められたらという思いもあっての参加です。\n結論から言うと、やはり経団連のパワーのせいか「内定」とはっきりと言ってくれる会社はありませんでした。 しかしながら、ESを提出したのはおよそ10社のうち、4社から「合格」とメールで通知後、内定者の方々が参加するディナーへのお誘いをいただくことができました。 中には「いつまでなら返事をしてくれるか」とオワハラっぽいことをしてきた企業もありました。 今振り返ると、調子のいい言葉や美味しいご飯を使って、学生を確保しておきたい企業の意図を感じないでもないのですが、そのあたりは性善説で解釈したいと思います。\nまた、およそ1か月前から少しずつ準備をする中で、基本的な自己分析や業界研究を大分進めることができました。 おかげで帰国後の就活がスムーズに進みそうなのは、嬉しい副作用です。\n雑感 実は今回が初のアメリカ訪問でした。 初めてヨーロッパに来た時は、町並みなど日本と全く違うことに衝撃を受けたものですが、今回あまり驚きがなかったのは、旅に慣れてきてしまったせいかもしれません。 ボストンは古い都市だと聞きますが、欧州の都市と比べると、むしろ日本の近代的な町並みに近いものを感じました。\nまた、BCF中に主にアメリカの大学で勉強している人たちと出会う機会があり、印象に残りました。 高校までインターナショナルスクールに通った後、正規留学してきた方や、僕と同じ制御系の研究をしている方で、修士課程を飛び級して博士課程に在籍している方など、日本にいたらまず出会えないような人たちとお話しすることができました。 すぐに人の影響を受ける僕は、どうして海外の大学に進学しなかったんだろうと少し後悔してしまいました。\nさらに、空いた日には、MITやハーバード大学、ボストン美術館などを訪れることができ、全体として満足できる休暇になりました。\n来年参加する方にアドバイス 奨学金の申請について 競争率は高そうです。 早い者勝ちなところがあるそうなので、申請開始日にちゃっちゃとしちゃいましょう。 また、以前別のキャリアフォーラムで受給している人には、支給されないようになっているそうなので、アカウントを作り直すなどの対策を打つといいかもしれません。 僕は申請が遅れたうえ、前回のロンドンキャリアフォーラムで受給していたのもあり、当然今回は受給できませんでした。\nホテルについて ネットで検索すると、ホテルは高いので早めに予約と書いてあるのですが、Airbnbなどを用いれば直前でも一泊4000円弱で予約できました。 予算を抑えたい方にはオススメです。\n","permalink":"https://inody.github.io/posts/boston/","summary":"得られたもの ボストンキャリアフォーラム（以下BCF）に参加してきました。 自分は17年度卒なので、就活には少し早いのですが、今年は経団連の指示で採用活動が早まるのと、帰ってから就活に時間を奪われるのが嫌で、あらかじめ選考を進められたらという思いもあっての参加です。\n結論から言うと、やはり経団連のパワーのせいか「内定」とはっきりと言ってくれる会社はありませんでした。 しかしながら、ESを提出したのはおよそ10社のうち、4社から「合格」とメールで通知後、内定者の方々が参加するディナーへのお誘いをいただくことができました。 中には「いつまでなら返事をしてくれるか」とオワハラっぽいことをしてきた企業もありました。 今振り返ると、調子のいい言葉や美味しいご飯を使って、学生を確保しておきたい企業の意図を感じないでもないのですが、そのあたりは性善説で解釈したいと思います。\nまた、およそ1か月前から少しずつ準備をする中で、基本的な自己分析や業界研究を大分進めることができました。 おかげで帰国後の就活がスムーズに進みそうなのは、嬉しい副作用です。\n雑感 実は今回が初のアメリカ訪問でした。 初めてヨーロッパに来た時は、町並みなど日本と全く違うことに衝撃を受けたものですが、今回あまり驚きがなかったのは、旅に慣れてきてしまったせいかもしれません。 ボストンは古い都市だと聞きますが、欧州の都市と比べると、むしろ日本の近代的な町並みに近いものを感じました。\nまた、BCF中に主にアメリカの大学で勉強している人たちと出会う機会があり、印象に残りました。 高校までインターナショナルスクールに通った後、正規留学してきた方や、僕と同じ制御系の研究をしている方で、修士課程を飛び級して博士課程に在籍している方など、日本にいたらまず出会えないような人たちとお話しすることができました。 すぐに人の影響を受ける僕は、どうして海外の大学に進学しなかったんだろうと少し後悔してしまいました。\nさらに、空いた日には、MITやハーバード大学、ボストン美術館などを訪れることができ、全体として満足できる休暇になりました。\n来年参加する方にアドバイス 奨学金の申請について 競争率は高そうです。 早い者勝ちなところがあるそうなので、申請開始日にちゃっちゃとしちゃいましょう。 また、以前別のキャリアフォーラムで受給している人には、支給されないようになっているそうなので、アカウントを作り直すなどの対策を打つといいかもしれません。 僕は申請が遅れたうえ、前回のロンドンキャリアフォーラムで受給していたのもあり、当然今回は受給できませんでした。\nホテルについて ネットで検索すると、ホテルは高いので早めに予約と書いてあるのですが、Airbnbなどを用いれば直前でも一泊4000円弱で予約できました。 予算を抑えたい方にはオススメです。","title":"ボストンキャリアフォーラムに参加してきました"},{"content":"概要 前回はいわゆるフィードフォワードの最適制御について考えた。 すなわち、ある初期時刻$t_0$と初期状態$x(t_0)$が一つ与えられたときに、終端時刻$t_f$までに加える最適入力$u(t)$を求めようとした。 そして、最適な$u(t)$を求めるためには、オイラー・ラグランジュ方程式という微分方程式を解かなくてはならないことが示された。 このアプローチでは、初期状態$x(t_0)$が少しでも変化すると、オイラー・ラグランジュ方程式を新たに解き直す必要があり、とても時間が掛かる。\nそこでここからは、フィードバックの最適制御について考える。 すなわち、任意の時刻$t$と状態$x(t)$が与えられたときに、終端時刻までに加える最適制御$u(x,t)$を求めたいのである。\n問題 連続時間の非線形ダイナミクス $$\\dot x = f(x,u,t)$$ にしたがうシステムに対して、状態フィードバック$u=u(x,t)$を設計することで、評価関数 $$J = \\phi(x(t_f),t_f) + \\int_{t}^{t_f}L(x(\\tau),u(\\tau),t)d\\tau$$ を最小化したい。 ここで初期値$x,t$は任意であるとする。\n必要条件 $J$を最小化する$u$が満たすべき方程式としてハミルトン・ヤコビ・ベルマン方程式 (HJB equation : Hamilton-Jacobi-Belman equation)が知られている。 これはハミルトニアン $$ H(x,\\lambda,u,t):=L(x,u,t)+\\lambda^t_f f(x,u,t) $$ 及び値関数 $$ J^o(x,t) = \\min_u J $$ に対して $$ \\frac{\\partial J^o}{\\partial t} + \\min_u H\\left(x,\\frac{\\partial J^o}{\\partial x},u,t \\right) = 0 $$ として記述される。 この偏微分方程式の境界条件は $$ J^o(x(t_f),t_f) = \\phi(x(t_f),t_f) $$ である。\n導出 値関数$J^o$は、「時刻$t$と、その時点で与えられたシステムの状態$x$に対して、その時刻以降$t_f$までに最適な入力を加えることにより最小化されたときのコスト」を表す。 ベルマンの最適性の原理により微小時刻$\\Delta t$に対して $$ J^o(x(t),t) = \\min_u\\left\\{ J^o(x(t+\\Delta t), t+\\Delta t) + \\int_t^{t+\\Delta t} L(x(\\tau),u(\\tau),\\tau)d\\tau \\right\\} $$ が成り立つ。 この式が意味するところは、「時刻$t$から$t_f$までに最適な入力を求める」のと、「時刻$t+\\Delta t$から$t_f$までに最適な入力がすでに求まっているときに、時刻$t$から$t+\\Delta t$までの最適な入力を求める」のは一緒、ということ。 $J^o(x(t+\\Delta t),t+\\Delta t)$をテーラー展開すると $$ J^o(x(t+\\Delta t),t+\\Delta t) = J^o(x(t),t) + \\left\\{ \\frac{\\partial J^o}{\\partial x}f(x,u,t) + \\frac{\\partial J^o}{\\partial t} \\right\\}\\Delta t + O(\\Delta t^2) $$ これを代入すると $$ J^o(x(t),t) = \\min_u\\left\\{ J^o(x(t),t) + \\left\\{ \\frac{\\partial J^o}{\\partial x}f(x,u,t) + \\frac{\\partial J^o}{\\partial t} \\right\\}\\Delta t + \\int_t^{t+\\Delta t} L(x(\\tau),u(\\tau),\\tau)d\\tau + O(\\Delta t^2) \\right\\} $$ $J^o$及び$\\frac{\\partial J^o}{\\partial t}$は$u$に陽に依存しないため、括り出して$\\Delta t\\rightarrow 0$とすると $$ \\frac{\\partial J^o}{\\partial t} + \\min_u\\left\\{ L(x,u,t) + \\frac{\\partial J^o}{\\partial x}f(x,u,t) \\right\\} $$ が得られる。 残りはハミルトニアン及びラグランジュ乗数の定義を用いて終了。\n解法 HJB方程式の解析的な解法は知られておらず、良い数値解法についても研究が活発に行なわれている。\n","permalink":"https://inody.github.io/posts/optimal-control3/","summary":"概要 前回はいわゆるフィードフォワードの最適制御について考えた。 すなわち、ある初期時刻$t_0$と初期状態$x(t_0)$が一つ与えられたときに、終端時刻$t_f$までに加える最適入力$u(t)$を求めようとした。 そして、最適な$u(t)$を求めるためには、オイラー・ラグランジュ方程式という微分方程式を解かなくてはならないことが示された。 このアプローチでは、初期状態$x(t_0)$が少しでも変化すると、オイラー・ラグランジュ方程式を新たに解き直す必要があり、とても時間が掛かる。\nそこでここからは、フィードバックの最適制御について考える。 すなわち、任意の時刻$t$と状態$x(t)$が与えられたときに、終端時刻までに加える最適制御$u(x,t)$を求めたいのである。\n問題 連続時間の非線形ダイナミクス $$\\dot x = f(x,u,t)$$ にしたがうシステムに対して、状態フィードバック$u=u(x,t)$を設計することで、評価関数 $$J = \\phi(x(t_f),t_f) + \\int_{t}^{t_f}L(x(\\tau),u(\\tau),t)d\\tau$$ を最小化したい。 ここで初期値$x,t$は任意であるとする。\n必要条件 $J$を最小化する$u$が満たすべき方程式としてハミルトン・ヤコビ・ベルマン方程式 (HJB equation : Hamilton-Jacobi-Belman equation)が知られている。 これはハミルトニアン $$ H(x,\\lambda,u,t):=L(x,u,t)+\\lambda^t_f f(x,u,t) $$ 及び値関数 $$ J^o(x,t) = \\min_u J $$ に対して $$ \\frac{\\partial J^o}{\\partial t} + \\min_u H\\left(x,\\frac{\\partial J^o}{\\partial x},u,t \\right) = 0 $$ として記述される。 この偏微分方程式の境界条件は $$ J^o(x(t_f),t_f) = \\phi(x(t_f),t_f) $$ である。\n導出 値関数$J^o$は、「時刻$t$と、その時点で与えられたシステムの状態$x$に対して、その時刻以降$t_f$までに最適な入力を加えることにより最小化されたときのコスト」を表す。 ベルマンの最適性の原理により微小時刻$\\Delta t$に対して $$ J^o(x(t),t) = \\min_u\\left\\{ J^o(x(t+\\Delta t), t+\\Delta t) + \\int_t^{t+\\Delta t} L(x(\\tau),u(\\tau),\\tau)d\\tau \\right\\} $$ が成り立つ。 この式が意味するところは、「時刻$t$から$t_f$までに最適な入力を求める」のと、「時刻$t+\\Delta t$から$t_f$までに最適な入力がすでに求まっているときに、時刻$t$から$t+\\Delta t$までの最適な入力を求める」のは一緒、ということ。 $J^o(x(t+\\Delta t),t+\\Delta t)$をテーラー展開すると $$ J^o(x(t+\\Delta t),t+\\Delta t) = J^o(x(t),t) + \\left\\{ \\frac{\\partial J^o}{\\partial x}f(x,u,t) + \\frac{\\partial J^o}{\\partial t} \\right\\}\\Delta t + O(\\Delta t^2) $$ これを代入すると $$ J^o(x(t),t) = \\min_u\\left\\{ J^o(x(t),t) + \\left\\{ \\frac{\\partial J^o}{\\partial x}f(x,u,t) + \\frac{\\partial J^o}{\\partial t} \\right\\}\\Delta t + \\int_t^{t+\\Delta t} L(x(\\tau),u(\\tau),\\tau)d\\tau + O(\\Delta t^2) \\right\\} $$ $J^o$及び$\\frac{\\partial J^o}{\\partial t}$は$u$に陽に依存しないため、括り出して$\\Delta t\\rightarrow 0$とすると $$ \\frac{\\partial J^o}{\\partial t} + \\min_u\\left\\{ L(x,u,t) + \\frac{\\partial J^o}{\\partial x}f(x,u,t) \\right\\} $$ が得られる。 残りはハミルトニアン及びラグランジュ乗数の定義を用いて終了。","title":"最適制御3"},{"content":"概要 今回からダイナミクスを持つシステムへの最適制御を考える。 考え方は前回の場合とそれほど変わらず、ダイナミクスを制約条件として考えると、必要条件として、二点の境界条件をもつ微分方程式が導出される。 今回はその導出と、問題を解くための数値計算法を紹介する。 教科書は引き続きE. Brysdn, Jr. Yu-Chi Ho, \u0026ldquo;Applied Optimal Control\u0026rdquo;, CRC Press, 1975を用いる。\n離散時間システムの場合 問題 非線形の差分方程式で表されるつぎのシステムを考える。 $$ x(i+1) = f(x(i),u(i)), \\quad x(0):\\text{given}, \\quad i = 0,\\cdots,N-1. \\tag{2.2.1} $$ ただし、$x(i)\\in R^n$は状態ベクトル、$u(i)\\in R^m$は入力ベクトルである。\n以下の評価関数 $$J = \\phi(x(N)) + \\sum_{i=0}^{N-1}L(x(i),u(i))$$ を最小化する$u$を求めたい。\n必要条件の導出 $(2.2.1)$は等式制約条件として捉えられる。 そのため、ラグランジュ乗数$\\lambda(i)$を用いて $$\\bar J := \\phi(x(N)) + \\sum_{i=0}^{N-1}\\left[ L(x(i),u(i)) + \\lambda^T(i+1){f(x(i),u(i)) - x(i+1)} \\right] \\tag{2.2.3}$$ を考える。 ハミルトニアン $$H^i := L(x(i),u(i)) + \\lambda^T(i+1)f(x(i),u(i))$$ を定義すると、$(2.2.3)$は $$\\bar J = \\phi(x(N)) -\\lambda^T(N)x(N) + \\sum_{i=1}^{N-1}\\left[ H^i - \\lambda^T(i)x(i) \\right] +H^0$$ と書き換えられる。\n$u$の微小変化が$\\bar J$に与える変化を考えると $$ d\\bar J = \\left[ \\frac{\\partial \\phi}{\\partial x(N)} - \\lambda^T(N) \\right]dx(N) + \\sum_{i=1}^{N-1} \\left\\{ \\left[ \\frac{\\partial H^i}{\\partial x(i)} - \\lambda^T(i) \\right]dx(i) + \\frac{\\partial H^i}{\\partial u(i)}du(i) \\right\\} + \\frac{\\partial H^0}{\\partial x(0)}dx(0) + \\frac{\\partial H^0}{\\partial u(0)}du(0) \\tag{2.2.6} $$ となる。\n与えられた入力$u$が$\\bar J$を最小化するためには、少なくとも$u$によって駆動する$x$の微小変化に対して、$\\bar J$が不変である必要があるので、 $$\\lambda^T(i)-\\frac{\\partial H^i}{\\partial x(i)} =0$$ すなわち $$ \\lambda^T(i) = \\frac{\\partial L}{\\partial x(i)} + \\lambda^T(i+1)\\frac{\\partial f}{\\partial x(i)}, \\quad i = 0,\\cdots,N-1 \\tag{2.2.12} $$ $$ \\lambda^T(N) = \\frac{\\partial \\phi}{\\partial x(N)} $$ が成り立つ必要がある。\nこの条件を$(2.2.6)$に適用し、さらに$x(0)$は固定されているとすると $$d\\bar J = \\sum_{i=0}^{N-1} \\frac{\\partial H^i}{\\partial u(i)}du(i)$$ が得られる。 さらに、$\\bar J$が極値であるためには、$d\\bar J$が任意の$du$に対して$0$である必要があるため、 $$\\frac{\\partial H^i}{\\partial u(i)}=0 \\quad i = 0,\\cdots,N-1$$ すなわち $$ \\frac{\\partial L}{\\partial u(i)} + \\lambda^T(i+1)\\frac{\\partial f}{\\partial u(i)} = 0 \\quad i = 0,\\cdots,N-1 \\tag{2.2.13} $$ が成り立つ必要がある。\n以上をまとめると、我々が解かなくてはいけない差分方程式は$(2.2.1),(2.2.12),(2.2.13)$ となる。これらの方程式をオイラー・ラグランジュ方程式 (Euler-Lagrange equation)と呼ばれ、二つの境界条件 $$ x(0):\\text{given}, \\quad \\lambda^T(N) = \\frac{\\partial \\phi}{\\partial x(N)} $$ をもつので、二点境界値問題というクラスの微分方程式にあたる。\n与えられた$u$に対して$J$が最小値であるためには、 $$dJ = \\frac{1}{2}\\frac{\\partial^2 \\phi}{\\partial x(N)\\partial x(N)}dx(N) + \\frac{1}{2}\\sum_{i=0}^{N-1}[dx^T(i),du^T(i)] \\begin{bmatrix} \\frac{\\partial^2 H^i}{\\partial x(i)\\partial x(i)} \u0026amp; \\frac{\\partial^2 H^i}{\\partial x(i)\\partial u(i)} \\newline \\frac{\\partial^2 H^i}{\\partial u(i)\\partial x(i)} \u0026amp; \\frac{\\partial^2 H^i}{\\partial u(i)\\partial u(i)} \\end{bmatrix} \\begin{bmatrix}dx(i) \\newline du(i) \\end{bmatrix} \\ge 0$$ もまた必要である。 ここで$dx$は $$dx(i+1) = \\frac{\\partial f}{\\partial x(i)}dx(i) + \\frac{\\partial f}{\\partial u(i)}du(i),\\quad dx(0) = 0$$ として求める。\n連続時間システムの場合 問題 離散時間システムと考え方は一緒。連続時間の非線形ダイナミクス $$ \\dot x = f(x(t),u(t),t), \\quad x(t_0):\\text{given}, \\quad t_0 \\le t \\le t_f \\tag{2.3.1} $$ にしたがうシステムに対して、評価関数 $$J = \\phi(x(t_f),t_f) + \\int_{t_0}^{t_f}L(x(t),u(t),t)dt$$ を最小化する$u$を求めたい。\n必要条件の導出 離散時間システムの場合は微小変化を考えたが、ここでは変分を考える (変分については「汎関数の微分」というように考えて差し支えない) 。\nそれ以外は離散時間の場合と変わらず、$u$が停留点となるための必要条件は$(2.3.1)$及び $$\\dot\\lambda = -\\left( \\frac{\\partial f}{\\partial x} \\right)^T\\lambda -\\left( \\frac{\\partial L}{\\partial x} \\right)^T$$ $$\\left( \\frac{\\partial f}{\\partial u} \\right)^T\\lambda + \\left( \\frac{\\partial L}{\\partial u} \\right)^T = 0$$ である。これらの方程式も、オイラー・ラグランジュ方程式と呼ばれ、境界条件 $$ x(t_0):\\text{given}, \\quad \\lambda^T(t_f) = \\left[\\frac{\\partial \\phi}{\\partial x}\\right]_{t=t_f} $$ を持つ。\nまた、$u$が停留点であるためには\n$$ \\delta J = \\frac{1}{2}\\left[ \\delta x^T\\frac{\\partial^2 \\phi}{\\partial x^2}\\delta x \\right]_{t=t_f} + \\frac{1}{2} \\int_{t_0}^{t_f}[\\delta x^T, \\delta u^T] \\begin{bmatrix} \\frac{\\partial^2 H}{\\partial x^2} \u0026amp; \\frac{\\partial^2 H}{\\partial x\\partial u} \\newline \\frac{\\partial^2 H}{\\partial u\\partial x} \u0026amp; \\frac{\\partial^2 H}{\\partial u^2} \\end{bmatrix} \\begin{bmatrix}\\delta x \\newline \\delta u \\end{bmatrix} dt \\ge 0 $$\nもまた必要である。 ここで$\\delta x$は $$ \\frac{d}{dt}(\\delta x) = \\frac{\\partial f}{\\partial x}\\delta x + \\frac{\\partial f}{\\partial u}\\delta u,\\quad \\delta x(t_0) = 0 $$ として求める。\n解き方 連続時間の場合を考える。 前のセクションの結果から、初期値$x(t_0)$の摂動$\\delta x(t_0)$に対して、 $$ \\delta \\dot x = f_x\\delta x + f_u\\delta u \\tag{6.1.10}$$ $$ \\delta \\dot \\lambda = -H_{xx}\\delta x -f_x^T\\delta \\lambda - H_{xu}\\delta u \\tag{6.1.11} $$ $$ 0 = H_{ux}\\delta x -f_u^T\\delta \\lambda - H_{uu}\\delta u \\tag{6.1.12} $$ $$ \\delta x(t_0) = 0,\\quad \\delta \\lambda(t_f) = \\left[\\phi_{xx}\\delta x\\right]_{t=t_f} $$ が成り立つ。 まず$(6.1.12)$を$\\delta u$について解くと $$ \\delta u(t) = -H_{uu}^{-1}(H_{ux}\\delta x + f_u^T\\delta\\lambda) \\tag{6.1.20} $$ を得る。 これを$(6.1.10),(6.1.11)$に代入して整理すると $$ \\delta \\dot x = A(t)\\delta x - B(t)\\delta \\lambda \\tag{6.1.21} $$ $$ \\delta \\dot \\lambda = -C(t)\\delta x - A^T(t)\\delta \\lambda $$ という二本の連立微分方程式と $$ \\delta x(t_0)=0,\\quad \\delta \\lambda(t_f) = \\left[\\phi_{xx}\\delta x\\right]_{t=t_f} $$ という二つの境界条件を得る。ここで $$ A(t) = f_x - f_uH_{uu}^{-1}H_{ux},\\quad B(t) = f_uH_{uu}^{-1}f_u^T,\\quad C(t) = H_{xx} - H_{xu}H_{uu}^{-1}H_{ux} $$ とおいた。 さらに、$\\delta\\lambda(t) = S(t)\\delta x(t)$なる関係を仮定すると$(6.1.21)$は $$ \\delta\\dot x = (A-BS)\\delta x \\tag{6.2.8} $$ として書き換えられ、さらに $$ \\dot S = -SA-A^TS+SBS-C,\\quad S(t_f) = \\phi_{xx}(t_f) $$ という$S$についての行列微分方程式を得る。 この微分方程式は、$t=t_f$から逆時間に解くことができ、$S$が求まったら、初期条件$x(t_0)$と$(6.2.8)$を用いて$\\delta x$を得ることができる。 $\\delta x$が得られたら、$\\delta\\lambda(t) = S(t)\\delta x(t)$の関係を用いて$\\delta \\lambda$を得ることができ、最後に$(6.1.20)$を用いて$\\delta u$が得られる。 このように、逆方向→順方向、というふうに解いていくやり方を、backward sweep methodという。\n","permalink":"https://inody.github.io/posts/optimal-control2/","summary":"概要 今回からダイナミクスを持つシステムへの最適制御を考える。 考え方は前回の場合とそれほど変わらず、ダイナミクスを制約条件として考えると、必要条件として、二点の境界条件をもつ微分方程式が導出される。 今回はその導出と、問題を解くための数値計算法を紹介する。 教科書は引き続きE. Brysdn, Jr. Yu-Chi Ho, \u0026ldquo;Applied Optimal Control\u0026rdquo;, CRC Press, 1975を用いる。\n離散時間システムの場合 問題 非線形の差分方程式で表されるつぎのシステムを考える。 $$ x(i+1) = f(x(i),u(i)), \\quad x(0):\\text{given}, \\quad i = 0,\\cdots,N-1. \\tag{2.2.1} $$ ただし、$x(i)\\in R^n$は状態ベクトル、$u(i)\\in R^m$は入力ベクトルである。\n以下の評価関数 $$J = \\phi(x(N)) + \\sum_{i=0}^{N-1}L(x(i),u(i))$$ を最小化する$u$を求めたい。\n必要条件の導出 $(2.2.1)$は等式制約条件として捉えられる。 そのため、ラグランジュ乗数$\\lambda(i)$を用いて $$\\bar J := \\phi(x(N)) + \\sum_{i=0}^{N-1}\\left[ L(x(i),u(i)) + \\lambda^T(i+1){f(x(i),u(i)) - x(i+1)} \\right] \\tag{2.2.3}$$ を考える。 ハミルトニアン $$H^i := L(x(i),u(i)) + \\lambda^T(i+1)f(x(i),u(i))$$ を定義すると、$(2.2.3)$は $$\\bar J = \\phi(x(N)) -\\lambda^T(N)x(N) + \\sum_{i=1}^{N-1}\\left[ H^i - \\lambda^T(i)x(i) \\right] +H^0$$ と書き換えられる。","title":"最適制御2"},{"content":"kivyとは PythonのNUI(Natural User Interface)でのマルチタッチアプリケーション開発のためのオープンソースライブラリ。 一つのソースコードからAndroid、iOS、Linux、MacOSX、Windowsへと出力できるうえ、ライセンスフリーで使用できる。\n今回はそんなkivyの本体と、OSX及びiOSへのパッケージング環境の導入に挑戦したが、情報が少なく結構苦労したので、メモしておく。\n自分の環境 MacOSX 10.11 Yosemite Xcode 7.1 homebrew, pip導入済み kivyのインストール この辺を参考にしてインストールした。\nまず、kivyの導入に必要なcythonとpygameをインストールする。\n*11月3日23:25追記：下記のkivy-iosと最新のcythonの相性が悪いため、バージョン0.21をインストールする必要があることがわかった。\npip install cython==0.21 pip install pygame その後本体をインストールするのだが、最も好ましいと思われるpipを用いた方法はうまくいかず。 仕方ないので、brew caskを用いてインストール。\nbrew cask install kivy もしくはgitから直接\ngit clone http://github.com/kivy/kivy make でも良い。 上手くインストールされたか確かめるため、Hello Worldしてみよう。 適当なエディタでmain.pyを作成し\nimport kivy kivy.require('1.8.0') ## replace with your current kivy version ! from kivy.app import App from kivy.uix.label import Label class MyApp(App): def build(self): return Label(text='Hello world') if __name__ == '__main__': MyApp().run() と記述。 その後作業ディレクトリで\nkivy main.py すればウィンドウが立ち上がる。\nkivy-sdk-packagerのインストール 作成したアプリをOSXの.appファイルとしてパッケージングする。 詳細はここを参照。\nまず、適当なディレクトリにkivy-sdk-packager/osxをインストールする。\ngit clone https://github.com/kivy/kivy-sdk-packager cd kivy-sdk-packager/osx cp -a /Applications/Kivy.app ./Kivy.App 最後の行でKivy.appをコピーしているのだが、brew caskからkivyをインストールした場合、これを\ncp -a /opt/homebrew-cask/Caskroom/kivy/1.9.0-rev3/Kivy.app ./Kivy.app と変える。 つぎに、インストールしたパッケージャを使って、.appファイルを生成する。\n./package-app.sh path/to/your/app これで、うまく行けばパッケージング完了。立ち上げて遊べる。 また、\n./create-osx-dmg.sh YourApp.app でdmgファイルを作成することもできる。\nkivy-iosのインストール 作成したアプリをiOSのシミュレータで動かすまでが目標（結論から言うと未達成）。 詳細はここ参照。\nまずは必要環境である\nxcode-select --install を入力。次に本体をインストールする。公式には、\ngit clone git://github.com/kivy/kivy-ios すれば良いと書かれていたが、うまくいかず。 どうやらXcode7が原因っぽいので、調べたところ、ここにまさに今進行中のスレッドがあり、解決策が書かれていた。 2015年11月3日現在pull request中であるファイルを使う。\ngit clone https://github.com/jadeblaquiere/kivy-ios そのうちmergeされると思うので、この問題は一時的なものだと思われる。\nあとは公式に書かれている通り\n./toolchain.py build kivy し、作業を眺めること20分後、何やら怪しげなディレクトリ群が出現する (この時の注意として、sdl2をbrewからインストールしている環境ではうまくいかない) 。 その後\n./toolchain.py create Touchtracer ~/code/kivy/examples/demo/touchtracer すれば、.xcodeprojファイルへとコンパイルされる。\n問題点 作成されたファイルをxcodeで開けば、エラーなしでビルドできるのだが、シミュレータで動かしてみても、アプリの起動後すぐにホーム画面に戻ってしまう。 また、ビルド時に幾つかの警告が出るが、この辺りとの関連性が謎。 いかんせんXcode使い慣れてないのと、日本語の情報が少ないのとで、解決には時間がかかりそう。\n*11月3日23:25追記：上記の通り一応解決しました。\n","permalink":"https://inody.github.io/posts/kivy/","summary":"kivyとは PythonのNUI(Natural User Interface)でのマルチタッチアプリケーション開発のためのオープンソースライブラリ。 一つのソースコードからAndroid、iOS、Linux、MacOSX、Windowsへと出力できるうえ、ライセンスフリーで使用できる。\n今回はそんなkivyの本体と、OSX及びiOSへのパッケージング環境の導入に挑戦したが、情報が少なく結構苦労したので、メモしておく。\n自分の環境 MacOSX 10.11 Yosemite Xcode 7.1 homebrew, pip導入済み kivyのインストール この辺を参考にしてインストールした。\nまず、kivyの導入に必要なcythonとpygameをインストールする。\n*11月3日23:25追記：下記のkivy-iosと最新のcythonの相性が悪いため、バージョン0.21をインストールする必要があることがわかった。\npip install cython==0.21 pip install pygame その後本体をインストールするのだが、最も好ましいと思われるpipを用いた方法はうまくいかず。 仕方ないので、brew caskを用いてインストール。\nbrew cask install kivy もしくはgitから直接\ngit clone http://github.com/kivy/kivy make でも良い。 上手くインストールされたか確かめるため、Hello Worldしてみよう。 適当なエディタでmain.pyを作成し\nimport kivy kivy.require('1.8.0') ## replace with your current kivy version ! from kivy.app import App from kivy.uix.label import Label class MyApp(App): def build(self): return Label(text='Hello world') if __name__ == '__main__': MyApp().","title":"kivyを用いたマルチプラットフォームアプリの開発環境を整える"},{"content":"概要 非線形最適制御の勉強を始めた。 実は去年授業で単位は取得したのだけれど、ほとんど覚えていないも同然なので、はじめからやり直すことにする。 教科書はE. Brysdn, Jr. Yu-Chi Ho, \u0026ldquo;Applied Optimal Control\u0026rdquo;, CRC Press, 1975を用いた。 式番号は教科書に倣った。 今回はとりあえず、ダイナミクスなしの最適化問題について、ざっと復習する。\n制約なし最小化問題 問題 決定変数$u=[u_1 \\ \\cdots \\ u_m]^T\\in R^m$を決めることで、評価関数 $$L(u):R^m\\rightarrow R$$ を最小化したい。\n必要条件 $L$が$C^2$級の関数であるとき、$u$が最小値であるのための必要条件は $$\\frac{\\partial L}{\\partial u} = 0 \\tag{1.1.3}$$ 及び $$\\frac{\\partial^2 L}{\\partial u^2} \\succeq 0$$ が成り立つことである。 $(1.1.3)$を満たす$u$を停留点という。\n十分条件 $u$が局所最小であるための十分条件は$(1.1.3)$及び $$\\frac{\\partial^2 L}{\\partial u^2} \\succ 0$$ が成り立つことである。\n数値計算法 勾配法 (gradient decent) 、ニュートン法 (newton method) を始め、様々な数値計算法が用いられる。\n等式制約付き最小化問題 問題 決定変数$u\\in R^m$を決めることで等式制約 $$ f(x,u)=0 \\tag{1.2.2} $$ のもと、評価関数 $$L(x,u): R^n\\times R^m\\rightarrow R$$ を最小化したい。ここで$x=[x_1 \\ \\cdots \\ x_n]^T\\in R^n, \\ f=[f_1 \\ \\cdots \\ f_n]^T:R^n\\times R^m\\rightarrow R^n$とおいた。\n必要条件 ラグランジュ乗数$\\lambda=[\\lambda_1 \\ \\cdots \\ \\lambda_n]^T\\in R^n$を導入する。 ハミルトニアン $$H(x,u,\\lambda):=L(x,u)+\\lambda^Tf(x,u)$$ に対して、 $$\\frac{\\partial H}{\\partial x} = \\frac{\\partial H}{\\partial u} = \\frac{\\partial H}{\\partial \\lambda} = 0 \\tag{1.2.8 - 1.2.10}$$ が成り立つことが、$u$が停留点であることの必要条件であることが知られている。\nさらに計算を進めていくと\n$$ \\left( \\frac{\\partial^2 L}{\\partial u^2} \\right)_{f=0} = H_{uu} - H_{ux}f_x^{-1}f_u - f_u^T(f_x^T)^{-1}H_{xu} + f_u^T(f_x^T)^{-1}H_{xx}f_x^{-1}f_u \\succeq 0 \\tag{1.3.7} $$\nもまた必要条件であることが確かめられる。 ここで例えば$f_x=\\frac{\\partial f}{\\partial x}, \\ H_{xx}=\\frac{\\partial^2 H}{\\partial x^2}$などとおいた。\nまとめると、$u$が最小となるための必要条件は$(1.2.8 - 1.2.10)$及び$(1.3.7)$が成り立つことである。\n$(1.2.8-1.2.10)$の導出 任意に与えられた$u$を$du$だけ変化させたときの$H$の変化量$dH$を計算すると $$dH = \\frac{\\partial H}{\\partial x}dx + \\frac{\\partial H}{\\partial u}du$$ となる。 ここで、$u$が最小値であるためには、$(1.2.2)$を通じて得られる$x$の微小変化$dx$に対して、$dH$が不変であることが必要なので $$\\lambda^T=-\\frac{\\partial L}{\\partial x}\\left( \\frac{\\partial f}{\\partial x} \\right)^{-1}$$ と選ぶことにより、 $$\\frac{\\partial H}{\\partial x} = 0 \\tag{1.2.8}$$ 及び $$dH = \\frac{\\partial H}{\\partial u}du$$ を得る。 さらに、与えられた$u$が最小値であるためには、任意の変化$du$に対して$dH=0$が成り立つ必要があるので $$\\frac{\\partial H}{\\partial u} = 0 \\tag{1.2.10}$$ が必要条件となる。 こうして$(1.2.8-1.2.9)$が得られた ($(1.2.10)$は$(1.2.2)$そのものである) 。\n十分条件 $u$が局所最小であるための十分条件は$(1.2.8 - 1.2.10)$及び $$ \\left( \\frac{\\partial^2 L}{\\partial u^2} \\right)_{f=0} = H_{uu} - H_{ux}f_x^{-1}f_u - f_u^T(f_x^T)^{-1}H_{xu} + f_u^T(f_x^T)^{-1}H_{xx}f_x^{-1}f_u \\succ 0 $$ が成り立つことである。\n数値計算法 等式制約付き最小化問題を解析的に解くのは、一般には難しいので、数値計算が用いられる。 最も単純な方法として、つぎの勾配法 (gradient decent) がある。\n$u$の初期値を与える。 $f(x,u)=0$から$x$を求める。 $\\lambda^T=-\\frac{\\partial L}{\\partial x}\\left( \\frac{\\partial f}{\\partial x} \\right)^{-1}$より$\\lambda$を求める。 $\\frac{\\partial H}{\\partial u} = \\frac{\\partial L}{\\partial u} + \\lambda^T\\frac{\\partial f}{\\partial u}$より求める。 整数$K$に対して$\\Delta u = -K \\frac{\\partial H}{\\partial u}$を定め、$u \\leftarrow u+\\Delta u$と更新する。 1-5までを$\\Delta J = -K\\frac{\\partial H}{\\partial u}\\frac{\\partial H}{\\partial u}^T$が十分小さくなるまで繰り返す。 勾配法は収束が遅いため、しばしばつぎの二階の勾配法 (second order gradient decent) が用いられる。\n$x,u,\\lambda$の初期値として$x^0,u^0,\\lambda^0$を与える。 つぎの値を求める。 $$H_x^0 := H_x(x^0,u^0,\\lambda^0),\\ H_u^0 := H_u(x^0,u^0,\\lambda^0),\\ f^0:=f(x^0,u^0)$$ $$H_{xx}^0 := H_{xx}(x^0,u^0,\\lambda^0),\\ H_{xu}^0 := H_{xu}(x^0,u^0,\\lambda^0),\\ H_{ux}^0 := H_{ux}(x^0,u^0,\\lambda^0),\\ H_{uu}^0 := H_{uu}(x^0,u^0,\\lambda^0)$$ $$f_x^0:=f_x(x^0,u^0),\\ f_u^0:=f_u(x^0,u^0)$$ つぎの連立方程式を$dx,du,d\\lambda$について解く。 $$H_x^0 + H_{xx}^0dx + H_{xu}^0du + (f_x^0)^Td\\lambda = 0$$ $$H_u^0 + H_{ux}^0dx + H_{uu}^0du + (f_u^0)^Td\\lambda = 0$$ $$f^0 + f_x^0dx + f_u^0du = 0$$ $x^1=x^0+dx,\\ u^1=u^0+du,\\ \\lambda^1=\\lambda^0+d\\lambda$と更新していく。 不等式制約付き最小化問題 おまけとして、制約が不等式の場合の最小化問題と、その解についての必要条件を紹介。\n問題 決定変数$y:=[x^T \\ u^T]^T$を決めることで制約 $$f(y) = 0, \\ h(y) \\le 0$$ のもと、評価関数 $$L(y)$$ を最小化したい。\n必要条件 ハミルトニアン $$H(y,\\lambda,\\mu) := L(y) + \\lambda f(y) + \\mu h(y)$$ に対して、 $$\\frac{\\partial H}{\\partial y} = 0, \\ \\frac{\\partial H}{\\partial \\lambda} = 0, \\ \\frac{\\partial H}{\\partial \\mu} \\le 0, $$ $$\\mu \\left\\{ \\begin{array}{cc} \\ge 0 \u0026amp; h(y) = 0 \\newline = 0 \u0026amp; h(y) \u0026lt; 0 \\end{array} \\right. $$ が成り立つことが、$y$が最小値であるための必要条件であることが知られている。 この条件はKKT条件という名前で知られている。\n数値計算法 射影勾配法 (gradient projection method) 、ペナルティ関数法 (penalty function method) 、乗数法 (multiplier method) 、逐次二次計画法 (sequential quadratic programming method) 、内点法 (interior point method) などが知られている。\n","permalink":"https://inody.github.io/posts/optimal-control/","summary":"概要 非線形最適制御の勉強を始めた。 実は去年授業で単位は取得したのだけれど、ほとんど覚えていないも同然なので、はじめからやり直すことにする。 教科書はE. Brysdn, Jr. Yu-Chi Ho, \u0026ldquo;Applied Optimal Control\u0026rdquo;, CRC Press, 1975を用いた。 式番号は教科書に倣った。 今回はとりあえず、ダイナミクスなしの最適化問題について、ざっと復習する。\n制約なし最小化問題 問題 決定変数$u=[u_1 \\ \\cdots \\ u_m]^T\\in R^m$を決めることで、評価関数 $$L(u):R^m\\rightarrow R$$ を最小化したい。\n必要条件 $L$が$C^2$級の関数であるとき、$u$が最小値であるのための必要条件は $$\\frac{\\partial L}{\\partial u} = 0 \\tag{1.1.3}$$ 及び $$\\frac{\\partial^2 L}{\\partial u^2} \\succeq 0$$ が成り立つことである。 $(1.1.3)$を満たす$u$を停留点という。\n十分条件 $u$が局所最小であるための十分条件は$(1.1.3)$及び $$\\frac{\\partial^2 L}{\\partial u^2} \\succ 0$$ が成り立つことである。\n数値計算法 勾配法 (gradient decent) 、ニュートン法 (newton method) を始め、様々な数値計算法が用いられる。\n等式制約付き最小化問題 問題 決定変数$u\\in R^m$を決めることで等式制約 $$ f(x,u)=0 \\tag{1.2.2} $$ のもと、評価関数 $$L(x,u): R^n\\times R^m\\rightarrow R$$ を最小化したい。ここで$x=[x_1 \\ \\cdots \\ x_n]^T\\in R^n, \\ f=[f_1 \\ \\cdots \\ f_n]^T:R^n\\times R^m\\rightarrow R^n$とおいた。","title":"最適制御1"},{"content":"自分には昔から何事においても、与えられた目標に対して最小限の努力でアプローチしようとする悪い癖がある。\nこの癖は多分、中高の陸上部時代に、きつい練習の中で少しずつ形成されはじめ、いつの間にか凝固してしまったものなんだと思う。\n今まではそれでも誤魔化しながらなんとかやってきたのだけれど、今後大きなしっぺ返しを食らう予感もしていて、どうにか直したいと思っている。 そしてそのために「血反吐を吐くような努力をもってして、なお目標を達成できない」という経験は、失敗できる学生時代のうちに必要な経験だと感じていた（自分で書いていてマゾいと思う）。\nけれども、そういう努力を要求される環境を積極的に自分で整えるほど、自分はマゾにはなれない。 そこで今回の海外生活に、そういう環境を期待していたのである。\nさて、実際に飛び込んでみて、気づいたこと。\nまず、これまでの自分の人生の側には、その都度適切な高さのハードルを置いてくれる先生のような役割の人がいて、その人たちのおかげで、今少し高いハードルを前にしても「これまでのように跳べば大丈夫」と思える自信がついてきている。\nというのも、こっちに来てから毎日が、言語や文化の違いで戸惑うことばかりだけれど、それら一つ一つは今まで跳んできたハードルに比べれば、多分そんなに高くない。 悲観主義だと思っていた自分の性格が、経験のおかげで楽観主義に寄ってきていることに気づいた。\nまた、僕が海外生活に期待していたのは、今まで見たこともない巨大なハードルを次々に置かれるような過酷な環境だった。 けれども、現実は期待とは裏腹に、むしろそんなもの誰も置いてくれなかった。\nインターンを始めた頃、簡単に感じられる課題と、何をしても褒めてくれる上司を前に、誇らしい気持ちになった。 けれどもすぐに、目標が誰かに与えられるだけの期間が終わり、自分で置いたハードルを自分で跳ぶことが要求されはじめていることに気づいた。\n自分でハードルを置くというのは、自分が今できないことと向かい合うことと同義であり、実際やってみると結構きつい。 向かう方向や速度は正しいのか判断する、舵取りとしての技量も必要になり、そこに正解はない。\nしかしやはり気持ちはポジティブだ。 きっとこの先、この舵取りとしての技量がもっと求められるようになってくるだろうし、そうなってほしいという期待がある。\nまとめると、自分はこれまでまあまあ上手くやってきたし、これからもまだまだ未熟だという、ありきたりな結論に至る。\n海外生活も残り5ヶ月。 学んで、考えて、身につけて帰ろう。\n","permalink":"https://inody.github.io/posts/idea-october/","summary":"自分には昔から何事においても、与えられた目標に対して最小限の努力でアプローチしようとする悪い癖がある。\nこの癖は多分、中高の陸上部時代に、きつい練習の中で少しずつ形成されはじめ、いつの間にか凝固してしまったものなんだと思う。\n今まではそれでも誤魔化しながらなんとかやってきたのだけれど、今後大きなしっぺ返しを食らう予感もしていて、どうにか直したいと思っている。 そしてそのために「血反吐を吐くような努力をもってして、なお目標を達成できない」という経験は、失敗できる学生時代のうちに必要な経験だと感じていた（自分で書いていてマゾいと思う）。\nけれども、そういう努力を要求される環境を積極的に自分で整えるほど、自分はマゾにはなれない。 そこで今回の海外生活に、そういう環境を期待していたのである。\nさて、実際に飛び込んでみて、気づいたこと。\nまず、これまでの自分の人生の側には、その都度適切な高さのハードルを置いてくれる先生のような役割の人がいて、その人たちのおかげで、今少し高いハードルを前にしても「これまでのように跳べば大丈夫」と思える自信がついてきている。\nというのも、こっちに来てから毎日が、言語や文化の違いで戸惑うことばかりだけれど、それら一つ一つは今まで跳んできたハードルに比べれば、多分そんなに高くない。 悲観主義だと思っていた自分の性格が、経験のおかげで楽観主義に寄ってきていることに気づいた。\nまた、僕が海外生活に期待していたのは、今まで見たこともない巨大なハードルを次々に置かれるような過酷な環境だった。 けれども、現実は期待とは裏腹に、むしろそんなもの誰も置いてくれなかった。\nインターンを始めた頃、簡単に感じられる課題と、何をしても褒めてくれる上司を前に、誇らしい気持ちになった。 けれどもすぐに、目標が誰かに与えられるだけの期間が終わり、自分で置いたハードルを自分で跳ぶことが要求されはじめていることに気づいた。\n自分でハードルを置くというのは、自分が今できないことと向かい合うことと同義であり、実際やってみると結構きつい。 向かう方向や速度は正しいのか判断する、舵取りとしての技量も必要になり、そこに正解はない。\nしかしやはり気持ちはポジティブだ。 きっとこの先、この舵取りとしての技量がもっと求められるようになってくるだろうし、そうなってほしいという期待がある。\nまとめると、自分はこれまでまあまあ上手くやってきたし、これからもまだまだ未熟だという、ありきたりな結論に至る。\n海外生活も残り5ヶ月。 学んで、考えて、身につけて帰ろう。","title":"10月の雑記"},{"content":"概要 制御対象のパラメータを同定しながら制御する制御法。 通常の制御法と違い、制御則の他に、適応則というのを設計する。 今回は、モデル規範型適応制御 (MRAC : Model Refference Adaptive Control) と呼ばれる手法を紹介する。 詳しくはJ. E. Slotine, W. Li, \u0026ldquo;Applied Nonlinear Control\u0026rdquo;, 1991を参照。\n問題 次のシステムを制御したいとする。\n$$a_ny^{(n)} + a_{n-1}y^{(n-1)} + \\cdots +a_0y = u$$\nここで、状態$y,\\dot y\\cdots,y^{(n-1)}$は可測であるが、係数${\\bf a} = [a_n \\ \\cdots \\ a_1 \\ a_0]^T$は未知であるとする。つまり、このシステムは、一次系、二次系などの構造はわかっているけれど、パラメータに不確かさを含むシステムである。ここで、$a_n$の符号のみは既知とする。\n我々の制御目的は、$y$を望ましい参照モデルの応答\n$$\\alpha_ny_m^{(n)} + \\alpha_{n-1}y_m^{(n-1)} + \\cdots +\\alpha_0y_m = r$$\nに追従させることである。\n制御則の選択 $z$を以下で定義する。\n$$z := y_m^{(n)} - \\beta_{n-1}e^{(n-1)} - \\cdots - \\beta_0e$$\nここで、$\\beta_1, \\cdots, \\beta_n$は、多項式$s^n+\\beta_{n-1}s^{n-1} + \\cdots + \\beta_0$がフルビッツになるよう選ばれた、設計パラメータである。 また、$e:=y-y_m$は追従誤差である。\nこの定義のもと、制御則として\n$$u = \\hat a_n z + \\hat a_{n-1} y^{(n-1)} + \\cdots + \\hat a_0y$$\nを用いることにする。 ここで、$\\hat{\\bf a} = [\\hat a_n \\ \\cdots \\ \\hat a_1 \\ \\hat a_0]^T$はそれぞれ、適応則によって推定されたパラメータである（後述）。 すると、閉ループ系の動特性は\n$$a_n( e^{(n)} + \\beta_{n-1}e^{(n-1)} - \\cdots - \\beta_0e) = {\\bf v}^T\\tilde{\\bf a}$$\nとなる。ここで$\\tilde{\\bf a} := \\hat{\\bf a} -{\\bf a}$はパラメータ推定誤差であり、${\\bf v} = [z \\ y^{(n-1)} \\ \\cdots \\ \\dot y \\ y]^T$とおいた。\n適応則の選択 閉ループ系の動特性を${\\bf e} = [e,\\cdots,e^{n-1},e^n]$についての状態空間形式に書き直すと\n$$\\dot{\\bf e} = {\\bf A} {\\bf e} + \\frac{1}{a_n} {\\bf b} {\\bf v}^T\\tilde{\\bf a}$$\nとなる。ここで\n$$ {\\bf A} = \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\cdots \u0026amp; 0 \\newline 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; \\cdots \u0026amp; \\cdot \\newline \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\newline 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\cdots \u0026amp; 1 \\newline -\\beta_0 \u0026amp; -\\beta_1 \u0026amp; -\\beta_2 \u0026amp; \\cdots \u0026amp; -\\beta_{n-1} \\end{bmatrix} $$\n$${\\bf b} = [ 0 \\ 0 \\ \\cdots \\ 0 \\ 1]^T$$\nとおいた。 リヤプノフ関数の候補として、\n$$V({\\bf e}, \\tilde{\\bf a}) = {\\bf e}^T {\\bf P}{\\bf e} + \\tilde{\\bf a}^T {\\bf \\Gamma}^{-1}\\tilde{\\bf a}$$\nを考える。ここで、${\\bf P}, {\\bf \\Gamma}$はどちらも半正定行列であり、${\\bf P}$はある正定対称行列${\\bf Q}$に対して\n$${\\bf P}{\\bf A}+{\\bf A}^T{\\bf P}=-{\\bf Q}$$\nを満たすように選ぶ。すると、このリヤプノフ関数の微分は\n$$\\dot V = -{\\bf e}^T {\\bf Q}{\\bf e} + 2\\tilde{\\bf a}^T{\\bf v}{\\bf b}^T {\\bf P}{\\bf e} + 2 \\tilde {\\bf a}^T {\\bf \\Gamma}^{-1}\\dot{\\tilde{\\bf a}}$$\nと計算できる。 そこで、推定パラメータの更新式 (適応則) として\n$$\\dot{\\hat{\\bf a}} = -{\\bf \\Gamma}{\\bf v} {\\bf b}^T{\\bf P}{\\bf e}$$\nを用いれば、リヤプノフ関数の微分は\n$$\\dot V = - {\\bf e}^T{\\bf Q}{\\bf e}$$\nとなるため、${\\bf e} \\rightarrow 0$となる。\nパラメータ追従誤差の解析 上記の制御則と適応則を選べば、制御目的は達成できる、すなわち${\\bf e} \\rightarrow 0$が満たされることが解析できた。 一つ残る疑問は、パラメータ推定誤差は収束するか、すなわち$\\tilde{\\bf a} \\rightarrow 0$は満たされるかということだ。\nこれに対する答えは「参照モデルの複雑さによる」となる。 例えば、参照モデルが単なる$r=1$などの定置だった場合、パラメータを厳密に推定せずとも、制御目的が達成されるため、推定誤差は残るかもしれない。 また、参照モデルが$r=\\sin(t)$などの正弦波だった場合、制御目的を達成するために、パラメータをより厳密に推定する必要が生じ、推定誤差は$0$になるかもしれない。\nこれについて、パラメータ追従誤差が0に収束するかを判定する、PE性 (Persistent Excitation) という条件がある。 詳しく説明するには、システム同定の知識が必要となるので、ここでは割愛する。\nまとめ リヤプノフ関数の微分が負定になるように、制御則と、適応則を設計するというのがポイント。 今回用いた方法は、一部の非線形システムにも適用できるらしい。\n","permalink":"https://inody.github.io/posts/adaptive-control/","summary":"概要 制御対象のパラメータを同定しながら制御する制御法。 通常の制御法と違い、制御則の他に、適応則というのを設計する。 今回は、モデル規範型適応制御 (MRAC : Model Refference Adaptive Control) と呼ばれる手法を紹介する。 詳しくはJ. E. Slotine, W. Li, \u0026ldquo;Applied Nonlinear Control\u0026rdquo;, 1991を参照。\n問題 次のシステムを制御したいとする。\n$$a_ny^{(n)} + a_{n-1}y^{(n-1)} + \\cdots +a_0y = u$$\nここで、状態$y,\\dot y\\cdots,y^{(n-1)}$は可測であるが、係数${\\bf a} = [a_n \\ \\cdots \\ a_1 \\ a_0]^T$は未知であるとする。つまり、このシステムは、一次系、二次系などの構造はわかっているけれど、パラメータに不確かさを含むシステムである。ここで、$a_n$の符号のみは既知とする。\n我々の制御目的は、$y$を望ましい参照モデルの応答\n$$\\alpha_ny_m^{(n)} + \\alpha_{n-1}y_m^{(n-1)} + \\cdots +\\alpha_0y_m = r$$\nに追従させることである。\n制御則の選択 $z$を以下で定義する。\n$$z := y_m^{(n)} - \\beta_{n-1}e^{(n-1)} - \\cdots - \\beta_0e$$\nここで、$\\beta_1, \\cdots, \\beta_n$は、多項式$s^n+\\beta_{n-1}s^{n-1} + \\cdots + \\beta_0$がフルビッツになるよう選ばれた、設計パラメータである。 また、$e:=y-y_m$は追従誤差である。","title":"線形適応制御入門"},{"content":"対象システムが構造的不確かさをもつ場合に有効なロバスト制御法。 今回はSISOシステムのみ取り上げるが、MIMOにも拡張可能。 詳しくはJ. E. Slotine, W. Li, \u0026ldquo;Applied Nonlinear Control\u0026rdquo;, 1991を参照。\n仮定 次のシステムを制御したいとする。 $$x^{(n)} = f({\\bf x}) + b({\\bf x})u$$ ここで、${\\bf x}=[x \\ \\dot x \\cdots x^{(n-1)}]^T$は状態ベクトル, $u$はスカラーの入力である。 また、$f$は不確かさを含む関数であるとする。 具体的には、我々は推定値$\\hat f$のみを知ることができるものとし、これらの関数はある既知の関数$F({\\bf x})$に対して $$\\left|\\hat f-f\\right|\\le F$$ を満たすとする。$b$もまた $$0 \u0026lt; b_{min} \\le b \\le b_{max}$$ の不確かさを持つとし、我々が知ることのできる値は推定値 $$\\hat b = (b_{min} b_{max})^{1/2}$$ のみであるとする。\n問題 ${\\bf x}$を望ましい状態${\\bf x}_d=[x_d \\ \\dot x_d \\cdots x^{(n-1)}_d]$に追従させる$u$を設計せよ。 ただし、望ましい状態${\\bf x}_d$は${\\bf x}_d(0) = {\\bf x}(0)$を満たすとする (テクニカルな仮定。ここでは説明しない) 。\n導出 まずは簡単なシステムで 簡単のため$b$についての不確かさを一旦無視して$b({\\bf x}) = 1$とし、対象システムは簡単な二次系 $$\\ddot x = f({\\bf x}) + u$$ であるとする。 また、これ以後、$\\tilde{\\bf x} := {\\bf x}-{\\bf x}_d$と定義する。 もしある正数$\\lambda$を設計したうえで、状態フィードバック $$u = -\\hat f({\\bf x}) + \\ddot x_d - \\lambda \\dot{\\tilde{x}}$$ を生成すると、閉ループ系は $$\\ddot{\\tilde{x}} = - \\lambda \\dot{\\tilde{x}}$$ と計算でき、$\\dot{\\tilde{x}}\\rightarrow 0$すなわち${\\bf x}\\rightarrow{\\bf x}_d$を満たす。 ただし、この結果が成り立つのは、$f$が不確かさを含まない (すなわち$\\hat f=f$が成り立つ) ときであり、推定値が真値と一致しない場合はこの限りでない。\nこの問題を解決するために、突然だが、切り替え関数 $$s({\\bf x},t)=\\left( \\frac{d}{dt} + \\lambda \\right)^{n-1}\\tilde x$$ を定義する。 ただし今考えているシステムは二次系なので、切り替え関数は $$s=\\left( \\frac{d}{dt} + \\lambda \\right)\\tilde x$$ となる。 この定義のもと、先ほどの入力 $$\\hat u = -\\hat f({\\bf x}) + \\ddot x_d - \\lambda \\dot{\\tilde{x}}$$ に対して、十分大きな$k\u0026gt;F$を設計し、追加の入力 $$u = \\hat u - k \\ \\text{sgn}(s)$$ を生成すると、$f$が不確かさを含む場合でも、うまく制御できることがわかっている。\nなぜうまくいくのか 順を追って説明しよう。\nまず、先ほど定義した切り替え関数$s({\\bf x}, t)$に対して、不変集合 $$S(t) = \\{{\\bf x} \\ | \\ s({\\bf x}, t) = 0 \\}$$ を定義する。 この集合の名前を切り替え超平面と呼ぶ。 すると、制御目標を満たす軌道${\\bf x} \\equiv {\\bf x}_d$は切り替え超平面の元になる。 すなわち $${\\bf x}(t) \\in S(t), \\ \\forall t$$ を満たす。\nこのことは、$n$次元ベクトル$\\tilde{\\bf x}\\equiv 0$を考える問題を、スカラー値$s=0$を考える問題に帰着できることを意味する。 具体的には、もし${\\bf x}$が$S$の外に存在するときに、その中に押し込むような入力$u$を生成できれば、制御目標は達成できたと言える。\nまた、もしそのような入力を生成できた場合の$s$の挙動は $$\\frac{1}{2}\\frac{d}{dt}s^2\\le-\\eta |s|$$ を満たすと考えられる ($\\eta$は正の定数) 。 これまた唐突に現れた式だが、リヤプノフ関数$V(s) = s^2$を設計したうえでの、原点の指数安定性を考えていると思えば自然に感じられる。 この不等式の名前を切り替え条件 (sliding condition、正確な和訳不明) と呼ぶ。\n数値例に戻ろう。 切り替え条件の左辺を計算すると、 $$\\frac{1}{2}\\frac{d}{dt}s^2 = \\dot s s = \\left(f-\\hat f - k \\ \\text{sgn}(s) \\right)s = \\left(f - \\hat f \\right)s - k|s|$$ が成り立つ。 ここで$\\eta = k-F\u0026gt;0$を定義すると $$\\frac{1}{2}\\frac{d}{dt}s^2\\le-\\eta |s|$$ が成り立ち、先に与えた入力によって切り替え条件が満たされていることがわかる。\n以上が、設計した入力が制御目標を達成できる理由である。\n少し難しいシステムで つぎに、$b({\\bf x})$の不確かさを改めて考える。すなわち、対象システムは $$\\ddot x = f({\\bf x}) + b({\\bf x})u$$ である。 今、先と同様の $$\\hat u = -\\hat f({\\bf x}) + \\ddot x_d - \\lambda \\dot{\\tilde{x}}$$ を考えたうえで、制御入力を以下で与える。 $$u = \\hat b^{-1} \\left(\\hat u - k \\ \\text{sgn}(s) \\right). $$ ただし、先ほどと違う箇所として、$k$は $$k \\ge \\beta(F+\\eta) + (\\beta-1)\\left|\\hat u\\right|$$ を満たすよう定める。 ここで$\\beta:=(b_{max} / b_{min})^{1/2}$である。 詳細は省くが、計算してみると、この入力のもと切り替え条件が満たされていることが確認できる。\n一般の場合 実は、今回参考にした書籍には、一般の場合 $$x^{(n)} = f({\\bf x}) + b({\\bf x})u$$ の制御法が明確に示されていなかった。 もっと正直に言うと、それっぽい箇所はあるのだが、自分の理解が追いつかなかった。 これまでの議論のアナロジーでなんとかなるっぽいので、また時間があるときに勉強し直して、追記できればいいと思う。\nまとめ もとのシステムの状態${\\bf x}$の安定性を、切り替え関数の出力値$s$の安定性に置き換え、リヤプノフの安定性を考えるというのがポイント。\n実装のうえでは、$\\text{sgn}$関数によるチャタリングが発生してしまうので、閾値をあらかじめ設計するなどの工夫が必要。\n付け焼き刃の知識で何か間違ってるかもしれないので、その点ご了承ください。\n","permalink":"https://inody.github.io/posts/sliding-mode-control/","summary":"対象システムが構造的不確かさをもつ場合に有効なロバスト制御法。 今回はSISOシステムのみ取り上げるが、MIMOにも拡張可能。 詳しくはJ. E. Slotine, W. Li, \u0026ldquo;Applied Nonlinear Control\u0026rdquo;, 1991を参照。\n仮定 次のシステムを制御したいとする。 $$x^{(n)} = f({\\bf x}) + b({\\bf x})u$$ ここで、${\\bf x}=[x \\ \\dot x \\cdots x^{(n-1)}]^T$は状態ベクトル, $u$はスカラーの入力である。 また、$f$は不確かさを含む関数であるとする。 具体的には、我々は推定値$\\hat f$のみを知ることができるものとし、これらの関数はある既知の関数$F({\\bf x})$に対して $$\\left|\\hat f-f\\right|\\le F$$ を満たすとする。$b$もまた $$0 \u0026lt; b_{min} \\le b \\le b_{max}$$ の不確かさを持つとし、我々が知ることのできる値は推定値 $$\\hat b = (b_{min} b_{max})^{1/2}$$ のみであるとする。\n問題 ${\\bf x}$を望ましい状態${\\bf x}_d=[x_d \\ \\dot x_d \\cdots x^{(n-1)}_d]$に追従させる$u$を設計せよ。 ただし、望ましい状態${\\bf x}_d$は${\\bf x}_d(0) = {\\bf x}(0)$を満たすとする (テクニカルな仮定。ここでは説明しない) 。\n導出 まずは簡単なシステムで 簡単のため$b$についての不確かさを一旦無視して$b({\\bf x}) = 1$とし、対象システムは簡単な二次系 $$\\ddot x = f({\\bf x}) + u$$ であるとする。 また、これ以後、$\\tilde{\\bf x} := {\\bf x}-{\\bf x}_d$と定義する。 もしある正数$\\lambda$を設計したうえで、状態フィードバック $$u = -\\hat f({\\bf x}) + \\ddot x_d - \\lambda \\dot{\\tilde{x}}$$ を生成すると、閉ループ系は $$\\ddot{\\tilde{x}} = - \\lambda \\dot{\\tilde{x}}$$ と計算でき、$\\dot{\\tilde{x}}\\rightarrow 0$すなわち${\\bf x}\\rightarrow{\\bf x}_d$を満たす。 ただし、この結果が成り立つのは、$f$が不確かさを含まない (すなわち$\\hat f=f$が成り立つ) ときであり、推定値が真値と一致しない場合はこの限りでない。","title":"スライディングモード制御入門"},{"content":"ヨーロッパに来て半年になるので、つらつらと思うことを書き残しておく。\n#研修内容について\n今年度は、ヴルカヌス・プログラムという奨学金付きのインターンシッププログラムに参加しており、ベルギーにあるシーメンスのソフトウェア部門で航空機の制御に関わる仕事をしている。\n航空機への制御を学ぶためには、航空機自体がどのような動特性を持っているかを知らなければならないが、僕にはその知識が全くなかったため、研修は航空力学を勉強することから始まった。\n物理の知識がラグランジュ方程式くらいで止まっている僕にとって、航空力学の理論は難しく感じられ、これまでのところとてもじゃないが全てを理解したとは言いがたい。 先日edXでMITxから提供されている、Introduction to Aerodynamicsという講義を見つけたので、是非受講しようと思っている。\n話がそれるが、最近こういったオンラインの講義を受講するのにハマっており、先日は機械学習の講義を受け終えた。 各講義のクオリティはとても高く、この先大学のもつ教育機関としての側面は、こうしたサービスの登場により変わっていくんじゃないかと思う。\nそれはさておき、まだ航空機についての知識は足りていないものの、最近はようやく制御シミュレーションに取り掛かり始めている。 当然だが制御工学は自分の専門であるので、以前にもまして興味をもって取り組むことができている。 僕がこれまで学び、実装したことのある制御法は、その殆どが基礎的な線形制御法に過ぎなかったため (僕の研究内容は解析がメインだったと言い訳をしておく) 、モデル追従制御や入出力線形化など、今まで詳しく知らなかった制御理論を学べたのは嬉しい誤算だった。\n制御理論を航空機にどう実装するかについても、上司からいろいろと面白い話を聞けた。 例えば、高度や速度などの飛行状態によって動特性が変わる航空機では、平衡点も変わるため、制御のための線形化はその都度おこなう必要がある。 しかしながら、線形化のためには平衡点を求めなくてはならず、計算には時間がかかる。 このため、いくつかの航空機では、予め数百もの状態の組み合わせに対する線形化モデル、またはモデルに対する制御器のパラメータを計算して、メモリに格納しておき、それを呼び出し、補完しながら制御するのだそうだ。\n実はゲインスケジュール制御は航空分野から生まれた制御法であるらしく、こうした背景があったことを考えれば納得できる。\n#ベルギーについて\nここルーヴェンは、ベルギーで一番大きな大学街として知られる町だ。 にもかかわらず、深夜に開いているコンビニなどはなく、日曜はどこのお店も開いてない。 そのため、日本で暮らす感覚でいると、休みの日に食べるものがなくて詰む。 アイルランドでも同様の傾向は見られたが、向こうでは首都ダブリンに滞在していたためか、中心部は日曜も賑わっており、あまり不便しなかった。\nはじめは暮らしにくい町だと感じたものだが、順応してきた今では、むしろ働く側に優しい仕組みなのかもしれないと思うに至っている。 実際、僕が働く会社では、仕事はどんなに遅くとも19:00で切り上げられるし、人々は日曜にピクニックやスポーツを思う存分楽しんでいるように見える。\n不便さを受け入れることで享受できる暮らしのゆとりと、際限なく働くことで経済を循環させる資本主義の宿命。 世の中にはこうしたトレードオフが無数にあることに気づく。\nところで、シーメンスでは様々な国から来た人が働いており、僕のようなアジア人も少なからず見かける。 観測範囲ではイタリア人が最も多く、オランダ人、フランス人、中国人、インド人、日本人や韓国人、と続く。 ドイツ人を見かけないのは、おそらくだが、ドイツ人の労働環境はこちらより優れているのでわざわざ他国に出向く必要はないという理由によるのだろう。\n彼らは皆、自国の人と話すときは自国語で、他国の人と話すときは英語でコミュニケーションをする。 語学学校の時と違い、彼らが全く言葉に詰まることなく、母国語のように英語を話す様には、はじめ驚いた。\nまた、町を歩いてみても、アジア人を多く見かけるし、僕のアパートには大学に通うためにスロベニアからやってきた学生が住んでいる。\n周囲を他国に囲まれている地理的要因、EUの本部を首都に抱える政治的要因などが、こうした国際的な環境の形成を助けたのだろうか。\n#今後について\n正直、4月からここまであっという間だった。 良くも悪くも研究室とは違い、具体的な目標が課せられない毎日であり、自分で明確な目標をもつ必要性を日々感じている。 残り半年、無為に過ごして後悔の残らないよう、自戒しつつ過ごしていきたい。\n","permalink":"https://inody.github.io/posts/idea-belgium/","summary":"ヨーロッパに来て半年になるので、つらつらと思うことを書き残しておく。\n#研修内容について\n今年度は、ヴルカヌス・プログラムという奨学金付きのインターンシッププログラムに参加しており、ベルギーにあるシーメンスのソフトウェア部門で航空機の制御に関わる仕事をしている。\n航空機への制御を学ぶためには、航空機自体がどのような動特性を持っているかを知らなければならないが、僕にはその知識が全くなかったため、研修は航空力学を勉強することから始まった。\n物理の知識がラグランジュ方程式くらいで止まっている僕にとって、航空力学の理論は難しく感じられ、これまでのところとてもじゃないが全てを理解したとは言いがたい。 先日edXでMITxから提供されている、Introduction to Aerodynamicsという講義を見つけたので、是非受講しようと思っている。\n話がそれるが、最近こういったオンラインの講義を受講するのにハマっており、先日は機械学習の講義を受け終えた。 各講義のクオリティはとても高く、この先大学のもつ教育機関としての側面は、こうしたサービスの登場により変わっていくんじゃないかと思う。\nそれはさておき、まだ航空機についての知識は足りていないものの、最近はようやく制御シミュレーションに取り掛かり始めている。 当然だが制御工学は自分の専門であるので、以前にもまして興味をもって取り組むことができている。 僕がこれまで学び、実装したことのある制御法は、その殆どが基礎的な線形制御法に過ぎなかったため (僕の研究内容は解析がメインだったと言い訳をしておく) 、モデル追従制御や入出力線形化など、今まで詳しく知らなかった制御理論を学べたのは嬉しい誤算だった。\n制御理論を航空機にどう実装するかについても、上司からいろいろと面白い話を聞けた。 例えば、高度や速度などの飛行状態によって動特性が変わる航空機では、平衡点も変わるため、制御のための線形化はその都度おこなう必要がある。 しかしながら、線形化のためには平衡点を求めなくてはならず、計算には時間がかかる。 このため、いくつかの航空機では、予め数百もの状態の組み合わせに対する線形化モデル、またはモデルに対する制御器のパラメータを計算して、メモリに格納しておき、それを呼び出し、補完しながら制御するのだそうだ。\n実はゲインスケジュール制御は航空分野から生まれた制御法であるらしく、こうした背景があったことを考えれば納得できる。\n#ベルギーについて\nここルーヴェンは、ベルギーで一番大きな大学街として知られる町だ。 にもかかわらず、深夜に開いているコンビニなどはなく、日曜はどこのお店も開いてない。 そのため、日本で暮らす感覚でいると、休みの日に食べるものがなくて詰む。 アイルランドでも同様の傾向は見られたが、向こうでは首都ダブリンに滞在していたためか、中心部は日曜も賑わっており、あまり不便しなかった。\nはじめは暮らしにくい町だと感じたものだが、順応してきた今では、むしろ働く側に優しい仕組みなのかもしれないと思うに至っている。 実際、僕が働く会社では、仕事はどんなに遅くとも19:00で切り上げられるし、人々は日曜にピクニックやスポーツを思う存分楽しんでいるように見える。\n不便さを受け入れることで享受できる暮らしのゆとりと、際限なく働くことで経済を循環させる資本主義の宿命。 世の中にはこうしたトレードオフが無数にあることに気づく。\nところで、シーメンスでは様々な国から来た人が働いており、僕のようなアジア人も少なからず見かける。 観測範囲ではイタリア人が最も多く、オランダ人、フランス人、中国人、インド人、日本人や韓国人、と続く。 ドイツ人を見かけないのは、おそらくだが、ドイツ人の労働環境はこちらより優れているのでわざわざ他国に出向く必要はないという理由によるのだろう。\n彼らは皆、自国の人と話すときは自国語で、他国の人と話すときは英語でコミュニケーションをする。 語学学校の時と違い、彼らが全く言葉に詰まることなく、母国語のように英語を話す様には、はじめ驚いた。\nまた、町を歩いてみても、アジア人を多く見かけるし、僕のアパートには大学に通うためにスロベニアからやってきた学生が住んでいる。\n周囲を他国に囲まれている地理的要因、EUの本部を首都に抱える政治的要因などが、こうした国際的な環境の形成を助けたのだろうか。\n#今後について\n正直、4月からここまであっという間だった。 良くも悪くも研究室とは違い、具体的な目標が課せられない毎日であり、自分で明確な目標をもつ必要性を日々感じている。 残り半年、無為に過ごして後悔の残らないよう、自戒しつつ過ごしていきたい。","title":"ベルギーで働いて感じたこと"},{"content":"###概要 XCodeのバージョンを7にアップデートした際にMexがコンパイルエラーを吐くようになった。 こちらに解決法が載っていたので、そのまま紹介。\n###自分の環境\nOSX Yosemite (10.10.5) Matlab R2014b ###解決法 Matlabのコンソールで\nedit ([matlabroot \u0026#39;/bin/maci64/mexopts/clang_maci64.xml\u0026#39;]) とタイプ。出力されたファイルの後半\n\u0026lt;dirExists name=\u0026quot;$$/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk\u0026quot; /\u0026gt; の次の行に\n\u0026lt;dirExists name=\u0026quot;$$/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk\u0026quot; /\u0026gt; \u0026lt;dirExists name=\u0026quot;$$/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\u0026quot; /\u0026gt; を追加、また\n\u0026lt;cmdReturns name=\u0026quot;find $$ -name MacOSX10.9.sdk\u0026quot; /\u0026gt; の次の行に\n\u0026lt;cmdReturns name=\u0026quot;find $$ -name MacOSX10.10.sdk\u0026quot; /\u0026gt; \u0026lt;cmdReturns name=\u0026quot;find $$ -name MacOSX10.11.sdk\u0026quot; /\u0026gt; を追加 (それぞれ2箇所ある)。\nこれでMexでのコンパイルが復活する。 ただしこの方法は非公式なので、一応バックアップをとっておくのが吉。 自分はC++ (clang++_maci64.xml) 、gfortran (gfortran.xml) についても同様の変更を行った。\n","permalink":"https://inody.github.io/posts/xcode-matlab/","summary":"###概要 XCodeのバージョンを7にアップデートした際にMexがコンパイルエラーを吐くようになった。 こちらに解決法が載っていたので、そのまま紹介。\n###自分の環境\nOSX Yosemite (10.10.5) Matlab R2014b ###解決法 Matlabのコンソールで\nedit ([matlabroot \u0026#39;/bin/maci64/mexopts/clang_maci64.xml\u0026#39;]) とタイプ。出力されたファイルの後半\n\u0026lt;dirExists name=\u0026quot;$$/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk\u0026quot; /\u0026gt; の次の行に\n\u0026lt;dirExists name=\u0026quot;$$/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk\u0026quot; /\u0026gt; \u0026lt;dirExists name=\u0026quot;$$/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\u0026quot; /\u0026gt; を追加、また\n\u0026lt;cmdReturns name=\u0026quot;find $$ -name MacOSX10.9.sdk\u0026quot; /\u0026gt; の次の行に\n\u0026lt;cmdReturns name=\u0026quot;find $$ -name MacOSX10.10.sdk\u0026quot; /\u0026gt; \u0026lt;cmdReturns name=\u0026quot;find $$ -name MacOSX10.11.sdk\u0026quot; /\u0026gt; を追加 (それぞれ2箇所ある)。\nこれでMexでのコンパイルが復活する。 ただしこの方法は非公式なので、一応バックアップをとっておくのが吉。 自分はC++ (clang++_maci64.xml) 、gfortran (gfortran.xml) についても同様の変更を行った。","title":"Xcodeアップデート時に起きるMatlabのMexのエラーを修正"},{"content":"概要 もう2年前のことになるが、当時大学院入試を控えていた僕は、いろいろ考えた末に京都大学の情報学研究科システム科学専攻を受験することに決めた。\nそこで今日は自分がどのように入試に臨んだかを書き記しておく。\n過去問 まずはなんといっても過去問。 システム科学専攻の公式HPに置いてある。 試験内容は\n基礎科目 (微積分・線形代数) 専門科目 (論理回路・機械力学・工業数学・基本ソフトウエア・電気電子回路・確率統計・制御工学・オペレーションズリサーチから2問選択) からなる。 本番までに5年分は解いておきたいが、まずは雰囲気を掴むためにも1年分解いておくといい。\n参考書 頭のいい人なら過去問だけでもなんとかなるのだろうけど、僕のような凡人は問題集を使って足りない頭を補強することにした。\n基礎科目である数学は、専門科目に比べ難易度が高めなため、極めれば得点源になる。 自分は微積分と線形代数の勉強としてそれぞれ、演習大学院入試問題 \u0026lt;数学\u0026gt; Iの1章と2章を取り組んだ。\n専門科目は制御工学と工業数学を選んだ (周りを見てもこの組み合わせが多かったように思う) 。\n制御については フィードバック制御入門 (システム制御工学シリーズ) の各章の章末問題を解き、工業数学は 演習大学院入試問題〈数学〉II の2章をやった。また、万が一の予備科目として論理回路を 論理回路の基礎 で勉強した。\n僕の場合、春休みまでに英語の試験を受け終え、4月から基礎にじっくり取り組み、専門は残り1ヶ月程度取り組んだ。\n要領のいい人なら合計2ヶ月弱で終えられると思う。\nまた自分で言うのも何だが、ここでセレクトした参考書には少し自信がある。 基礎数学と制御工学に関しては、参考書そのままの問題が過去問に出て、「あ！これ進研ゼ (ry」となったこともある。 参考書選びで迷っている人には、強くお薦めします。\nその他 下賤な話だが、本専攻の入試は他大学院に比べ設問自体少なく、各年の傾向も似通っているため、穴場だと思う。\nとはいえ最も大事なのは、大学院で何をやりたいのか明確な目標をもつことだろう。 目標をもつことは試験勉強のモチベーションに繋がるし、進学後にやるべきことも明確になる。\n具体的な目標をイメージしづらい人は、前もって研究室見学には行くといいだろう。 現在主にどのような研究をしているのか、どんな実験器具があるのか、研究室の雰囲気はどうなのか、といった、ネットでは中々わからない情報が手に入る。 研究室のメンバーも外部からの刺激に飢えている (?) ので、歓迎してくれるはず (もちろんアポは忘れないこと) 。\nまた余裕がある人は、研究室のメンバーが書いた論文を読んでみることをお薦めする。 漠然とした研究内容を具体的に把握でき、やる気が高まるし、研究内容のミスマッチを防ぐこともできる。\n本専攻ヒューマンシステム論分野にご在任の加納学教授のブログには、大学院進学に関してたくさんのアドバイスが書かれている。 例えばこのエントリなどは大学院進学を決意するにあたってはじめに読んでおきたい。\n","permalink":"https://inody.github.io/posts/kyoto-univ-exam/","summary":"概要 もう2年前のことになるが、当時大学院入試を控えていた僕は、いろいろ考えた末に京都大学の情報学研究科システム科学専攻を受験することに決めた。\nそこで今日は自分がどのように入試に臨んだかを書き記しておく。\n過去問 まずはなんといっても過去問。 システム科学専攻の公式HPに置いてある。 試験内容は\n基礎科目 (微積分・線形代数) 専門科目 (論理回路・機械力学・工業数学・基本ソフトウエア・電気電子回路・確率統計・制御工学・オペレーションズリサーチから2問選択) からなる。 本番までに5年分は解いておきたいが、まずは雰囲気を掴むためにも1年分解いておくといい。\n参考書 頭のいい人なら過去問だけでもなんとかなるのだろうけど、僕のような凡人は問題集を使って足りない頭を補強することにした。\n基礎科目である数学は、専門科目に比べ難易度が高めなため、極めれば得点源になる。 自分は微積分と線形代数の勉強としてそれぞれ、演習大学院入試問題 \u0026lt;数学\u0026gt; Iの1章と2章を取り組んだ。\n専門科目は制御工学と工業数学を選んだ (周りを見てもこの組み合わせが多かったように思う) 。\n制御については フィードバック制御入門 (システム制御工学シリーズ) の各章の章末問題を解き、工業数学は 演習大学院入試問題〈数学〉II の2章をやった。また、万が一の予備科目として論理回路を 論理回路の基礎 で勉強した。\n僕の場合、春休みまでに英語の試験を受け終え、4月から基礎にじっくり取り組み、専門は残り1ヶ月程度取り組んだ。\n要領のいい人なら合計2ヶ月弱で終えられると思う。\nまた自分で言うのも何だが、ここでセレクトした参考書には少し自信がある。 基礎数学と制御工学に関しては、参考書そのままの問題が過去問に出て、「あ！これ進研ゼ (ry」となったこともある。 参考書選びで迷っている人には、強くお薦めします。\nその他 下賤な話だが、本専攻の入試は他大学院に比べ設問自体少なく、各年の傾向も似通っているため、穴場だと思う。\nとはいえ最も大事なのは、大学院で何をやりたいのか明確な目標をもつことだろう。 目標をもつことは試験勉強のモチベーションに繋がるし、進学後にやるべきことも明確になる。\n具体的な目標をイメージしづらい人は、前もって研究室見学には行くといいだろう。 現在主にどのような研究をしているのか、どんな実験器具があるのか、研究室の雰囲気はどうなのか、といった、ネットでは中々わからない情報が手に入る。 研究室のメンバーも外部からの刺激に飢えている (?) ので、歓迎してくれるはず (もちろんアポは忘れないこと) 。\nまた余裕がある人は、研究室のメンバーが書いた論文を読んでみることをお薦めする。 漠然とした研究内容を具体的に把握でき、やる気が高まるし、研究内容のミスマッチを防ぐこともできる。\n本専攻ヒューマンシステム論分野にご在任の加納学教授のブログには、大学院進学に関してたくさんのアドバイスが書かれている。 例えばこのエントリなどは大学院進学を決意するにあたってはじめに読んでおきたい。","title":"京大情報学研究科システム科学専攻入試攻略"},{"content":"入出力線形化 (フィードバック線形化) とは 非線形システムに、非線形性を打ち消すような入力を加える事で、閉ループ系を線形化する制御法。 安定化が目的ではないので、得られた線形システムに対して線形制御法を適用する必要がある。\n利点として\n通常の(ヤコビアンを用いる)線形化と違って、近似を用いない 欠点として\nシステムの動特性を全て知っていなければならない その動特性は正方、入力アフィンという形をしていなければならない (拡張可能) 線形化のために大きな入力を加えるため、入力飽和などのあるシステムに適用しづらい などが挙げられる。\n入出力線形化 #仮定 今、制御対象が以下の動特性に従うとする。 $$\\dot x = f(x) + g(x)u\\ y=h(x)$$ $x(t) \\in R^n, u(t) \\in R^m, y(t) \\in R^m$はそれぞれ状態、入力、出力を表す。 $f:R^n\\rightarrow R^n$および$g: R^n\\rightarrow R^{n\\times m} $については特になにも仮定しないが、$h: R^n\\rightarrow R^m$は必要回数分だけ微分可能だとする。\nこのシステムは入力に対してアフィンな形をしているため、そのまま入力アフィン (input-affine, control-affine) と呼ばれる。 入力アフィンシステムは、機械システムなどによくみられる、非常に重要なクラスらしい。\nまた、今回入力と出力の次元は同じと仮定している。 このことをシステムは正方 (square) であるという。\n#線形化制御器 今、 $$u = C(x,v)$$ を設計することで、与えられた非線形システムを$v$から$y$に対して線形にすることを考える。\nこの問題に対して、いきなりだが制御器$u$を、下記で与えてみよう。 $$u = L_gh^{-1}(x)(-L_fh(x) + v)$$ ここで、Lie微分と呼ばれる記法 $$L_fh(x) = \\frac{\\partial h}{\\partial x} f(x)\\ L_gh(x) = \\frac{\\partial h}{\\partial x} g(x)$$ を用いた。\nここで$L_gh(x)$が可逆でなければならないという問題があるのだが、今はとりあえず無視して、生成した入力を、与えられたシステムに突っ込んでみることにする。 すると $$\\dot y = \\frac{\\partial h}{\\partial x}\\dot x = \\frac{\\partial h}{\\partial x} (f(x) + g(x)u) = v$$ という式が得られる。 これは、$v$から$y$に対して線形な形をしているので、目標が達成できたと言える。\n#$L_gh(x)$が可逆でない場合 $L_gh(x)$が可逆でないとはどういうことか。\n以下、簡単のためにSISOシステム ($m=1$) を考える。 この場合、$L_gh(x)$が可逆でないとは、$\\frac{\\partial h}{\\partial x} g(x)=0$となることである。 このとき、 $$\\dot y = \\frac{\\partial h}{\\partial x}f(x)$$ となり、$u$によって非線形項を打ち消す入力を加えることができないことがわかる。\nそこで、$y$を必要回数分だけ微分して、$L_gh$が可逆になるまで続けることにする。\n試しに$\\dot y$もう一度を微分してみると、 $$\\ddot y = L_f^2h(x) + L_gL_fh(x)u$$ が得られる。 ここで、Lie微分の便利なルールである、 $$L_f^2h(x) = L_fL_fh(x) = \\frac{\\partial (L_fh(x))}{\\partial x}f(x)$$ という記法を用いた。\nここで、$L_gL_fh(x)=0$ならもう一度微分、それがダメなら更にもう一度、というように、ひたすら微分を繰り返していき、やがて $$y^{(n)} = L_f^nh(x) + L_gL_f^{n-1}h(x)u$$ が得られたとする。これに対して $$u = L_gL_f^{n-1}h^{-1}(x) ( -L_f^nh(x) + v ) $$ と入力を与えれば、 $$y^{(n)} = v$$ となり、システムは$v$から$y$に対して線形になる。\nただし、$L_gh(x)$の可逆性は当然ながらそのときの状態$x$に依存するため、機械システムの場合、これについてはあまり気にしなくてもいいらしい。 よって、以後$L_gh(x)$は可逆であるとする。\n#追従問題 ここで、望ましい軌道$y_d(t)$が与えられたとしよう。\nつぎの我々の目的は適切な制御器 $$u = C(x,y_d)$$ を設計することで、出力$y$を$y_d$に追従させることである。 このことは追従誤差$e(t):=y_d(t)-y(t)$を零にする制御問題と言ってもいい。\nさて、制御器$u$を、下記で与えてみよう。 $$u = L_gh^{-1}(x)(-L_fh(x) + \\dot y_d + v)$$\nここで、$v$は補助的な入力であり、後でちゃんと設計する。\n生成した入力を、与えられたシステムに突っ込んでみると $$\\dot y = \\frac{\\partial h}{\\partial x}\\dot x = \\frac{\\partial h}{\\partial x} (f(x) + g(x)u) = \\dot y_d +v$$ という式が得られる。 これは $$\\dot e = -v$$ と等価である。 さて、追従誤差$e$を零にするために、正定行列$K$を用意して $$v = Ke$$ と$v$を設計してやれば、追従誤差は零に収束していくはずである。\nこうして、適切な制御器 $$u = L_gh^{-1}(x)(-L_fh(x) + \\dot y_d + K(y_d-h(x)))$$ を設計できた。\n#零ダイナミクス さて、入出力関係が線形化できたわけだが、その間、状態$x$はどのように振る舞うのだろうか。 試しに$\\dot x$を計算していくと $$\\dot x = f(x) + g(x)u = f(x) + g(x)(L_gh^{-1}(x)(-L_fh(x) + v)) = (I - g L_gh^{-1} \\frac{\\partial h}{\\partial x})f(x) + gL_gh^{-1}(x)v$$ が得られる。 ここで、 $$\\dot x = (I - g L_gh^{-1} \\frac{\\partial h}{\\partial x})f(x)$$ を零ダイナミクスと呼ぶ。\n注意すべきことは、今$u$によって制御されている追従誤差$e$の次元$m$と、状態の次元$n$に対して、$m\\le n$の関係が成り立つことである。 これが意味することは、出力から不可観測な状態が不安定になりうるということである。 そのため、入出力線形化を実装するにあたっては、零ダイナミクスが安定かどうかを予め判断しておくことが求められる (零ダイナミクスの安定性は、入出力線形化のための十分条件であり、必要条件ではない) 。\nまとめ 数値例とか後で追加したい。\n","permalink":"https://inody.github.io/posts/io-stabilization/","summary":"入出力線形化 (フィードバック線形化) とは 非線形システムに、非線形性を打ち消すような入力を加える事で、閉ループ系を線形化する制御法。 安定化が目的ではないので、得られた線形システムに対して線形制御法を適用する必要がある。\n利点として\n通常の(ヤコビアンを用いる)線形化と違って、近似を用いない 欠点として\nシステムの動特性を全て知っていなければならない その動特性は正方、入力アフィンという形をしていなければならない (拡張可能) 線形化のために大きな入力を加えるため、入力飽和などのあるシステムに適用しづらい などが挙げられる。\n入出力線形化 #仮定 今、制御対象が以下の動特性に従うとする。 $$\\dot x = f(x) + g(x)u\\ y=h(x)$$ $x(t) \\in R^n, u(t) \\in R^m, y(t) \\in R^m$はそれぞれ状態、入力、出力を表す。 $f:R^n\\rightarrow R^n$および$g: R^n\\rightarrow R^{n\\times m} $については特になにも仮定しないが、$h: R^n\\rightarrow R^m$は必要回数分だけ微分可能だとする。\nこのシステムは入力に対してアフィンな形をしているため、そのまま入力アフィン (input-affine, control-affine) と呼ばれる。 入力アフィンシステムは、機械システムなどによくみられる、非常に重要なクラスらしい。\nまた、今回入力と出力の次元は同じと仮定している。 このことをシステムは正方 (square) であるという。\n#線形化制御器 今、 $$u = C(x,v)$$ を設計することで、与えられた非線形システムを$v$から$y$に対して線形にすることを考える。\nこの問題に対して、いきなりだが制御器$u$を、下記で与えてみよう。 $$u = L_gh^{-1}(x)(-L_fh(x) + v)$$ ここで、Lie微分と呼ばれる記法 $$L_fh(x) = \\frac{\\partial h}{\\partial x} f(x)\\ L_gh(x) = \\frac{\\partial h}{\\partial x} g(x)$$ を用いた。","title":"入出力線形化"},{"content":"筆者は終始「節目の期間はしっかりキャリアについて考える。それ以外の期間では目の前のことに打ち込み、時には偶然に流される(ドリフトする)ことも必要」という主張に徹する。 なので、この主張を真に理解している人は本書を手にする必要はないと思う。\n本書のメインターゲットは就活生とミドル世代の2種類である。 また本書では、これらの層を想定したいくつかのエピソードやエクササイズが紹介されていて、キャリアデザインを「自分の問題」として考えさせる工夫が凝らされている。\n個人的に、以下の自己イメージに関するエクササイズに考えさせられた。\n自分はなにが得意か。 自分はいったいなにをやりたいのか。 どのようなことをやっている自分なら、意味を感じ、社会の役に立っていると実感できるのか。 それぞれの問いは\n能力・才能についての自己イメージ 動機・欲求についての自己イメージ 意味・価値についての自己イメージ を照射しているという。キャリアを意識する上で、避けては通れない質問だと感じた。\nまた、筆者は本書のはじめに「研究に基づく見解」を披露すると述べており、個人的に「キャリアデザイン」という科学らしからぬ問題に対して、どのような研究が存在するかが興味をもった。 実際には、多数の論者の言葉や考え方を引用するものの、定量的な考察はあまり見受けられず、「研究」という言葉の意味の齟齬を感じた(多分これは僕の考える「研究」があまりに狭義であるため)。\nしかしながら、それらの考え方の中には、確かにそうだな、と実感させられるものもあり、キャリアに対する態度を改める必要すら感じた。\n例えば、筆者が参加したエンジニアリング産業の社長会に参加した際、ある社長から耳にした言葉と、それに対する筆者の考えなどは、覚えておきたいと思った。\n「エンジニアリング産業の海外エンジのプロジェクトなんて、(中略)勘のいいバイタリティあふれる人なら、三十歳を超えるころには、だいたいプロジェクト・マネジメントができるようになる。そのあとは何箇所経験してもいっしょだ」\nこの発言は、キャリア・トランジション・サイクルというモデルの重要さを説くための例として用いられている。 このモデルは、ロンドンビジネススクールのナイジェル・ニコルソンにより提唱されたもので、\n新しい世界に入る準備段階 実際にその世界にはじめて入っていって、いろいろ新たなことに遭遇する段階 新しい世界に徐々に溶け込み順応していく段階 もうこの世界は新しいとはいえないほど慣れて、落ち着いていく安定化段階 の4段階からなる。筆者によれば、このサイクルを螺旋状に上昇させていくことが、キャリアを発達させるために必要なことであり、上述の社長のようなサイクルは、望ましくないのだという(もちろん筆者は、エンジニアリング産業を批判したいわけではない)。\n全体を通して、共感できないというか、納得できないというか、そういう記述もあり、それらはひとえに僕に社会人としての経験が不足していることによるものだと思う。 もしかすると、10年後くらいにもう一度読み直すことになるかもしれない。\n","permalink":"https://inody.github.io/posts/read-kanei/","summary":"筆者は終始「節目の期間はしっかりキャリアについて考える。それ以外の期間では目の前のことに打ち込み、時には偶然に流される(ドリフトする)ことも必要」という主張に徹する。 なので、この主張を真に理解している人は本書を手にする必要はないと思う。\n本書のメインターゲットは就活生とミドル世代の2種類である。 また本書では、これらの層を想定したいくつかのエピソードやエクササイズが紹介されていて、キャリアデザインを「自分の問題」として考えさせる工夫が凝らされている。\n個人的に、以下の自己イメージに関するエクササイズに考えさせられた。\n自分はなにが得意か。 自分はいったいなにをやりたいのか。 どのようなことをやっている自分なら、意味を感じ、社会の役に立っていると実感できるのか。 それぞれの問いは\n能力・才能についての自己イメージ 動機・欲求についての自己イメージ 意味・価値についての自己イメージ を照射しているという。キャリアを意識する上で、避けては通れない質問だと感じた。\nまた、筆者は本書のはじめに「研究に基づく見解」を披露すると述べており、個人的に「キャリアデザイン」という科学らしからぬ問題に対して、どのような研究が存在するかが興味をもった。 実際には、多数の論者の言葉や考え方を引用するものの、定量的な考察はあまり見受けられず、「研究」という言葉の意味の齟齬を感じた(多分これは僕の考える「研究」があまりに狭義であるため)。\nしかしながら、それらの考え方の中には、確かにそうだな、と実感させられるものもあり、キャリアに対する態度を改める必要すら感じた。\n例えば、筆者が参加したエンジニアリング産業の社長会に参加した際、ある社長から耳にした言葉と、それに対する筆者の考えなどは、覚えておきたいと思った。\n「エンジニアリング産業の海外エンジのプロジェクトなんて、(中略)勘のいいバイタリティあふれる人なら、三十歳を超えるころには、だいたいプロジェクト・マネジメントができるようになる。そのあとは何箇所経験してもいっしょだ」\nこの発言は、キャリア・トランジション・サイクルというモデルの重要さを説くための例として用いられている。 このモデルは、ロンドンビジネススクールのナイジェル・ニコルソンにより提唱されたもので、\n新しい世界に入る準備段階 実際にその世界にはじめて入っていって、いろいろ新たなことに遭遇する段階 新しい世界に徐々に溶け込み順応していく段階 もうこの世界は新しいとはいえないほど慣れて、落ち着いていく安定化段階 の4段階からなる。筆者によれば、このサイクルを螺旋状に上昇させていくことが、キャリアを発達させるために必要なことであり、上述の社長のようなサイクルは、望ましくないのだという(もちろん筆者は、エンジニアリング産業を批判したいわけではない)。\n全体を通して、共感できないというか、納得できないというか、そういう記述もあり、それらはひとえに僕に社会人としての経験が不足していることによるものだと思う。 もしかすると、10年後くらいにもう一度読み直すことになるかもしれない。","title":"金井壽宏『働くひとのためのキャリアデザイン(PHP新書)』感想"},{"content":"某有名投資家のおすすめ書籍として紹介されていたことをきっかけに読み始めた。\n株そのものに興味があるというよりも、日々ブログや経済ニュースで目にする用語を理解したかった。\n全体として初学者にもわかりやすく、経済学の知見とそれに基づく著者の意見が記述されている。\nただ、数学が苦手な人への配慮から、数式による説明をすべてスキップしており、意見の根拠となる知見の導出過程が具体的にわかりづらい。\nそのため、捻くれた読み方をすると「根拠の無い理論に踊らされることを警告しつつ、根拠の無い手法を提案する本」としてみなされかねない。 まあこの辺を言い出すと、経済学の教科書や学術論文以外の(またはこれらを含む)すべてを疑わなければならなくなり、きりがないのかもしれないけれど……\n数式による記述がないメリットとして、読み物としてとても読みやすく、(内容を無根拠に信じるという前提にたてば)投資に対する明快なアドバイスが書かれており、思わず実践してみたくなるほど興味深い。 また、確定拠出型年金に対するある種の最適戦略を与えており、就職後役立つ知識が得られたと思う。\n以前、新保の『金融商品とどうつき合うか―仕組みとリスク (岩波新書)』を読んだが、重複する箇所も多少あった。 比較的原理から説明してくれる本が『金融商品と〜』であり、より実践的なアドバイスが書かれているのが本書ということになると思う。\n","permalink":"https://inody.github.io/posts/read-tachibana/","summary":"某有名投資家のおすすめ書籍として紹介されていたことをきっかけに読み始めた。\n株そのものに興味があるというよりも、日々ブログや経済ニュースで目にする用語を理解したかった。\n全体として初学者にもわかりやすく、経済学の知見とそれに基づく著者の意見が記述されている。\nただ、数学が苦手な人への配慮から、数式による説明をすべてスキップしており、意見の根拠となる知見の導出過程が具体的にわかりづらい。\nそのため、捻くれた読み方をすると「根拠の無い理論に踊らされることを警告しつつ、根拠の無い手法を提案する本」としてみなされかねない。 まあこの辺を言い出すと、経済学の教科書や学術論文以外の(またはこれらを含む)すべてを疑わなければならなくなり、きりがないのかもしれないけれど……\n数式による記述がないメリットとして、読み物としてとても読みやすく、(内容を無根拠に信じるという前提にたてば)投資に対する明快なアドバイスが書かれており、思わず実践してみたくなるほど興味深い。 また、確定拠出型年金に対するある種の最適戦略を与えており、就職後役立つ知識が得られたと思う。\n以前、新保の『金融商品とどうつき合うか―仕組みとリスク (岩波新書)』を読んだが、重複する箇所も多少あった。 比較的原理から説明してくれる本が『金融商品と〜』であり、より実践的なアドバイスが書かれているのが本書ということになると思う。","title":"橘玲『臆病者のための株入門(PHP新書)』感想"},{"content":"##カルマンフィルタとは\n「離散時間システムの出力から、システムの状態を最小二乗の意味で推定する」\n##問題設定\n今回はもっとも簡単な線形時不変の方程式\n$ x(k+1)= A x(k) + Bu(k) + Gw(k)$\n$ y(k) = Cx(k) + v(k)$\nを考える。 ここで、$w(k),v(k)$はそれぞれ白色ガウスノイズであることを仮定し、その平均と共分散は\n$E[w(k)] = E[(v_k)] = 0$\n$E[w(k)w(k)^T] = Q, E[v(k)v(k)^T] = R$\nであるとする。$w(k)$と$v(k)$の間に相関はないものとする。\n初期値もガウスであるとし、その平均と分散は\n$E[x(0)] = \\bar x(0)$\n$E[(x(0)-\\bar x(0))(x(0)-\\bar x(0))^T] = \\Sigma_0$\nであるとする。\n今、時刻$k-1$までの入力${u(0),\\ldots,u(k-1)}$(以後$U_0^{k-1}$と表示)と時刻$k$までの出力${y(1),\\ldots,y(k)}$(以後$Y_1^{k}$と表示)がわかっているとする。\n###問題\n$\\hat x(k) = \\text{argmin} E[(x(k)-\\hat x(k))^T(x(k)-\\hat x(k))]$\nを満たす$\\hat x(k)$を求めよ。\n##アイデア\n上記の問題は、右辺を計算することで\n$\\hat x(k) = \\text{argmin} E[(x(k)-\\hat x(k))^T(x(k)-\\hat x(k)) | Y_1^k, U_0^{k-1}]$\nと書き換えられる。 これを更に変形していくと、\n$\\hat x(k) = E[x(k)|Y_1^k, U_0^{k-1}]$\nが得られる(あとで式を追加するかも)。\nここで、$x(k)$の条件付き期待値を計算するために、その条件付き確率分布が必要なわけだが、今与えられているノイズと初期値はすべてガウスであり、ダイナミクスも線形であるため、今後時間発展の中で登場する信号はすべてガウスである。\nこのため、$x(k)$の条件付き確率分布の平均と共分散だけを更新していけばよいことになる。\nすなわち、\n$\\hat x(k|k) = E[x(k)|Y_1^k, U_0^{k-1}]$\n$P(k|k) = E[(x(k)-\\hat x(k|k))(x(k)-\\hat x(k|k))^T |Y_1^k, U_0^{k-1}] $\nと表示することし、これらだけを追いかけていけば、自動的に$x(k)$の条件付き確率分布は\n$p(x(k) | Y_1^k, U_0^{k-1}) \\sim \\mathcal N(\\hat x(k|k), P(k|k))$\nとなり、状態推定ができるということである。\n##更新式\n準備として、初期値の平均と分散から、\n$\\hat x(0|-1) = \\bar x(0)$\n$P(0|-1) = \\Sigma_0$\nとしておく。\n$p(x(k) | Y_1^k, U_0^{k-1})$から$p(x(k+1) | Y_1^{k+1}, U_0^{k})$へと更新するために、大きく分けて2つのステップが必要である。\n###状態推定\nまず、$p(x(k) | Y_1^k, U_0^{k-1})$から$p(x(k+1) | Y_1^k, U_0^{k-1})$に更新する。\nここで\n$p(x(k+1) | Y_1^k, U_0^{k-1}) \\sim \\mathcal N(\\hat x(k+1|k), P(k+1|k))$\n$\\hat x(k+1|k) = E[x(k+1)|Y_1^k, U_0^{k-1}]$\n$P(k+1|k) = E[(x(k+1)-\\hat x(k+1|k))(x(k+1)-\\hat x(k+1|k))^T |Y_1^k, U_0^{k-1}] $\nである。 結論から先に言えば、システムのダイナミクスを考えることで\n$\\hat x(k+1|k) = Ax(k|k) + Bu(k)$\n$P(k+1|k) = AP(k|k)A^T + GQG$\nとすればよい(あとで式を追加)。\n###フィルタリング\nつぎに、観測出力$y(k+1)$の情報を用いて、$p(x(k+1) | Y_1^k, U_0^{k-1})$から$p(x(k+1) | Y_1^{k+1}, U_0^k)$へ更新する。\nここでも結論を先に言えば、\n$\\hat x(k+1|k+1) = \\hat x(k+1|k) + K(k+1) (y(k+1) - C\\hat x(k+1|k))$\n$P(k+1|k+1) = (I - K(k+1)C) P(k+1|k)$\nとすればよい。 ここで突如現れた$K$はカルマンゲインと呼ばれており、\n$K(k+1) = P(k+1|k) C (CP(k+1|k)C^T + R)^{-1}$\nと定める(あとで式を追加)。\n##まとめ\n説明を省いたところがもっとも大事なので、あとで追記したいと思います。\nそれが終わったらEKFやUKFのまとめもしてみたい。\n","permalink":"https://inody.github.io/posts/kalman-filter/","summary":"##カルマンフィルタとは\n「離散時間システムの出力から、システムの状態を最小二乗の意味で推定する」\n##問題設定\n今回はもっとも簡単な線形時不変の方程式\n$ x(k+1)= A x(k) + Bu(k) + Gw(k)$\n$ y(k) = Cx(k) + v(k)$\nを考える。 ここで、$w(k),v(k)$はそれぞれ白色ガウスノイズであることを仮定し、その平均と共分散は\n$E[w(k)] = E[(v_k)] = 0$\n$E[w(k)w(k)^T] = Q, E[v(k)v(k)^T] = R$\nであるとする。$w(k)$と$v(k)$の間に相関はないものとする。\n初期値もガウスであるとし、その平均と分散は\n$E[x(0)] = \\bar x(0)$\n$E[(x(0)-\\bar x(0))(x(0)-\\bar x(0))^T] = \\Sigma_0$\nであるとする。\n今、時刻$k-1$までの入力${u(0),\\ldots,u(k-1)}$(以後$U_0^{k-1}$と表示)と時刻$k$までの出力${y(1),\\ldots,y(k)}$(以後$Y_1^{k}$と表示)がわかっているとする。\n###問題\n$\\hat x(k) = \\text{argmin} E[(x(k)-\\hat x(k))^T(x(k)-\\hat x(k))]$\nを満たす$\\hat x(k)$を求めよ。\n##アイデア\n上記の問題は、右辺を計算することで\n$\\hat x(k) = \\text{argmin} E[(x(k)-\\hat x(k))^T(x(k)-\\hat x(k)) | Y_1^k, U_0^{k-1}]$\nと書き換えられる。 これを更に変形していくと、\n$\\hat x(k) = E[x(k)|Y_1^k, U_0^{k-1}]$","title":"カルマンフィルタの更新式まとめ"},{"content":"アイルランドに来て3日経ちました。 入国後まずはじめにしたことが、通信環境を整えること。 アイルランドには主にVodafone, Meteor, 3(Three)などのキャリア会社がありますが、今回はMeteorのSIMカードを購入しました。\n購入したのは月に15GBのデータ通信が使えるプランで、価格はなんと14.99€(日本円でおよそ2000円)。 ただしこちらは3Gの通信帯域のみでのプランです。 購入の際には、パスポートを提示したうえで、契約書にサインを求められます。 渡されたSIMを挿入し、付属のカードに書かれているPINコードを入力すれば、すぐに使うことが出来ました。 こちらはプリペイドタイプのSIMではなく、月ごとにカードを通して引き落としされる契約なので、解約の際にはショップに出向く必要があるそうです。\nまた、僕の場合は日本で購入してきたモバイルルータを使う都合、電話環境を整えられなかったのですが、必要な方には、3(Three)が提供している、月15GBのデータ通信に電話もかけ放題のプランをおすすめします。 こちらも価格は月に20€でとてもお買い得な上に、4G/LTEの帯域が使用可能です。 契約もプリペイドタイプなのでとても安心で、非の打ち所がありません。\nアイルランドのSIM事情についてはこちらのページが詳しいようです(ただし、今回僕が契約したプランはこちらのサイトには掲載されていませんでした)。 キャリアが提供するプランは結構日々変動するみたいなので、アイルランドに来られる際には、ぜひ最寄りのショップに立ち寄ってみることをおすすめします。\n","permalink":"https://inody.github.io/posts/sim-ireland/","summary":"アイルランドに来て3日経ちました。 入国後まずはじめにしたことが、通信環境を整えること。 アイルランドには主にVodafone, Meteor, 3(Three)などのキャリア会社がありますが、今回はMeteorのSIMカードを購入しました。\n購入したのは月に15GBのデータ通信が使えるプランで、価格はなんと14.99€(日本円でおよそ2000円)。 ただしこちらは3Gの通信帯域のみでのプランです。 購入の際には、パスポートを提示したうえで、契約書にサインを求められます。 渡されたSIMを挿入し、付属のカードに書かれているPINコードを入力すれば、すぐに使うことが出来ました。 こちらはプリペイドタイプのSIMではなく、月ごとにカードを通して引き落としされる契約なので、解約の際にはショップに出向く必要があるそうです。\nまた、僕の場合は日本で購入してきたモバイルルータを使う都合、電話環境を整えられなかったのですが、必要な方には、3(Three)が提供している、月15GBのデータ通信に電話もかけ放題のプランをおすすめします。 こちらも価格は月に20€でとてもお買い得な上に、4G/LTEの帯域が使用可能です。 契約もプリペイドタイプなのでとても安心で、非の打ち所がありません。\nアイルランドのSIM事情についてはこちらのページが詳しいようです(ただし、今回僕が契約したプランはこちらのサイトには掲載されていませんでした)。 キャリアが提供するプランは結構日々変動するみたいなので、アイルランドに来られる際には、ぜひ最寄りのショップに立ち寄ってみることをおすすめします。","title":"アイルランドのSIM事情"},{"content":"ヴルカヌス・イン・ヨーロッパに参加しますに記載したとおり、1年間の語学研修とインターンシップに参加してきます。 僕の場合は、4ヶ月間アイルランドのダブリンで英語の語学研修を、残る8ヶ月間ベルギーのルーヴェンで企業研修を行います。\nそもそもなぜこのようなプログラムに参加することになったのか。 海外への興味はもともとあったのですが、どちらかと言えば迫り来る就活時期を前に、自分がどんな分野で働きたいかが未だ見えず、焦っていたことが大きいように思います。\nもともと重工系の企業に関心があり、なんとなく参加した夏のインターンシップ。 そこで得た結論は、「仕事にやりがいを感じられないと働くことはかなりつらい」ということでした。 このことはほとんど自明な事実だとは思うのですが、自分はもともと「やりがいなんてなくていいからまったり働きたい」という人間だったため、この発見はとても大きかったです。\n一言添えておくと、参加したインターンの内容にやりがいが全くなかったわけではありません。 むしろ、自分の興味のど真ん中である大規模プラントを近くに感じられたのは本当によかった。\n違和感を覚えたのは、巨大なプラントの設計や保守に携わるためには、巨大な会社が巨大なプロジェクトを運営し、その中で文字通り組み込まれるように働かなければならなかったことです。 自分のフォーカスがあまりにも狭く、「もの」が見えづらい研修内容だったと感じます。\n他にも、大企業ならではの社風というか「しがらみ」というか、そういったものを意識せざるを得ませんでした。\nでは自分はどのように働きたいのか。 まず、プラントなどよりサイズの小さい「もの」を相手にする仕事が考えられます。そこで働けば相対的に自分のフォーカスが大きくなるんじゃないかという安直な発想です。 また、「超」のつく大企業は肌に合わないということも考えられます。ベンチャーで身を粉にして働くという感じではないので、その辺りはバランスだとは思います。\n何れにせよ、今はまだ評価関数も作れていないし、探索区間からスパースな情報しか得られていない状態です。 そうした状態で最適解を求めようとしても、解が存在しなかったり、ローカルミニマルに陥ってしまったりしまうでしょう。 目下の課題は、なるべくたくさんの情報を集めて、それらをもとに最適化問題を正しく立式するといった感覚でいます。問題さえ立ててしまえば、解も見えてくるはず(多分…)\nこの1年間はそのための準備期間として最大限活用したいと考えています。\nもちろんせっかく海外に行かせてもらえるのだし、苦手意識のある英語を得意分野に変えるのは、1年を気持ちよく終えるための必要条件だと考えます。\nまた、研修を通して、今まで身につけた制御工学の理論的な知識を、業務に応用できるよう成長できたらと思います。 もし少しでも手応えを感じたら、海外で働くことも一度は視野に入れてみたいです。\n正直いつまで学生でいるんだという周囲(特に家族)からの眼差しが気にならなくもないのですが、行くからには絶対成長して帰ってこようと思います。\n","permalink":"https://inody.github.io/posts/vine2/","summary":"ヴルカヌス・イン・ヨーロッパに参加しますに記載したとおり、1年間の語学研修とインターンシップに参加してきます。 僕の場合は、4ヶ月間アイルランドのダブリンで英語の語学研修を、残る8ヶ月間ベルギーのルーヴェンで企業研修を行います。\nそもそもなぜこのようなプログラムに参加することになったのか。 海外への興味はもともとあったのですが、どちらかと言えば迫り来る就活時期を前に、自分がどんな分野で働きたいかが未だ見えず、焦っていたことが大きいように思います。\nもともと重工系の企業に関心があり、なんとなく参加した夏のインターンシップ。 そこで得た結論は、「仕事にやりがいを感じられないと働くことはかなりつらい」ということでした。 このことはほとんど自明な事実だとは思うのですが、自分はもともと「やりがいなんてなくていいからまったり働きたい」という人間だったため、この発見はとても大きかったです。\n一言添えておくと、参加したインターンの内容にやりがいが全くなかったわけではありません。 むしろ、自分の興味のど真ん中である大規模プラントを近くに感じられたのは本当によかった。\n違和感を覚えたのは、巨大なプラントの設計や保守に携わるためには、巨大な会社が巨大なプロジェクトを運営し、その中で文字通り組み込まれるように働かなければならなかったことです。 自分のフォーカスがあまりにも狭く、「もの」が見えづらい研修内容だったと感じます。\n他にも、大企業ならではの社風というか「しがらみ」というか、そういったものを意識せざるを得ませんでした。\nでは自分はどのように働きたいのか。 まず、プラントなどよりサイズの小さい「もの」を相手にする仕事が考えられます。そこで働けば相対的に自分のフォーカスが大きくなるんじゃないかという安直な発想です。 また、「超」のつく大企業は肌に合わないということも考えられます。ベンチャーで身を粉にして働くという感じではないので、その辺りはバランスだとは思います。\n何れにせよ、今はまだ評価関数も作れていないし、探索区間からスパースな情報しか得られていない状態です。 そうした状態で最適解を求めようとしても、解が存在しなかったり、ローカルミニマルに陥ってしまったりしまうでしょう。 目下の課題は、なるべくたくさんの情報を集めて、それらをもとに最適化問題を正しく立式するといった感覚でいます。問題さえ立ててしまえば、解も見えてくるはず(多分…)\nこの1年間はそのための準備期間として最大限活用したいと考えています。\nもちろんせっかく海外に行かせてもらえるのだし、苦手意識のある英語を得意分野に変えるのは、1年を気持ちよく終えるための必要条件だと考えます。\nまた、研修を通して、今まで身につけた制御工学の理論的な知識を、業務に応用できるよう成長できたらと思います。 もし少しでも手応えを感じたら、海外で働くことも一度は視野に入れてみたいです。\n正直いつまで学生でいるんだという周囲(特に家族)からの眼差しが気にならなくもないのですが、行くからには絶対成長して帰ってこようと思います。","title":"ヴルカヌス・プログラム出発にあたって"},{"content":"感想 4月からヨーロッパで過ごすこともあり、ホットなタイトルだったのでジャケ買いして読み始めました。\n日々世間を騒がす報道について、理解のない自分でも前提知識なしで読むことが出来ました。\n2004年に書かれた本なので、今世間を騒がすイスラーム国の事件については触れられませんが、現在のイスラーム圏とヨーロッパ圏の衝突が、どのような背景のもと起こったものなのかを理解するのにいい本だと思います。\n著者が社会学畑出身なので、あまり(というかほぼ全く)定量的な議論は出てきません。 本人が「現実と人間とに焦点を当てて同時代の証言を集め、一歩引いて、それを俯瞰し再構築するのが私の方法である」とあとがきで述べている通り、取材したムスリム移民のエピソードがふんだんに載せられています。\nすらすらと読める一方で、読者としては、一例と一般的な事実との境はどこなのかを多少注意して読む必要があるかもしれません(そもそもこの手の話題を定量的に扱うこと自体が難しいのかもしれないけれど\u0026hellip;)\nあらすじとして以下にまとめましてみましたが、本書にはまだまだ有益なことが多く書かれており、是非人におすすめしたい本です。 title: \u0026ldquo;つぎは池内恵の『イスラーム国の衝撃(文春文庫)』を読みはじめています。\u0026rdquo; date: 2015-08-30T00:00:00+09:00 draft: false あらすじとメモ 著者は現代のヨーロッパ世界とイスラーム世界の衝突を、単なる「キリスト教対イスラーム教」という構図で説明できるものではないと否定する。 イスラームが意義を申し立てている相手は、宗教的規範から離れたあとに成立した西洋近代文明である。 西洋近代文明は、世俗主義、啓蒙主義の立場を取るため、宗教が政治や教育に関与することはないし、「人間が理性をもとに創り上げた法体系によって、現実の人間社会に規範を与える」。 しかしながらムスリムにとって規範とは、神が定めた法のことをいうので、これと根本的に対立する。\n筆者はヨーロッパの中でも、ドイツ、オランダ、フランスの三国を取り上げ、各国におけるイスラーム世界との交わりを考察する。 そもそも、日本は島国であるため、「日本人とは何か」を我々国民が日頃意識することは少ないが、ヨーロッパは地続きであるため、これを定義する姿勢は国により異なる。\nまずドイツであるが、「ドイツ人とはドイツ人の親から生まれた人間を指す」という血統主義的な民族観をもつ。これは2000年以降の外国人法で、ドイツで生まれた外国人も23歳満了までにドイツ国民として扱う方針に改められたが、依然として根底にはかつての価値観が横たわる。 特に、信仰実践に熱心なムスリムが、先進的なヨーロッパ社会や文化になかなか同化しないことは、国民の不安を煽った。\n筆者はムスリム女性がスカーフやヴェールを公的な場所で、特に公立学校で教師が、身につけることを禁じる決定に関する騒動を取り上げる。 この決定に賛同する主張者は「国家と宗教の分離」という原則論の裏に、複数の宗教、文化が混在することを承認したくないという拒絶を掲げている。\nそもそも彼女たちがスカーフやヴェールで自分を隠す理由は、イスラーム世界では「女性の髪は性的なもの」として人前で隠すよう求められているからだ(実際コーランには「汝の隠しどころを覆え」としか書かれていないが)。 よって彼女たちがスカーフを取れと命じられることは、セクシャル・ハラスメントにほかならない。 また「国家と宗教の分離」の原則を掲げるのであれば、キリスト教徒が掲げる十字架も着用禁止にすべきだ、とする主張もある。\nドイツが国家統一を果たしたのはイギリスやフランスより遅く、「ドイツをドイツたらしめる文化的な背骨のようなもの」に自信をもてないことなどが、排外的な民族主義を生み出す下地となったのかもしれないと、筆者は考察している。\nつぎにオランダであるが、「どこで生まれたか」によって国籍を与える、生地主義の立場をとる。 また、オランダにおけるリベラリズムとは、個人が生きたいように生きる権利を保証することを指す。 この国において、ムスリムはカトリックやプロテスタントと同じく、多分化主義に組み込まれている。\nでは、このような社会でムスリムへの批判が存在しうるのかというと、答えはイエスである。 「個人が生きたいように生きる」とは、裏を返せば「他人に干渉されない」ことを重視することであり、異質な文化をもつ人間が増えることで、自分たちの権利が脅かされることを懸念する。\n特に、テロを起こし、女性を抑圧し、ヨーロッパの普遍的価値を学ぼうとしない彼らに対して、オランダは「自分たちが築き上げた寛容の精神がイスラームの不寛容によって脅かされる」というレトリックを用いている。 オランダにおいてイスラーム組織に対する規制が強化されるのは時間の問題だと筆者は意見を述べている。\n最後にフランスであるが、フランス国民であることは、共和国の理念や原則を受け入れ、共和国と契約を結ぶことを意味する。 「自由・平等・博愛」のもと、移民への差別は悪とされるが、差別がないわけではもちろんなく、現実に起きる差別が個人の問題に帰されてしまう構造をもつ。\n移民にとってフランス人となる契約を結ぶためには、その意志を役所に申請し、フランス語でのやりとりをしなければならない。 フランスにとっての博愛は「万人を愛する」という意味をもたず、むしろ「同胞のみを愛する」という意味をもつ。異なる集団に対しては、愛するどころか敵視と排斥の目を向けることになる。\nこの国においても、スカーフ着用問題は起きており、おおよそドイツと同じ構造をもつが、中にはスカーフ禁止に賛成するムスリム女性もいる。 彼女たちはフランス社会の多数派と同じく、スカーフを女性抑圧のシンボルとみなしており、彼女たちがこのような立場を取るようになったのはフランスの教育によるところが大きい。\nしかしながら、一方で、高い教育を受けてなお、スカーフ着用を個人の自由意志の表明として実践する女性もおり、実態はそう単純ではない。\nこれらのスケッチを通じて筆者は、ドイツはもともと存在する外国人に対する排斥感情によって、オランダはイスラーム共同体の形成を促進してしまうシステムによって、そしてフランスは同化圧力によって、「文化的・社会的統合に失敗した」と断言している。\n最終章において、筆者は、今日のイスラーム・ヨーロッパ両圏の対立は、ヨーロッパ世界のイスラーム世界に対する誤認によるところが大きいと主張する。\nムスリムにとって商業における公正の観念と弱者救済は表裏一体の教えであり、苦しい境遇にある同胞は救済するために努力しなければならない。そのための行動は、彼らを取り巻く環境が悪化するにつれて、大きなものにならざるをえない。 本来、キリスト教やユダヤ教などの異教徒に対して敵意を抱かないどころが、同じ唯一神から啓示を受けた人間として、兄弟と考える彼らの中には、過激な行動をとるものも現れる。\n欧米世界は、このようなイスラーム世界に対して、彼らが公正とみなす政策を実現できないどころか、憎悪の連鎖のなかで「原理主義」というレッテルを作り出し、暴力に訴えて反撃するなと諭すには、あまりに理不尽な被害を与えてきた。\n両世界の関係を相克の時代から対話の時代へ転換させるためには、ヨーロッパ世界イスラーム世界の文明を理解し、自らの文明がもつ「社会的進歩の観念を無意識に他者に押し付ける力」を自覚する必要があると筆者は締めくくる。\n","permalink":"https://inody.github.io/posts/read-naito/","summary":"感想 4月からヨーロッパで過ごすこともあり、ホットなタイトルだったのでジャケ買いして読み始めました。\n日々世間を騒がす報道について、理解のない自分でも前提知識なしで読むことが出来ました。\n2004年に書かれた本なので、今世間を騒がすイスラーム国の事件については触れられませんが、現在のイスラーム圏とヨーロッパ圏の衝突が、どのような背景のもと起こったものなのかを理解するのにいい本だと思います。\n著者が社会学畑出身なので、あまり(というかほぼ全く)定量的な議論は出てきません。 本人が「現実と人間とに焦点を当てて同時代の証言を集め、一歩引いて、それを俯瞰し再構築するのが私の方法である」とあとがきで述べている通り、取材したムスリム移民のエピソードがふんだんに載せられています。\nすらすらと読める一方で、読者としては、一例と一般的な事実との境はどこなのかを多少注意して読む必要があるかもしれません(そもそもこの手の話題を定量的に扱うこと自体が難しいのかもしれないけれど\u0026hellip;)\nあらすじとして以下にまとめましてみましたが、本書にはまだまだ有益なことが多く書かれており、是非人におすすめしたい本です。 title: \u0026ldquo;つぎは池内恵の『イスラーム国の衝撃(文春文庫)』を読みはじめています。\u0026rdquo; date: 2015-08-30T00:00:00+09:00 draft: false あらすじとメモ 著者は現代のヨーロッパ世界とイスラーム世界の衝突を、単なる「キリスト教対イスラーム教」という構図で説明できるものではないと否定する。 イスラームが意義を申し立てている相手は、宗教的規範から離れたあとに成立した西洋近代文明である。 西洋近代文明は、世俗主義、啓蒙主義の立場を取るため、宗教が政治や教育に関与することはないし、「人間が理性をもとに創り上げた法体系によって、現実の人間社会に規範を与える」。 しかしながらムスリムにとって規範とは、神が定めた法のことをいうので、これと根本的に対立する。\n筆者はヨーロッパの中でも、ドイツ、オランダ、フランスの三国を取り上げ、各国におけるイスラーム世界との交わりを考察する。 そもそも、日本は島国であるため、「日本人とは何か」を我々国民が日頃意識することは少ないが、ヨーロッパは地続きであるため、これを定義する姿勢は国により異なる。\nまずドイツであるが、「ドイツ人とはドイツ人の親から生まれた人間を指す」という血統主義的な民族観をもつ。これは2000年以降の外国人法で、ドイツで生まれた外国人も23歳満了までにドイツ国民として扱う方針に改められたが、依然として根底にはかつての価値観が横たわる。 特に、信仰実践に熱心なムスリムが、先進的なヨーロッパ社会や文化になかなか同化しないことは、国民の不安を煽った。\n筆者はムスリム女性がスカーフやヴェールを公的な場所で、特に公立学校で教師が、身につけることを禁じる決定に関する騒動を取り上げる。 この決定に賛同する主張者は「国家と宗教の分離」という原則論の裏に、複数の宗教、文化が混在することを承認したくないという拒絶を掲げている。\nそもそも彼女たちがスカーフやヴェールで自分を隠す理由は、イスラーム世界では「女性の髪は性的なもの」として人前で隠すよう求められているからだ(実際コーランには「汝の隠しどころを覆え」としか書かれていないが)。 よって彼女たちがスカーフを取れと命じられることは、セクシャル・ハラスメントにほかならない。 また「国家と宗教の分離」の原則を掲げるのであれば、キリスト教徒が掲げる十字架も着用禁止にすべきだ、とする主張もある。\nドイツが国家統一を果たしたのはイギリスやフランスより遅く、「ドイツをドイツたらしめる文化的な背骨のようなもの」に自信をもてないことなどが、排外的な民族主義を生み出す下地となったのかもしれないと、筆者は考察している。\nつぎにオランダであるが、「どこで生まれたか」によって国籍を与える、生地主義の立場をとる。 また、オランダにおけるリベラリズムとは、個人が生きたいように生きる権利を保証することを指す。 この国において、ムスリムはカトリックやプロテスタントと同じく、多分化主義に組み込まれている。\nでは、このような社会でムスリムへの批判が存在しうるのかというと、答えはイエスである。 「個人が生きたいように生きる」とは、裏を返せば「他人に干渉されない」ことを重視することであり、異質な文化をもつ人間が増えることで、自分たちの権利が脅かされることを懸念する。\n特に、テロを起こし、女性を抑圧し、ヨーロッパの普遍的価値を学ぼうとしない彼らに対して、オランダは「自分たちが築き上げた寛容の精神がイスラームの不寛容によって脅かされる」というレトリックを用いている。 オランダにおいてイスラーム組織に対する規制が強化されるのは時間の問題だと筆者は意見を述べている。\n最後にフランスであるが、フランス国民であることは、共和国の理念や原則を受け入れ、共和国と契約を結ぶことを意味する。 「自由・平等・博愛」のもと、移民への差別は悪とされるが、差別がないわけではもちろんなく、現実に起きる差別が個人の問題に帰されてしまう構造をもつ。\n移民にとってフランス人となる契約を結ぶためには、その意志を役所に申請し、フランス語でのやりとりをしなければならない。 フランスにとっての博愛は「万人を愛する」という意味をもたず、むしろ「同胞のみを愛する」という意味をもつ。異なる集団に対しては、愛するどころか敵視と排斥の目を向けることになる。\nこの国においても、スカーフ着用問題は起きており、おおよそドイツと同じ構造をもつが、中にはスカーフ禁止に賛成するムスリム女性もいる。 彼女たちはフランス社会の多数派と同じく、スカーフを女性抑圧のシンボルとみなしており、彼女たちがこのような立場を取るようになったのはフランスの教育によるところが大きい。\nしかしながら、一方で、高い教育を受けてなお、スカーフ着用を個人の自由意志の表明として実践する女性もおり、実態はそう単純ではない。\nこれらのスケッチを通じて筆者は、ドイツはもともと存在する外国人に対する排斥感情によって、オランダはイスラーム共同体の形成を促進してしまうシステムによって、そしてフランスは同化圧力によって、「文化的・社会的統合に失敗した」と断言している。\n最終章において、筆者は、今日のイスラーム・ヨーロッパ両圏の対立は、ヨーロッパ世界のイスラーム世界に対する誤認によるところが大きいと主張する。\nムスリムにとって商業における公正の観念と弱者救済は表裏一体の教えであり、苦しい境遇にある同胞は救済するために努力しなければならない。そのための行動は、彼らを取り巻く環境が悪化するにつれて、大きなものにならざるをえない。 本来、キリスト教やユダヤ教などの異教徒に対して敵意を抱かないどころが、同じ唯一神から啓示を受けた人間として、兄弟と考える彼らの中には、過激な行動をとるものも現れる。\n欧米世界は、このようなイスラーム世界に対して、彼らが公正とみなす政策を実現できないどころか、憎悪の連鎖のなかで「原理主義」というレッテルを作り出し、暴力に訴えて反撃するなと諭すには、あまりに理不尽な被害を与えてきた。\n両世界の関係を相克の時代から対話の時代へ転換させるためには、ヨーロッパ世界イスラーム世界の文明を理解し、自らの文明がもつ「社会的進歩の観念を無意識に他者に押し付ける力」を自覚する必要があると筆者は締めくくる。","title":"内藤正典著『ヨーロッパとイスラーム 共生は可能か(岩波新書)』を読みました"},{"content":"感想とメモ 少し旬が過ぎてしまったが、4月からユーロ圏で過ごすこともあり、通読した。 気まぐれに、得られた知識をメモしておきたいと思う。\n第I章では、ユーロ導入でどのような効果があったのかを概観する、\nユーロが主として物価安定と低金利化をもたらしたことがデータをもとに示されており、本章を立ち読みするだけでも得るものがあると思う。\n個人的に、第II章の統一通貨導入までのいきさつについての記述がよくまとめられていると思った。\n大いに語弊があると思うが、まとめられた記述を更に自分なりに要約してみた(引用ではない)：\n1970年の『ウェルナー報告』に始まる通貨統合の試みは、各国の経済安定への懸念や、権限の委譲の方法の不明瞭度から、一時破綻した。 特に、当時、物価安定重視・貿易黒字だった西ドイツと、経済成長重視・貿易赤字だったフランスとの間には、経済政策路線に大きな隔たりがあり、各国が変動相場制に移行したことで、その隔たりはさらに大きくなった。\n変動相場制の導入で欧州各国で経済が不安定化するなか、ドイツ・フランスの両国は1978年に『EMS設立会議』をスタートさせる。 フランスでは完全雇用政策を犠牲にする必要が生じ、失業率が上昇したが、シュミット大統領の手腕でこれを切り抜けた。 また、ドイツでは、厳しくなる一方の外部環境(アメリカドルの大変動など)に対して、マルクをEMSの基軸通貨として確立し、ユーロ導入への道を開いた。\nその後EMSが安定度を高めたことと、ヨーロッパがアメリカ・日本に比べて経済的に劣位になっていたことが要因で、単一市場完成への機運が高まった。 1987年の単一欧州議定書発効を機に、統合への動きは加速した。 当時の西ドイツでは、安定したマルクを放棄することへの懸念が大きかったが、EMSの金融政策を支配するこの国に対して、フランスを初め、各国は批判的だった。 1989年、東西ドイツが統一へ動いたが、EC各国ではドイツの独り歩きが「再び」始まるのではないかという不安が広まった。 各国はドイツの統合に反対し、ドイツはマルクを放棄するという条件のもとでの統一の道を提示、各国はこれを飲んだ。 当時のコール首相は「欧州統合は平和か戦争かの問題だ」と繰り返し、世論を押し切ったのである。\n第III章では、ユーロの仕組みと役割、制度についての解説がなされている。\n欧州中央銀行と各国中央銀行との関係や、金融政策、市場介入などの仕組みなどが述べられていた。 初学者の自分には、初めて知ることばかりであり、また、多少難解に感じた箇所もあることから、何度か読みなおす必要を感じた章である。\n第IV章、第V章では、世界金融危機を主に欧州の視点から概観している。\n筆者によれば、世界金融危機は3段階に分けられる。\nバリバ・ショックからリーマン・ショックまでの米欧危機段階 リーマン・ショックから09年代までのグローバル恐慌危機段階 09年代からの不況段階 現在ニュースで目にするギリシャ危機や南欧危機は第3段階目にあたり、未だに収束していない。\nギリシャ危機の特徴について2行でまとめると\nサブプライム危機など：アメリカで起きた危機。いわば対岸の火事。EUの各国への融資をはじめとする対策によってなんとか切り抜け、ユーロの求心力は高まる ギリシャ危機：ユーロ圏内で起きた危機。ユーロ圏の抱える制度的・構造的な問題が浮き彫りとなる という感じになると思う。\n以下IV,V章で印象に残った箇所の引用：\n(p150)\n経常収支の大幅赤字、外国銀行からの巨額の借入、外貨依存という三つの点で、中・東欧諸国のん状況は九七年の東アジア通貨危機の諸国（タイや韓国など）に似ている。 にもかかわらず銀行危機が起きていないのは、西欧の銀行支配のおかげであり、東アジアのように脆弱な金融システムではなかった点が大きい\n(p166,167)\n南欧支援の巨額の安定化策が最終決定したのは五月九日夜であった。 (中略) すなわち、七五〇〇億ユーロという膨大な額の金融安定化メカニズムを創設するもので、うち最大五〇〇〇億ユーロをユーロ圏諸国と欧州委員会が分担、さらにIMFが最大二五〇〇億ユーロを共同支援する。 (中略) なぜ七五〇〇億ユーロ、九〇兆円もの莫大な学になったのだろうか。それはユーロ圏諸国の危機感の裏返しといえる。 ユーロはユーロ圏諸国にとって「後戻りできない壮大な実験」である。 市場からのユーロの信認をつなぎ止めるのはいわば「至上命題」であった\n全体を通して、僕のような完全な初学者ではフォローできない箇所が目立った。 テクニカルタームへの理解が足りず、金融論に関する知識をもっと増やす必要を感じた。 以前読んだ、新保恵志著『金融商品とどうつき合うか―仕組みとリスク (岩波新書)』で得た知識は少なからず読解に役立ったと思うので、こちらも読み直したい。\n感想を書いてみての感想 普段本を読んだ後何もアクションすることがないので、得られた知識が3日と保たないことが多いが、こうしてまとめてみることで、知識が整理される気がする。\nこれからも続けていきたいが、義務化してしまうと本を読む気が失せる危険があるので、あくまで気まぐれに続けていきたい。\n","permalink":"https://inody.github.io/posts/read-tanaka/","summary":"感想とメモ 少し旬が過ぎてしまったが、4月からユーロ圏で過ごすこともあり、通読した。 気まぐれに、得られた知識をメモしておきたいと思う。\n第I章では、ユーロ導入でどのような効果があったのかを概観する、\nユーロが主として物価安定と低金利化をもたらしたことがデータをもとに示されており、本章を立ち読みするだけでも得るものがあると思う。\n個人的に、第II章の統一通貨導入までのいきさつについての記述がよくまとめられていると思った。\n大いに語弊があると思うが、まとめられた記述を更に自分なりに要約してみた(引用ではない)：\n1970年の『ウェルナー報告』に始まる通貨統合の試みは、各国の経済安定への懸念や、権限の委譲の方法の不明瞭度から、一時破綻した。 特に、当時、物価安定重視・貿易黒字だった西ドイツと、経済成長重視・貿易赤字だったフランスとの間には、経済政策路線に大きな隔たりがあり、各国が変動相場制に移行したことで、その隔たりはさらに大きくなった。\n変動相場制の導入で欧州各国で経済が不安定化するなか、ドイツ・フランスの両国は1978年に『EMS設立会議』をスタートさせる。 フランスでは完全雇用政策を犠牲にする必要が生じ、失業率が上昇したが、シュミット大統領の手腕でこれを切り抜けた。 また、ドイツでは、厳しくなる一方の外部環境(アメリカドルの大変動など)に対して、マルクをEMSの基軸通貨として確立し、ユーロ導入への道を開いた。\nその後EMSが安定度を高めたことと、ヨーロッパがアメリカ・日本に比べて経済的に劣位になっていたことが要因で、単一市場完成への機運が高まった。 1987年の単一欧州議定書発効を機に、統合への動きは加速した。 当時の西ドイツでは、安定したマルクを放棄することへの懸念が大きかったが、EMSの金融政策を支配するこの国に対して、フランスを初め、各国は批判的だった。 1989年、東西ドイツが統一へ動いたが、EC各国ではドイツの独り歩きが「再び」始まるのではないかという不安が広まった。 各国はドイツの統合に反対し、ドイツはマルクを放棄するという条件のもとでの統一の道を提示、各国はこれを飲んだ。 当時のコール首相は「欧州統合は平和か戦争かの問題だ」と繰り返し、世論を押し切ったのである。\n第III章では、ユーロの仕組みと役割、制度についての解説がなされている。\n欧州中央銀行と各国中央銀行との関係や、金融政策、市場介入などの仕組みなどが述べられていた。 初学者の自分には、初めて知ることばかりであり、また、多少難解に感じた箇所もあることから、何度か読みなおす必要を感じた章である。\n第IV章、第V章では、世界金融危機を主に欧州の視点から概観している。\n筆者によれば、世界金融危機は3段階に分けられる。\nバリバ・ショックからリーマン・ショックまでの米欧危機段階 リーマン・ショックから09年代までのグローバル恐慌危機段階 09年代からの不況段階 現在ニュースで目にするギリシャ危機や南欧危機は第3段階目にあたり、未だに収束していない。\nギリシャ危機の特徴について2行でまとめると\nサブプライム危機など：アメリカで起きた危機。いわば対岸の火事。EUの各国への融資をはじめとする対策によってなんとか切り抜け、ユーロの求心力は高まる ギリシャ危機：ユーロ圏内で起きた危機。ユーロ圏の抱える制度的・構造的な問題が浮き彫りとなる という感じになると思う。\n以下IV,V章で印象に残った箇所の引用：\n(p150)\n経常収支の大幅赤字、外国銀行からの巨額の借入、外貨依存という三つの点で、中・東欧諸国のん状況は九七年の東アジア通貨危機の諸国（タイや韓国など）に似ている。 にもかかわらず銀行危機が起きていないのは、西欧の銀行支配のおかげであり、東アジアのように脆弱な金融システムではなかった点が大きい\n(p166,167)\n南欧支援の巨額の安定化策が最終決定したのは五月九日夜であった。 (中略) すなわち、七五〇〇億ユーロという膨大な額の金融安定化メカニズムを創設するもので、うち最大五〇〇〇億ユーロをユーロ圏諸国と欧州委員会が分担、さらにIMFが最大二五〇〇億ユーロを共同支援する。 (中略) なぜ七五〇〇億ユーロ、九〇兆円もの莫大な学になったのだろうか。それはユーロ圏諸国の危機感の裏返しといえる。 ユーロはユーロ圏諸国にとって「後戻りできない壮大な実験」である。 市場からのユーロの信認をつなぎ止めるのはいわば「至上命題」であった\n全体を通して、僕のような完全な初学者ではフォローできない箇所が目立った。 テクニカルタームへの理解が足りず、金融論に関する知識をもっと増やす必要を感じた。 以前読んだ、新保恵志著『金融商品とどうつき合うか―仕組みとリスク (岩波新書)』で得た知識は少なからず読解に役立ったと思うので、こちらも読み直したい。\n感想を書いてみての感想 普段本を読んだ後何もアクションすることがないので、得られた知識が3日と保たないことが多いが、こうしてまとめてみることで、知識が整理される気がする。\nこれからも続けていきたいが、義務化してしまうと本を読む気が失せる危険があるので、あくまで気まぐれに続けていきたい。","title":"田中素香『ユーロ 危機の中の統一通貨 (岩波新書)』を読みました"},{"content":"概要 最近学んだ線形回帰手法の特徴についてまとめる．\n具体的には，特定のデータセットに対して，重回帰(Ordinary Least Squares: OLS)，リッジ回帰(Ridge Regression: RR)，部分最小自乗回帰(Partial Least Squares: PLS)の3つの線形回帰手法を適用し，結果を考察する．\n重回帰 説明変数$ X$および目的変数$ y$が与えられているとき，\n$ y = X b + e$\nのように，目的変数が説明変数と回帰係数$ b$との線形結合によって表されているとするのが，線形回帰の考え方である．\nここで，重回帰においては，残差$ e$の二乗和\n$Q = e^T e$\nが最小となるように回帰係数を決定する． 残差二乗和が最小となるときの回帰係数は\n$ b = ( X^T X)^{-1} X^T y$\nとして与えられることが知られている．\nリッジ回帰 重回帰では，$ X^T X$が逆行列を持たない場合，残差二乗和を最小化できない． これは，説明変数が線形従属である場合や，サンプル数が入力変数の数より少ない場合に対応する． また，説明変数が厳密に線形従属でなくても，変数間に強い相関がある場合には，回帰係数の分散が大きくなり，推定結果の信頼性が低下してしまう問題が起きる． これを，多重共線性の問題という．\n回帰係数を小さく抑えるためのひとつの手法として，リッジ回帰が挙げられる． リッジ回帰においては，残差の二乗和に加えて，回帰係数の二乗和を加えた\n$Q\u0026rsquo; = e^T e + \\lambda b^T b$\nが最小となるよう，回帰係数を決定する．ここで，$\\lambda\\ge0$を複雑度パラメータと呼ぶ． 残差二乗和が最小となるときの回帰係数は\n$ b = ( X^T X + \\lambda I)^{-1} X^T y$\nとして求められる．\n部分最小二乗回帰 部分最小二乗回帰では，潜在変数と呼ばれる新たな変数を導入することで，説明変数と目的変数を関連付ける． 具体的には，説明変数の線形結合によって潜在変数をつくり，潜在変数の線形結合によって目的変数を記述する． ここで，潜在変数は，目的変数との共分散が最大となるように決定される． このことは，主成分分析(Principal Component Analysis, PCA)において，主成分が分散を最大化する方向に決定されることとよく似ており，このことから，部分最小二乗回帰は多重共線性に対してロバストな手法であると言われている．\n部分最小二乗回帰において，潜在変数を$ T$とすると\n$ X = T P^T + \\epsilon$\n$ \\ y = T q + e $\nとして表される．\n回帰係数を決定するアルゴリズムのひとつに，つぎのNIPALSアルゴリズムがある．\n(1) $ X_0 = X, y_0 = Y$\n(2) FOR $i = 0,\u0026hellip;,N-1$\n(2.1)$ w_i = \\frac{ X^T_i y_i}{| X^T_i y_i |}$\n(2.2)$ t_i = X_i w_i$\n(2.3)$ p_i = \\frac{ X^T_i t_i}{| t_i|^2}, q_i = \\frac{ y^T_i t_i}{| t_i|^2}$\n(2.4)$ X_{i+1} = X_{i} - t_i p_i^T, y_{i+1} = y_{i} - t_iq_i$\nNIPALSアルゴリズムにおいて，$w_i$ は目的変数と潜在変数との共分散を最大化する重みであり，ここから計算された潜在変数$ t_i$を用いて 各変数をデフレーションしていく．\n数値例 今回，統計解析ソフトRのfarawayパッケージに付属するデータmeatspecに対して，それぞれの回帰手法で交差検証を行った．\nmeatspecはある食品の脂肪分fatと100個のスペクトルデータからなっており，それぞれを目的変数と説明変数として回帰した． 交差検証にあたっては，215個のサンプルデータのうち，115個をモデル構築用データ，残る100個をテストデータとして用いた． リッジ回帰において，複雑度パラメータは$0.1$とした． また，部分最小二乗回帰において，潜在変数の数は$10$とした．\n重回帰 リッジ回帰 部分最小二乗回帰 308.9011 63.4491 30.9327 それぞれの手法を用いた時の推定値の二乗誤差和を表に示す． 部分最小二乗回帰，リッジ回帰，重回帰の順に，よい精度の推定値が得られていることがわかる．\n結論 データに対して線形回帰を行う場合，説明変数の多重共線性を考慮する必要があることが分かった． とはいえ，用いるデータの多重共線性が問題となるかは，回帰を行わないとわからないので，実際にはいくつかの手法での解析を行い，最も精度良くモデルを構築できている手法を採用するのがよいと思われる．\n","permalink":"https://inody.github.io/posts/linear-regression/","summary":"概要 最近学んだ線形回帰手法の特徴についてまとめる．\n具体的には，特定のデータセットに対して，重回帰(Ordinary Least Squares: OLS)，リッジ回帰(Ridge Regression: RR)，部分最小自乗回帰(Partial Least Squares: PLS)の3つの線形回帰手法を適用し，結果を考察する．\n重回帰 説明変数$ X$および目的変数$ y$が与えられているとき，\n$ y = X b + e$\nのように，目的変数が説明変数と回帰係数$ b$との線形結合によって表されているとするのが，線形回帰の考え方である．\nここで，重回帰においては，残差$ e$の二乗和\n$Q = e^T e$\nが最小となるように回帰係数を決定する． 残差二乗和が最小となるときの回帰係数は\n$ b = ( X^T X)^{-1} X^T y$\nとして与えられることが知られている．\nリッジ回帰 重回帰では，$ X^T X$が逆行列を持たない場合，残差二乗和を最小化できない． これは，説明変数が線形従属である場合や，サンプル数が入力変数の数より少ない場合に対応する． また，説明変数が厳密に線形従属でなくても，変数間に強い相関がある場合には，回帰係数の分散が大きくなり，推定結果の信頼性が低下してしまう問題が起きる． これを，多重共線性の問題という．\n回帰係数を小さく抑えるためのひとつの手法として，リッジ回帰が挙げられる． リッジ回帰においては，残差の二乗和に加えて，回帰係数の二乗和を加えた\n$Q\u0026rsquo; = e^T e + \\lambda b^T b$\nが最小となるよう，回帰係数を決定する．ここで，$\\lambda\\ge0$を複雑度パラメータと呼ぶ． 残差二乗和が最小となるときの回帰係数は\n$ b = ( X^T X + \\lambda I)^{-1} X^T y$","title":"線形回帰手法まとめ"},{"content":"概要 モンテカルロ法で次元の呪いを体験するを読んで，自分も最近似たような体験をしたことを思い出したので，メモしておく．\n問題 $N$行$N$列の行列の各要素に$1$から$N$までの数字が入っているものとする． 各列，各行に数字の重複を許さない行列は全部で何通りあるかを推定せよ．\nはじめ，ランダムに$1$から$N$までの数字を格納した2次元配列を用意して，各行と列に重複がないかチェックし，重複がない試行の確率を求める方法をとった．以下，作成したPythonのコード(クソコードなのはご愛嬌)．\n#! /usr/bin/env python # -*- coding: utf-8 -*- from numpy.random import * def check_overlap(args): for i in range(len(args)): if len(set(args[:,i])) \u0026lt; len(args[:,i]) or len(set(args[i,:])) \u0026lt; len(args[ i,:]): return False return True if __name__ == '__main__': N=4\t#size of matrix M=100000000\t#number of trial randarray = randint(1,N+1,(N,N,M)) count=0 for i in range(M): if check_overlap(randarray[:,:,i])==True: count = count+1 if i%100000==0: print(M-i,count) print( N**(N*N) * count / M ) この方法では，$N=4$あたりで現実的な解が得られなくなってしまった．\nより計算時間を減らすために，$1$から$N$までが格納された1次元配列の要素をランダムにシャッフルし，それを$N$個積み重ねることで，重複をチェックする方向を一方向だけにする方法をとった．\n#! /usr/bin/env python # -*- coding: utf-8 -*- import numpy as np import math def shuffle_array(args): for i in range(len(args)): np.random.shuffle(args[i,:]) def check_overlap(args): for i in range(len(args)): if len(set(args[:,i])) \u0026lt; len(args[:,i]): return False return True if __name__ == '__main__': N=6 M=100000000 count=0 array = np.zeros([N,N]) for i in range(N): array[i,:] = np.arange(N)+1 for i in range(M): if i%10000==0: print(M-i,count) shuffle_array(array) if check_overlap(array)==True: count = count+1 print( math.factorial(N)**N * count / M ) こちらの方法では，$N=6$あたりまでであれば，時間をかければそれらしい解が得られるようになった．\nしかし，依然として次元の呪いを回避出来たわけではない．\n結論 誰かもっといい方法を教えて下さい．\n","permalink":"https://inody.github.io/posts/monte-carlo/","summary":"概要 モンテカルロ法で次元の呪いを体験するを読んで，自分も最近似たような体験をしたことを思い出したので，メモしておく．\n問題 $N$行$N$列の行列の各要素に$1$から$N$までの数字が入っているものとする． 各列，各行に数字の重複を許さない行列は全部で何通りあるかを推定せよ．\nはじめ，ランダムに$1$から$N$までの数字を格納した2次元配列を用意して，各行と列に重複がないかチェックし，重複がない試行の確率を求める方法をとった．以下，作成したPythonのコード(クソコードなのはご愛嬌)．\n#! /usr/bin/env python # -*- coding: utf-8 -*- from numpy.random import * def check_overlap(args): for i in range(len(args)): if len(set(args[:,i])) \u0026lt; len(args[:,i]) or len(set(args[i,:])) \u0026lt; len(args[ i,:]): return False return True if __name__ == '__main__': N=4\t#size of matrix M=100000000\t#number of trial randarray = randint(1,N+1,(N,N,M)) count=0 for i in range(M): if check_overlap(randarray[:,:,i])==True: count = count+1 if i%100000==0: print(M-i,count) print( N**(N*N) * count / M ) この方法では，$N=4$あたりで現実的な解が得られなくなってしまった．","title":"モンテカルロ法で次元の呪い"},{"content":"概要 本格的就活シーズンの到来に先駆け，少し古い話になるが，今年の夏に三菱重工のインターンに参加したことについて備忘録を残す． おそらく社外秘につき触れてはいけない点が多々あるため，特に技術的な点については触れないことにする．\nなぜ三菱重工なのか 僕は制御工学を研究している． 制御工学は，対象が特定の形式でモデル化されていれば，（そのスケールに関わらず）それが制御可能であるか，可能であればどうすれば制御できるか，などをある程度体系的に取り扱う事ができる． 僕はこの分野横断的な要素に惹かれており，制御工学がどの程度大きな対象に対象にまで応用されているかに興味をもっていた． 重工系の企業を選んだのはこれが理由． そのなかで，三菱重工を選んだのは，単に自分のなかでもっとも有名な企業だったためと言ってしまってよい．\nあとはざっくりと社会人ってどういう感じなのか知りたかった．\n研修内容 2週間，原子力発電所の運転訓練用シミュレータの保守作業にかかわらせてもらった． 原子力プラントの運転には高度な技術が必要であり，実際の発電所の近くには，訓練のための実機そっくりのプラントシミュレータが設置されている． シミュレータは，（制御的視点からみれば）プラント部とコントローラ部からなっている． プラントの動特性はある程度数理的にモデル化されており，また，コントローラは実際に用いられているロジックを移植することで構成されていた． 僕が携わったのは，制御器のなかの一部のロジックの変更作業．\n所感 #社会にでることについて まず感じたことは，「社会人思ったより大変」ということ．\n具体的には，毎日早起きして，満員電車に乗って，一日同じ机の上で作業し，夜に帰宅し，つぎの日を迎えるというサイクルははじめ地獄のように思えた． 天下に名を轟かせる大企業ですら，毎日朝から晩まで仕事しなくちゃいけないんだという考えてみたら当たり前の事実が，当時の僕を驚かせた． 裏を返せば，もっと待遇の悪い（残業漬け，土日出社など）会社なんてごまんとあるはずで，この辺は自分が順応していくしかないと思った．\nまた，自分を苦しめた要因の一つが「サイクルの単調さ」にあったように思うので，就職するうえではある程度刺激的で流動的な仕事ができたらいいと感じた． 一方で安定を求めているのも確かで，バランスを考えていく必要を感じた．\n#学校で学んだこととの関わりについて 原子力にはさほど興味がなかったが，巨大さの象徴でもある発電プラントのなかで，制御工学がどの程度関わっているかということを知ることができた． 「じゃあどの程度か」と訊かれたら「ほんの一部」という答えになる． この辺をあまり詳しく書くと怒られるかもしれないが，大学院で学ぶ高度な制御理論は殆ど登場せず，はじめ少しがっかりした．\nしかしながら，配属先の部長さんの話を聞くうちに，目から鱗が落ちていくような気がした． というのも，彼は学生のとき僕と同じく理論ベースの制御を研究し，就職時に学問と実際とのギャップに落胆したとのこと． けれども，業務を通じて，「自分の専門」への固執が，ある意味で世界を狭めていたことに気づき，以後より広い目線を獲得していくことにつながった，という趣旨の話をしてくださった．\nこのエピソード以外にも，貴重な時間を割いてたくさん含蓄ある話を聞かせてもらい，少し大袈裟かもしれないが「この人の下でなら仕事をしたい」と思えるくらい，魅力を感じた．\n12月現在，自分の研究に対しての素養が十分でないとわかりつつある今，就職は人で決めたいと思う理由のひとつになっている．\n今後どうするか インターンで得る情報がかなり有益であることに気づいたので，できれば別の会社を訪問し，比較検討したいと考えている．\n","permalink":"https://inody.github.io/posts/intern-mhi/","summary":"概要 本格的就活シーズンの到来に先駆け，少し古い話になるが，今年の夏に三菱重工のインターンに参加したことについて備忘録を残す． おそらく社外秘につき触れてはいけない点が多々あるため，特に技術的な点については触れないことにする．\nなぜ三菱重工なのか 僕は制御工学を研究している． 制御工学は，対象が特定の形式でモデル化されていれば，（そのスケールに関わらず）それが制御可能であるか，可能であればどうすれば制御できるか，などをある程度体系的に取り扱う事ができる． 僕はこの分野横断的な要素に惹かれており，制御工学がどの程度大きな対象に対象にまで応用されているかに興味をもっていた． 重工系の企業を選んだのはこれが理由． そのなかで，三菱重工を選んだのは，単に自分のなかでもっとも有名な企業だったためと言ってしまってよい．\nあとはざっくりと社会人ってどういう感じなのか知りたかった．\n研修内容 2週間，原子力発電所の運転訓練用シミュレータの保守作業にかかわらせてもらった． 原子力プラントの運転には高度な技術が必要であり，実際の発電所の近くには，訓練のための実機そっくりのプラントシミュレータが設置されている． シミュレータは，（制御的視点からみれば）プラント部とコントローラ部からなっている． プラントの動特性はある程度数理的にモデル化されており，また，コントローラは実際に用いられているロジックを移植することで構成されていた． 僕が携わったのは，制御器のなかの一部のロジックの変更作業．\n所感 #社会にでることについて まず感じたことは，「社会人思ったより大変」ということ．\n具体的には，毎日早起きして，満員電車に乗って，一日同じ机の上で作業し，夜に帰宅し，つぎの日を迎えるというサイクルははじめ地獄のように思えた． 天下に名を轟かせる大企業ですら，毎日朝から晩まで仕事しなくちゃいけないんだという考えてみたら当たり前の事実が，当時の僕を驚かせた． 裏を返せば，もっと待遇の悪い（残業漬け，土日出社など）会社なんてごまんとあるはずで，この辺は自分が順応していくしかないと思った．\nまた，自分を苦しめた要因の一つが「サイクルの単調さ」にあったように思うので，就職するうえではある程度刺激的で流動的な仕事ができたらいいと感じた． 一方で安定を求めているのも確かで，バランスを考えていく必要を感じた．\n#学校で学んだこととの関わりについて 原子力にはさほど興味がなかったが，巨大さの象徴でもある発電プラントのなかで，制御工学がどの程度関わっているかということを知ることができた． 「じゃあどの程度か」と訊かれたら「ほんの一部」という答えになる． この辺をあまり詳しく書くと怒られるかもしれないが，大学院で学ぶ高度な制御理論は殆ど登場せず，はじめ少しがっかりした．\nしかしながら，配属先の部長さんの話を聞くうちに，目から鱗が落ちていくような気がした． というのも，彼は学生のとき僕と同じく理論ベースの制御を研究し，就職時に学問と実際とのギャップに落胆したとのこと． けれども，業務を通じて，「自分の専門」への固執が，ある意味で世界を狭めていたことに気づき，以後より広い目線を獲得していくことにつながった，という趣旨の話をしてくださった．\nこのエピソード以外にも，貴重な時間を割いてたくさん含蓄ある話を聞かせてもらい，少し大袈裟かもしれないが「この人の下でなら仕事をしたい」と思えるくらい，魅力を感じた．\n12月現在，自分の研究に対しての素養が十分でないとわかりつつある今，就職は人で決めたいと思う理由のひとつになっている．\n今後どうするか インターンで得る情報がかなり有益であることに気づいたので，できれば別の会社を訪問し，比較検討したいと考えている．","title":"三菱重工のインターンシップに参加しました"},{"content":"概要 理系の大学生，大学院生を対象にした，1年間の奨学金付きインターンプログラム．\n日欧産業協力センター(以下センター)によって実施されている．詳しくはこちらを参照．\nヴルカヌス・イン・ヨーロッパ\n採択されたのはベルギーのSiemens Industry Software NVという企業． 今回は応募の経緯と，採択に至る過程を簡単に紹介しようと思う．\n経緯 4月に他大学院に進学．環境が変わることで，刺激的な出会いがたくさんあった．\nそのなかでも修士2年から留学に行くという研究室の友人に触発され，海外経験の必要を感じていたこともあり，応募するだけならタダ，という気楽な考えで応募した．\n友人や，その友人の留学生に英文の書類作成や面接練習を手伝ってもらったおかげで，選考を生き残ることができて，徐々に覚悟を決めていった，という次第．\n過程 採用は1次選考，2次選考，3次選考と進んでいく．\n1次は書類選考．志望動機書と推薦書をそれぞれ和文，英文で作成して，センターに郵送する．\n2次は面接．東京の会場にてグループディスカッションと個人面接を行う．\n3次は企業の人事の方と直接電話面接．研修内容の確認などを行う．\n一番驚いたのは，2次の面接に合格したこと．というのも，僕は特に英語が得意というわけでもなく，本番でも面接官の質問にほとんど答えられなかったから． 後から考察するに，おそらく研究分野が候補となる企業の業務内容とマッチしていたことが大きかったんじゃないかと思う． あとはわからない質問には沈黙するんじゃなくて，単語のつぎはぎでもいいからとにかく喋ること． 語学力というより，話そうとする意思を見せたことがよかったのかもしれない． ちなみに，グループディスカッションのテーマは「たこ焼きをヨーロッパで得るための企業戦略を考えよ」みたいな感じだった． 個別面接では好きな漫画を尋ねられたので，即座に『HUNTER×HUNTER』と返答したが，誰もご存知なかったようで焦った．\n1次，3次についても，参考までに，ぼく(もといぼくの友人とその友人の留学生)が作成した書類の一部を公開したいと思う．\n1次選考志望動機(和文) プログラム参加志望理由\n私の目標は世界を舞台に活躍するエンジニアになることです． より具体的には，日本の重工業またはプラントエンジニアリング企業の研究開発部門などに所属し，海外の大きなプロジェクトに携わるなかで，技術面から業界に一定の貢献をしていくことです． 後述する制御工学を専攻する中で，私は巨大なシステムをどのように設計し，動作させるかに興味をもち，このようなキャリア設計をするに至りました．\n貴プログラムを通じて得るものは「外国語でのコミュニケーション」「未知の環境での研究開発」など目標達成のために不可欠な経験であるばかりでなく，欧州での文化的生活を体験することは，私の価値観を広げてくれると予感します． また，欧州諸国には，ドイツのシーメンス社やフランスのシュナイダー社，スイスのABB社など，規模・技術の両面で日本に先行する企業が数多くあるため，私は将来そうした企業の人たちと積極的に関わり，協力・競争したいと考えています． そのため，私の目標と，貴プログラムの目的である「将来の日欧関係を担う若者育成」はマッチするといえます．\n大学，大学院での専門分野\n現在私はシステム科学を専攻し，その中でも制御工学を研究対象にしています． 制御工学とは，制御対象への入力を工夫することにより，その出力を自由に操作することを目指す学問です． ここでの制御対象とは，機械系，電気系，化学プロセス系，生物系など，産業上重要なあらゆるシステムを含みます． また本学問では，対象を数式でモデル化したうえで，制御手法を統一的な枠組みで議論することができます． このような応用の可能性と，理論の簡明性が，本学問の魅力だと考えます．\n現在私は，制御信号に離散値しか用いることができない場合に対する，制御手法の研究をおこなっています． このような制約は産業上よくある要請であり，意義のある研究だといえます． 私が提案する制御手法では，信号に確率的な雑音を意図的に付加することで，制御性能を改善することができます． これは，制御器に乱数生成器を取り付けるだけで実装できる，コストパフォーマンスに優れた手法です．\n自分はどのように受入企業へ貢献できるか\nはじめに，私は研究者としての素質を備えています． 私は前述の研究内容に関して一定の成果を上げており，これまで学会発表を国内で2件，国外で1件おこなったほか，国内でもっとも権威ある学会に論文が採択されました． これらは勉学に関する地道な下積みなしには達成できない成果です．\nまた，私は技術者として一定のスキルを備えています． 具体的にはシミュレーション，実機実験，データ分析などをはじめとする，研究活動に必要なひと通りの作業を経験しています． また，C, Python, Matlabなどのプログラミング言語を扱うことができます．\n1次選考志望動機(英文) Motivation to take part in this program.\nMy life goal is to be the engineer leading the world. Specifically, I will belong to the department of research and development in the heavy industry or plant engineering company and execute the big project that have a big effect on all over the world. I studied on control engineering in Osaka University and Kyoto University profoundly, and also got interested in designing and controling a huge system. This is why I have decided to apply for this program.\nThrough this program, I strongly believe that I can obtain the experience not only improving my skills to have communication with people in English and to do research and development with foreigners but also broaden my horizon. In addition, European countries have a lot of companies such as Siemens, Schneider Electric and ABB that lead the Japanese companies in the technological aspect. Moreover, I insist that we Japanese companies have to compete and cooperate with these huge European companies in the future and so is my future plan. As I mentioned so far, the purpose of this program and my future goal match perfectly.\nField of study in undergraduate and graduate school\nI’m majoring systems science and particularly researching control engineering in my university. Control engineering is a study about arranging the input to the controlled object in order to control the output as we like. The controlled object can be mechanical, electronical, biological systems or a chemical process and these are fundamental to an industry. In this study, first we model the object and after which we can discuss the method to control the object coherently. For these reasons, it’s possible to apply this study to many cases and understand many things simply.\nMy particular interest of research is studying control methods using only a quaitized signal, which is a common situation in an industry. Our propose method can improve control performance by adding random noise intentionally. We can implement this method by installing random numbers of generator, hence this is high cost performance method.\nHow I can contribute to the accepting company\nFirst, I have the making of a researcher. The research content mentioned above was presented at the academic meeting three times, and will be published in the Journal of \u0026ldquo;The Society of Instrument and Control Engineers(SICE)\u0026rdquo;. Moreover, I received \u0026ldquo;the research encouragement award\u0026rdquo; last year by SICE, hence this honor would be the evidence of my passion toward study.\nSecond, I have essential skills for engineers. More specifically, I have experienced necessary operations for scientists, such as simulation, lab test, data analysis, etc. I can use C, Python, Matlab.\n3次選考Motivation Letter To Whom It May Concern,\nI am *** *** and my major is control engineering. Control theory deals with the behaviour of dynamical systems that have feedback. These controlled systems can be mechanical, electronic, biological systems or a chemical processes and are fundamental to any industry. Right now, I am studying a new method that can control systems more simply than the conventional method of controlling systems. Specifically, we usually use continuous-valued signals to control systems, but I attempt to control them using only discrete-valued signals. I believe it will be very useful for industry.\nMy life goal is to be an engineer of an R\u0026amp;D department in a leading company and work on projects that will have a large impact on the world. Through this program, I strongly believe that I can improve my English communication skills and gain valuable research and development experience working alongside foreigner \u0026gt;researchers. But, more importantly, working in this environment will broaden my horizons, expanding the way I view the world.\nIn addition, European countries have a lot of companies such as Siemens, Schneider Electric and ABB that lead Japanese companies in respect to technological processes. Moreover, I believe that Japanese companies have to compete and cooperate with these companies to make advancements in the field. I wish to pursue this goal of bettering the engineering as a whole through this cooperation. As I mentioned so far, the purpose of this program and my future goals are perfectly synced.\nThere are many reasons for me to apply for your company. First and foremost, my field of research area and the training received through this program align well. Secondly, I am incredibly interested in the development of automotive or aerospace systems. Finally, I want to understand the corporate culture in Europe by working in the subsidiary of a famous company, Siemens.\nI feel that I am well qualified to apply this program. I have the desire and conviction to be a researcher. The research I have worked on, mentioned above, was presented at three separate academic meetings and was published in the The Journal of SICE. I have essential skills of an engineer. I have learned necessary operations for engineering, such as simulation, lab test, data analysis, etc. and I can use C, Python, Matlab. Furthermore, I received \u0026ldquo;The Research Encouragement Award\u0026rdquo; last year from SICE. Hence this honour and the work I have done should be evidence of my passion and qualification in the field of engineering.\nSincerely,\n今後の課題 渡航に向けて準備を進めていくこと．\n","permalink":"https://inody.github.io/posts/vine/","summary":"概要 理系の大学生，大学院生を対象にした，1年間の奨学金付きインターンプログラム．\n日欧産業協力センター(以下センター)によって実施されている．詳しくはこちらを参照．\nヴルカヌス・イン・ヨーロッパ\n採択されたのはベルギーのSiemens Industry Software NVという企業． 今回は応募の経緯と，採択に至る過程を簡単に紹介しようと思う．\n経緯 4月に他大学院に進学．環境が変わることで，刺激的な出会いがたくさんあった．\nそのなかでも修士2年から留学に行くという研究室の友人に触発され，海外経験の必要を感じていたこともあり，応募するだけならタダ，という気楽な考えで応募した．\n友人や，その友人の留学生に英文の書類作成や面接練習を手伝ってもらったおかげで，選考を生き残ることができて，徐々に覚悟を決めていった，という次第．\n過程 採用は1次選考，2次選考，3次選考と進んでいく．\n1次は書類選考．志望動機書と推薦書をそれぞれ和文，英文で作成して，センターに郵送する．\n2次は面接．東京の会場にてグループディスカッションと個人面接を行う．\n3次は企業の人事の方と直接電話面接．研修内容の確認などを行う．\n一番驚いたのは，2次の面接に合格したこと．というのも，僕は特に英語が得意というわけでもなく，本番でも面接官の質問にほとんど答えられなかったから． 後から考察するに，おそらく研究分野が候補となる企業の業務内容とマッチしていたことが大きかったんじゃないかと思う． あとはわからない質問には沈黙するんじゃなくて，単語のつぎはぎでもいいからとにかく喋ること． 語学力というより，話そうとする意思を見せたことがよかったのかもしれない． ちなみに，グループディスカッションのテーマは「たこ焼きをヨーロッパで得るための企業戦略を考えよ」みたいな感じだった． 個別面接では好きな漫画を尋ねられたので，即座に『HUNTER×HUNTER』と返答したが，誰もご存知なかったようで焦った．\n1次，3次についても，参考までに，ぼく(もといぼくの友人とその友人の留学生)が作成した書類の一部を公開したいと思う．\n1次選考志望動機(和文) プログラム参加志望理由\n私の目標は世界を舞台に活躍するエンジニアになることです． より具体的には，日本の重工業またはプラントエンジニアリング企業の研究開発部門などに所属し，海外の大きなプロジェクトに携わるなかで，技術面から業界に一定の貢献をしていくことです． 後述する制御工学を専攻する中で，私は巨大なシステムをどのように設計し，動作させるかに興味をもち，このようなキャリア設計をするに至りました．\n貴プログラムを通じて得るものは「外国語でのコミュニケーション」「未知の環境での研究開発」など目標達成のために不可欠な経験であるばかりでなく，欧州での文化的生活を体験することは，私の価値観を広げてくれると予感します． また，欧州諸国には，ドイツのシーメンス社やフランスのシュナイダー社，スイスのABB社など，規模・技術の両面で日本に先行する企業が数多くあるため，私は将来そうした企業の人たちと積極的に関わり，協力・競争したいと考えています． そのため，私の目標と，貴プログラムの目的である「将来の日欧関係を担う若者育成」はマッチするといえます．\n大学，大学院での専門分野\n現在私はシステム科学を専攻し，その中でも制御工学を研究対象にしています． 制御工学とは，制御対象への入力を工夫することにより，その出力を自由に操作することを目指す学問です． ここでの制御対象とは，機械系，電気系，化学プロセス系，生物系など，産業上重要なあらゆるシステムを含みます． また本学問では，対象を数式でモデル化したうえで，制御手法を統一的な枠組みで議論することができます． このような応用の可能性と，理論の簡明性が，本学問の魅力だと考えます．\n現在私は，制御信号に離散値しか用いることができない場合に対する，制御手法の研究をおこなっています． このような制約は産業上よくある要請であり，意義のある研究だといえます． 私が提案する制御手法では，信号に確率的な雑音を意図的に付加することで，制御性能を改善することができます． これは，制御器に乱数生成器を取り付けるだけで実装できる，コストパフォーマンスに優れた手法です．\n自分はどのように受入企業へ貢献できるか\nはじめに，私は研究者としての素質を備えています． 私は前述の研究内容に関して一定の成果を上げており，これまで学会発表を国内で2件，国外で1件おこなったほか，国内でもっとも権威ある学会に論文が採択されました． これらは勉学に関する地道な下積みなしには達成できない成果です．\nまた，私は技術者として一定のスキルを備えています． 具体的にはシミュレーション，実機実験，データ分析などをはじめとする，研究活動に必要なひと通りの作業を経験しています． また，C, Python, Matlabなどのプログラミング言語を扱うことができます．\n1次選考志望動機(英文) Motivation to take part in this program.\nMy life goal is to be the engineer leading the world.","title":"ヴルカヌス・イン・ヨーロッパに採択された "}]